{"version":3,"sources":["webpack:///../../src/fable-library/Util.ts","webpack:///../../src/fable-library/Types.ts","webpack:///../../src/fable-library/Reflection.ts","webpack:///../../src/fable-library/Option.ts","webpack:///../../../src/fable-library/lib/big.js","webpack:///../../src/fable-library/Decimal.ts","webpack:///../../src/fable-library/Int32.ts","webpack:///../../../src/fable-library/lib/long.js","webpack:///../../src/fable-library/Long.ts","webpack:///../../src/fable-library/Seq.ts","webpack:///../../src/fable-library/Date.ts","webpack:///../../src/fable-library/RegExp.ts","webpack:///../../src/fable-library/String.ts","webpack:///./.fable/fable-library.2.4.22/MutableMap.js","webpack:///./.fable/fable-library.2.4.22/Map.js","webpack:///./.fable/fable-library.2.4.22/MutableSet.js","webpack:///./.fable/fable-library.2.4.22/Set.js","webpack:///./.fable/fable-library.2.4.22/Array.js","webpack:///./.fable/fable-library.2.4.22/List.js","webpack:///../../src/fable-library/AsyncBuilder.ts","webpack:///../../src/fable-library/Async.ts","webpack:///../../src/fable-library/Observable.ts","webpack:///../../src/fable-library/Event.ts","webpack:///../../src/fable-library/Timer.ts","webpack:///.fable/Fable.Elmish.3.0.6/prelude.fs","webpack:///.fable/Fable.Elmish.3.0.6/cmd.fs","webpack:///.fable/Feliz.0.74.0/Interop.fs","webpack:///../../src/fable-library/MailboxProcessor.ts","webpack:///./.fable/Feliz.0.74.0/ReactInterop.js","webpack:///.fable/Feliz.0.74.0/React.fs","webpack:///src/Feliz.UseWorker/UseWorker.fs","webpack:///docs/UseWorker/FPSStats.fs","webpack:///../../src/fable-library/TimeSpan.ts","webpack:///docs/UseWorker/Examples/Basic.fs","webpack:///.fable/Feliz.ElmishComponents.0.2.28/Components.fs","webpack:///docs/UseWorker/Examples/Elmish.fs","webpack:///.fable/Fable.SimpleHttp.2.7.0/Http.fs","webpack:///.fable/Fable.React.5.3.6/Fable.React.Helpers.fs","webpack:///.fable/Fable.Elmish.React.3.0.1/common.fs","webpack:///.fable/Feliz.Router.1.9.0/Router.fs","webpack:///.fable/Fable.Elmish.3.0.6/ring.fs","webpack:///.fable/Fable.Elmish.3.0.6/program.fs","webpack:///.fable/Fable.Elmish.React.3.0.1/react.fs","webpack:///docs/App.fs","webpack:///.fable/Fable.React.5.3.6/Fable.React.FunctionComponent.fs"],"names":["y","sameType","other","t","rm","s","n","P","x","e","Long","prototype","$this","i","rep","utc","date","getUTCHours","getHours","precision","MutableMap$00602","declare","pairs","comparer","this$","FSharpRef","this","contents","hashMap","Map","iterate","pair","MutableMap$00602$$Add$$5BDDA1","MutableMap$00602$$TryFindIndex$$2B595","this$$$1","k","h","GetHashCode","matchValue","tryGetValue","findIndex","pair$$1","Equals","MutableMap$00602$$TryFind$$2B595","this$$$2","k$$1","matchValue$$1","getItemFromDict","MutableMap$00602$$Clear","this$$$4","clear","MutableMap$00602$$get_Count","this$$$5","sumBy","pairs$$2","length","values","GetZero","Add","$x$$2","$y$$3","this$$$8","k$$4","v$$1","matchValue$$4","msg","format","Error","addInPlace","set","MutableMap$00602$$Remove$$2B595","this$$$10","k$$6","matchValue$$6","splice","Symbol","iterator","this$$$11","toIterator","getEnumerator","delay","collect","pairs$$3","map","pair$$3","item","Clear","Contains","item$$1","matchValue$$7","equals","CopyTo","array","arrayIndex","iterateIndexed","i$$10","Object","defineProperty","Remove","item$$2","matchValue$$8","k$$7","entries","get","k$$8","this$$$6","k$$2","matchValue$$2","MutableMap$00602$$get_Item$$2B595","has","k$$9","this$$$9","k$$5","matchValue$$5","MutableMap$00602$$ContainsKey$$2B595","keys","pair$$5","k$$10","v$$2","this$$$7","k$$3","v","matchValue$$3","MutableMap$00602$$set_Item$$5BDDA1","pair$$6","MapTree$00602","tag","name","fields","Union","call","MapTreeModule$$$size","MapTreeModule$$$sizeAux","$acc$$5","$m$$6","acc","m","MapTreeModule$$$empty","MapTreeModule$$$height","_arg1","MapTreeModule$$$mk","l$$1","r$$1","hl","hr","MapTreeModule$$$rebalance","t1","t2","t1h","t2h","MapTreeModule$$$add","m$$3","c","Compare","c$$1","MapTreeModule$$$find","$comparer$$1$$23","$k$$3$$24","$m$$4$$25","comparer$$1","m$$4","c$$3","MapTreeModule$$$mem","$comparer$$10$$59","$k$$12$$60","$m$$8$$61","comparer$$10","k$$12","m$$8","c$$8","MapTreeModule$002EMapIterator$00602","arg1","arg2","stack","started","Record","MapTreeModule$$$collapseLHS","$stack$$111","tail","List","head","MapTreeModule$$$mkIterator","s$$5","MapTreeModule$$$current","i$$2","MapTreeModule$$$alreadyFinished","MapTreeModule$$$notStarted","MapTreeModule$002EmkIEnumerator$0027$00602","s$$6","MapTreeModule$$$mkIEnumerator","s$$7","MapTreeModule$002EmkIEnumerator$0027$00602$$$$002Ector$$Z26BC498C","MapTreeModule$$$toSeq","s$$8","unfold","en$$1","MoveNext","Current","i$$3","MapTreeModule$$$moveNext","Reset","Dispose","FSharpMap","comparer$$17","tree","FSharpMap$$$$002Ector$$58ADD115","FSharpMap$$get_Tree","__$$5","FSharpMap$$get_Item$$2B595","__$$8","k$$29","FSharpMap$$get_Count","__$$20","FSharpMap$$ContainsKey$$2B595","__$$21","k$$31","ofArray","comparer$$20","comparer$$15","arr","res$$2","patternInput$$3","MapTreeModule$$$ofArray","toString","join","map$$2","kv","combineHash","x$$16","y$$3","res$$3","e$$1","activePatternResult3692","structuralHash","Math","abs","that","CompareTo","obj","res$$4","finished","e1","e2","kvp1","kvp2","c$$10","compare","isDisposable","_arg1$$1","k$$34","k$$35","kv$$1","k$$36","v$$26","kv$$2","MutableSet$00601","items","MutableSet$00601$$Add$$2B595","MutableSet$00601$$TryFindIndex$$2B595","MutableSet$00601$$Clear","MutableSet$00601$$get_Count","MutableSet$00601$$Contains$$2B595","MutableSet$00601$$Remove$$2B595","values$$1","value$$2","i$$8","item$$3","add","add_","x$$1","SetTree$00601","SetTreeModule$$$SetOne","SetTreeModule$$$SetNode","SetTreeModule$002ESetIterator$00601","SetTreeModule$$$collapseLHS","$stack$$104","SetTreeModule$$$mkIterator","s$$13","SetTreeModule$$$current","SetTreeModule$$$alreadyFinished","SetTreeModule$$$notStarted","SetTreeModule$002EmkIEnumerator$00601","s$$14","SetTreeModule$$$mkIEnumerator","s$$15","SetTreeModule$002EmkIEnumerator$00601$$$$002Ector$$Z5B395D56","SetTreeModule$$$compare","comparer$$18","s1","s2","$comparer$$17$$112","$l1$$113","$l2$$114","SetTreeModule$$$compareStacks","$target$$115","t1$$6","t2$$6","n1k","n2k","t1$$7","t2$$7","n1k$$1","n2k$$1","n2r","t1$$8","t2$$8","emp","n1k$$2","n1r","n2k$$2","t1$$9","t2$$9","n1k$$3","n1r$$1","n2k$$3","n2r$$1","t1$$10","t2$$10","n1k$$4","t1$$11","n1k$$5","n1l","n1r$$2","t1$$12","n2k$$4","t2$$11","n2k$$5","n2l","n2r$$2","t2$$12","l1","l2","c$$7","c$$9","i$$1","SetTreeModule$$$moveNext","FSharpSet","comparer$$22","FSharpSet$$get_Comparer","__$$4","FSharpSet$$get_Tree","map$$1","x$$21","String","res","that$$1","f$$1","source$$1","cons$$2","ArrayBuffer","isView","len$$1","target$$2","i$$4","initialize","count$$8","initializer","cons$$15","result$$7","i$$13","x$$3","array$$47","push","sort","xs$$2","comparer$$2","xs$$3","slice","x$$13","equalsWith","comparer$$13","array1$$7","array2$$7","comparer$$12","array1$$6","array2$$6","i$$40","result$$13","length1","length2","compareWith","sum","array$$120","adder","acc$$11","i$$44","ofList","source$$7","cons$$32","from","foldIndexed","state","xs$$7","$f$$12","$i$$13","$acc$$14","$_arg1$$5$$15","f","_arg1$$5","foldIndexedAux","fold","$f$$2$$19","$state$$1$$20","$xs$$8$$21","f$$2","state$$1","xs$$8","reverse","xs$$9","acc$$1","x$$6","ofSeq","xs$$12","fold$$1","acc$$3","x$$9","xs$$27","acc$$9","_arg1$$7","append","xs$$28","ys$$10","acc$$10","x$$15","f$$16","xs$$31","indexed","xs$$35","f$$17","x$$18","xs$$33","acc$$12","x$$17","f$$24","xs$$46","unitVar0","x$$24","xs$$50","res$$1","i$$9","count","tryPickIndexed","f$$29","xs$$52","$f$$28$$120","$i$$10$$121","$_arg1$$9$$122","tryPickIndexedAux","f$$28","_arg1$$9","result","tryFindIndexed","f$$32","xs$$55","i$$11","x$$31","some","tryFind","f$$33","xs$$56","_arg1$$11","x$$32","filter","f$$42","xs$$71","acc$$17","x$$37","text","ex","console","o","interval","callback","returnVal","Start","dispatch","cmd","sub","start","task","arg","ofSuccess","mkAttr","key","value","mkStyle","getDisposable","deps","useEffectReact","disposable","renderElement","withKey","props","propsWithKey","initial","dispose","effect","useEffectWithDeps","initialValue","render","functionComponent","inbox","clo1","loop","status","_","umdPath","subscriber","timeout","worker","createNewWorker","mailbox","clearWorkerTimeout","id","newState","replyChannel","Post","token","applyWorkerCommands","createMailbox","reply","arg10","postMessage","data","arg20","onMessage","clo2","blobOptions","URL","Kill","document","array$$105","options","userOptions","defaultOptions","workerPath","scriptName","array$$104","patternInput","setWorkerStatus","callbackFunction","dependencies","defaultArg","workerSub","( .ctor )","createDeps","createHookWorker","current","tupledArg","arg00","Invoke","Restart","workerMsg","workerStatusMsg","create","_arg2","afRequest","window","currentTime","fps","Fps","useEffect","createDisposable","xs","properties","elems","names","_arg3","_arg4","sortNumbers","initialState","prevProps","prevState","arg0","Worker","HttpMethod","BodyContent","ResponseContent","delimiter","input","url","defaultRequest","httpVerb","req","xhr","serializeMethod","chooser$$2","cons$$30","readyState","responseText","responseType","statusCode","content","response","splitAt","getAllResponseHeaders","headerLine","value$$15","x$$5","forLoopVar","setRequestHeader","mimeType","overrideMimeType","send","areEqual","equal","view","comp","lazyViewWith","nextProps","_nextState","path","mode","list","segment","collect$$1","query","urlSegmentsWithRouteMode","routeMode","nextState","onChange","ev","urlSegments","location","hash","pathname","search","size","target","targetIndex","fill","max","__","rix'","wix'","ix","source$$6","wix","setState","program","rb","reentered","syncDispatch","nextMsg","lazyView2With","placeholderId","model","getElementById","CurrentTab","fullKey","init","update","render'","githubPath","rawPath","parts","codeBlockRenderer","codeProps","language","sampleName","sampleApp","option","samples","tuple","children","renderMarkdown","renderers","one","resolvePath","request","method","centeredSpinner","loadMarkdown","loadMarkdown'","displayName","memoizeWith","elemType","memoElement","collapsed","f$$49","n$$1","i$$14","_arg1$$14","acc$$19","x$$41","_arg1$$2","xValue","sidebar","menuLabel","menuItem","classes","source","strings","allItems","contributing","main","application","modifiedProperties","prop","eventHandler","app","withReactSynchronousUsing","runWith"],"mappings":"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IAAK,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,EAAG,IAAK,IAAK,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,EAAG,EAAG,GAAI,IAAK,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,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","file":"0.bundle.58c06760e11a0d03515f.js","sourcesContent":["// tslint:disable:ban-types\n// Object.assign flattens getters and setters\n// See https://stackoverflow.com/questions/37054596/js-es5-how-to-assign-objects-with-setters-and-getters\nexport function extend(target, ...sources) {\n    for (const source of sources) {\n        for (const key of Object.keys(source)) {\n            const descr = Object.getOwnPropertyDescriptor(source, key);\n            if (descr) {\n                Object.defineProperty(target, key, descr);\n            }\n        }\n    }\n    return target;\n}\nexport function isIterable(x) {\n    return x != null && typeof x === \"object\" && Symbol.iterator in x;\n}\nexport function isArrayLike(x) {\n    return x != null && (Array.isArray(x) || ArrayBuffer.isView(x));\n}\nexport function isComparer(x) {\n    return x != null && typeof x.Compare === \"function\";\n}\nexport function isComparable(x) {\n    return x != null && typeof x.CompareTo === \"function\";\n}\nexport function isEquatable(x) {\n    return x != null && typeof x.Equals === \"function\";\n}\nexport function isHashable(x) {\n    return x != null && typeof x.GetHashCode === \"function\";\n}\nexport function isDisposable(x) {\n    return x != null && typeof x.Dispose === \"function\";\n}\nexport class Comparer {\n    constructor(f) {\n        this.Compare = f || compare;\n    }\n}\nexport function comparerFromEqualityComparer(comparer) {\n    // Sometimes IEqualityComparer also implements IComparer\n    if (isComparer(comparer)) {\n        return new Comparer(comparer.Compare);\n    }\n    else {\n        return new Comparer((x, y) => {\n            const xhash = comparer.GetHashCode(x);\n            const yhash = comparer.GetHashCode(y);\n            if (xhash === yhash) {\n                return comparer.Equals(x, y) ? 0 : -1;\n            }\n            else {\n                return xhash < yhash ? -1 : 1;\n            }\n        });\n    }\n}\n// TODO: Move these three methods to Map and Set modules\nexport function containsValue(v, map) {\n    for (const kv of map) {\n        if (equals(v, kv[1])) {\n            return true;\n        }\n    }\n    return false;\n}\nexport function tryGetValue(map, key, defaultValue) {\n    return map.has(key) ? [true, map.get(key)] : [false, defaultValue];\n}\nexport function addToSet(v, set) {\n    if (set.has(v)) {\n        return false;\n    }\n    set.add(v);\n    return true;\n}\nexport function assertEqual(actual, expected, msg) {\n    if (!equals(actual, expected)) {\n        throw Object.assign(new Error(msg || `Expected: ${expected} - Actual: ${actual}`), {\n            actual,\n            expected,\n        });\n    }\n}\nexport function assertNotEqual(actual, expected, msg) {\n    if (equals(actual, expected)) {\n        throw Object.assign(new Error(msg || `Expected: ${expected} - Actual: ${actual}`), {\n            actual,\n            expected,\n        });\n    }\n}\nexport class Lazy {\n    constructor(factory) {\n        this.factory = factory;\n        this.isValueCreated = false;\n    }\n    get Value() {\n        if (!this.isValueCreated) {\n            this.createdValue = this.factory();\n            this.isValueCreated = true;\n        }\n        return this.createdValue;\n    }\n    get IsValueCreated() {\n        return this.isValueCreated;\n    }\n}\nexport function lazyFromValue(v) {\n    return new Lazy(() => v);\n}\nexport function padWithZeros(i, length) {\n    let str = i.toString(10);\n    while (str.length < length) {\n        str = \"0\" + str;\n    }\n    return str;\n}\nexport function padLeftAndRightWithZeros(i, lengthLeft, lengthRight) {\n    let str = i.toString(10);\n    while (str.length < lengthLeft) {\n        str = \"0\" + str;\n    }\n    while (str.length < lengthRight) {\n        str = str + \"0\";\n    }\n    return str;\n}\nexport function dateOffset(date) {\n    const date1 = date;\n    return typeof date1.offset === \"number\"\n        ? date1.offset\n        : (date.kind === 1 /* UTC */\n            ? 0 : date.getTimezoneOffset() * -60000);\n}\nexport function int16ToString(i, radix) {\n    i = i < 0 && radix != null && radix !== 10 ? 0xFFFF + i + 1 : i;\n    return i.toString(radix);\n}\nexport function int32ToString(i, radix) {\n    i = i < 0 && radix != null && radix !== 10 ? 0xFFFFFFFF + i + 1 : i;\n    return i.toString(radix);\n}\nexport class ObjectRef {\n    static id(o) {\n        if (!ObjectRef.idMap.has(o)) {\n            ObjectRef.idMap.set(o, ++ObjectRef.count);\n        }\n        return ObjectRef.idMap.get(o);\n    }\n}\nObjectRef.idMap = new WeakMap();\nObjectRef.count = 0;\nexport function stringHash(s) {\n    let i = 0;\n    let h = 5381;\n    const len = s.length;\n    while (i < len) {\n        h = (h * 33) ^ s.charCodeAt(i++);\n    }\n    return h;\n}\nexport function numberHash(x) {\n    return x * 2654435761 | 0;\n}\n// From https://stackoverflow.com/a/37449594\nexport function combineHashCodes(hashes) {\n    if (hashes.length === 0) {\n        return 0;\n    }\n    return hashes.reduce((h1, h2) => {\n        return ((h1 << 5) + h1) ^ h2;\n    });\n}\nexport function identityHash(x) {\n    if (x == null) {\n        return 0;\n    }\n    switch (typeof x) {\n        case \"boolean\":\n            return x ? 1 : 0;\n        case \"number\":\n            return numberHash(x);\n        case \"string\":\n            return stringHash(x);\n        default:\n            return numberHash(ObjectRef.id(x));\n    }\n}\nexport function structuralHash(x) {\n    if (x == null) {\n        return 0;\n    }\n    switch (typeof x) {\n        case \"boolean\":\n            return x ? 1 : 0;\n        case \"number\":\n            return numberHash(x);\n        case \"string\":\n            return stringHash(x);\n        default: {\n            if (isHashable(x)) {\n                return x.GetHashCode();\n            }\n            else if (isArrayLike(x)) {\n                const len = x.length;\n                const hashes = new Array(len);\n                for (let i = 0; i < len; i++) {\n                    hashes[i] = structuralHash(x[i]);\n                }\n                return combineHashCodes(hashes);\n            }\n            else {\n                return stringHash(String(x));\n            }\n        }\n    }\n}\nexport function equalArraysWith(x, y, eq) {\n    if (x == null) {\n        return y == null;\n    }\n    if (y == null) {\n        return false;\n    }\n    if (x.length !== y.length) {\n        return false;\n    }\n    for (let i = 0; i < x.length; i++) {\n        if (!eq(x[i], y[i])) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function equalArrays(x, y) {\n    return equalArraysWith(x, y, equals);\n}\n// export function equalObjects(x: { [k: string]: any }, y: { [k: string]: any }): boolean {\n//   if (x == null) { return y == null; }\n//   if (y == null) { return false; }\n//   const xKeys = Object.keys(x);\n//   const yKeys = Object.keys(y);\n//   if (xKeys.length !== yKeys.length) {\n//     return false;\n//   }\n//   xKeys.sort();\n//   yKeys.sort();\n//   for (let i = 0; i < xKeys.length; i++) {\n//     if (xKeys[i] !== yKeys[i] || !equals(x[xKeys[i]], y[yKeys[i]])) {\n//       return false;\n//     }\n//   }\n//   return true;\n// }\nexport function equals(x, y) {\n    if (x === y) {\n        return true;\n    }\n    else if (x == null) {\n        return y == null;\n    }\n    else if (y == null) {\n        return false;\n    }\n    else if (typeof x !== \"object\") {\n        return false;\n    }\n    else if (isEquatable(x)) {\n        return x.Equals(y);\n    }\n    else if (isArrayLike(x)) {\n        return isArrayLike(y) && equalArrays(x, y);\n    }\n    else if (x instanceof Date) {\n        return (y instanceof Date) && compareDates(x, y) === 0;\n    }\n    else {\n        return false;\n    }\n}\nexport function compareDates(x, y) {\n    let xtime;\n    let ytime;\n    // DateTimeOffset and DateTime deals with equality differently.\n    if (\"offset\" in x && \"offset\" in y) {\n        xtime = x.getTime();\n        ytime = y.getTime();\n    }\n    else {\n        xtime = x.getTime() + dateOffset(x);\n        ytime = y.getTime() + dateOffset(y);\n    }\n    return xtime === ytime ? 0 : (xtime < ytime ? -1 : 1);\n}\nexport function comparePrimitives(x, y) {\n    return x === y ? 0 : (x < y ? -1 : 1);\n}\nexport function compareArraysWith(x, y, comp) {\n    if (x == null) {\n        return y == null ? 0 : 1;\n    }\n    if (y == null) {\n        return -1;\n    }\n    if (x.length !== y.length) {\n        return x.length < y.length ? -1 : 1;\n    }\n    for (let i = 0, j = 0; i < x.length; i++) {\n        j = comp(x[i], y[i]);\n        if (j !== 0) {\n            return j;\n        }\n    }\n    return 0;\n}\nexport function compareArrays(x, y) {\n    return compareArraysWith(x, y, compare);\n}\nexport function compareObjects(x, y) {\n    if (x == null) {\n        return y == null ? 0 : 1;\n    }\n    if (y == null) {\n        return -1;\n    }\n    const xKeys = Object.keys(x);\n    const yKeys = Object.keys(y);\n    if (xKeys.length !== yKeys.length) {\n        return xKeys.length < yKeys.length ? -1 : 1;\n    }\n    xKeys.sort();\n    yKeys.sort();\n    for (let i = 0, j = 0; i < xKeys.length; i++) {\n        const key = xKeys[i];\n        if (key !== yKeys[i]) {\n            return key < yKeys[i] ? -1 : 1;\n        }\n        else {\n            j = compare(x[key], y[key]);\n            if (j !== 0) {\n                return j;\n            }\n        }\n    }\n    return 0;\n}\nexport function compare(x, y) {\n    if (x === y) {\n        return 0;\n    }\n    else if (x == null) {\n        return y == null ? 0 : -1;\n    }\n    else if (y == null) {\n        return 1;\n    }\n    else if (typeof x !== \"object\") {\n        return x < y ? -1 : 1;\n    }\n    else if (isComparable(x)) {\n        return x.CompareTo(y);\n    }\n    else if (isArrayLike(x) && isArrayLike(y)) {\n        return compareArrays(x, y);\n    }\n    else if (x instanceof Date && y instanceof Date) {\n        return compareDates(x, y);\n    }\n    else {\n        return 1;\n    }\n}\nexport function min(comparer, x, y) {\n    return comparer(x, y) < 0 ? x : y;\n}\nexport function max(comparer, x, y) {\n    return comparer(x, y) > 0 ? x : y;\n}\nexport function createAtom(value) {\n    let atom = value;\n    return (value) => {\n        if (value === void 0) {\n            return atom;\n        }\n        else {\n            atom = value;\n            return void 0;\n        }\n    };\n}\nconst CaseRules = {\n    None: 0,\n    LowerFirst: 1,\n    SnakeCase: 2,\n    SnakeCaseAllCaps: 3,\n    KebabCase: 4,\n};\nfunction dashify(str, separator) {\n    return str.replace(/[a-z]?[A-Z]/g, (m) => m.length === 1\n        ? m.toLowerCase()\n        : m.charAt(0) + separator + m.charAt(1).toLowerCase());\n}\nfunction changeCase(str, caseRule) {\n    switch (caseRule) {\n        case CaseRules.LowerFirst:\n            return str.charAt(0).toLowerCase() + str.slice(1);\n        case CaseRules.SnakeCase:\n            return dashify(str, \"_\");\n        case CaseRules.SnakeCaseAllCaps:\n            return dashify(str, \"_\").toUpperCase();\n        case CaseRules.KebabCase:\n            return dashify(str, \"-\");\n        case CaseRules.None:\n        default:\n            return str;\n    }\n}\nexport function createObj(fields, caseRule = CaseRules.None) {\n    function fail(kvPair) {\n        throw new Error(\"Cannot infer key and value of \" + String(kvPair));\n    }\n    const o = {};\n    const definedCaseRule = caseRule;\n    for (let kvPair of fields) {\n        let caseRule = CaseRules.None;\n        if (kvPair == null) {\n            fail(kvPair);\n        }\n        // Deflate unions and use the defined case rule\n        if (typeof kvPair.toJSON === \"function\") {\n            kvPair = kvPair.toJSON();\n            caseRule = definedCaseRule;\n        }\n        if (Array.isArray(kvPair)) {\n            switch (kvPair.length) {\n                case 0:\n                    fail(kvPair);\n                    break;\n                case 1:\n                    o[changeCase(kvPair[0], caseRule)] = true;\n                    break;\n                case 2:\n                    const value = kvPair[1];\n                    o[changeCase(kvPair[0], caseRule)] = value;\n                    break;\n                default:\n                    o[changeCase(kvPair[0], caseRule)] = kvPair.slice(1);\n            }\n        }\n        else if (typeof kvPair === \"string\") {\n            o[changeCase(kvPair, caseRule)] = true;\n        }\n        else {\n            fail(kvPair);\n        }\n    }\n    return o;\n}\nexport function jsOptions(mutator) {\n    const opts = {};\n    mutator(opts);\n    return opts;\n}\nexport function round(value, digits = 0) {\n    const m = Math.pow(10, digits);\n    const n = +(digits ? value * m : value).toFixed(8);\n    const i = Math.floor(n);\n    const f = n - i;\n    const e = 1e-8;\n    const r = (f > 0.5 - e && f < 0.5 + e) ? ((i % 2 === 0) ? i : i + 1) : Math.round(n);\n    return digits ? r / m : r;\n}\nexport function sign(x) {\n    return x > 0 ? 1 : x < 0 ? -1 : 0;\n}\nexport function randomNext(min, max) {\n    return Math.floor(Math.random() * (max - min)) + min;\n}\nexport function randomBytes(buffer) {\n    if (buffer == null) {\n        throw new Error(\"Buffer cannot be null\");\n    }\n    for (let i = 0; i < buffer.length; i += 6) {\n        // Pick random 48-bit number. Fill buffer in 2 24-bit chunks to avoid bitwise truncation.\n        let r = Math.floor(Math.random() * 281474976710656); // Low 24 bits = chunk 1.\n        const rhi = Math.floor(r / 16777216); // High 24 bits shifted via division = chunk 2.\n        for (let j = 0; j < 6 && i + j < buffer.length; j++) {\n            if (j === 3) {\n                r = rhi;\n            }\n            buffer[i + j] = r & 255;\n            r >>>= 8;\n        }\n    }\n}\nexport function unescapeDataString(s) {\n    // https://stackoverflow.com/a/4458580/524236\n    return decodeURIComponent((s).replace(/\\+/g, \"%20\"));\n}\nexport function escapeDataString(s) {\n    return encodeURIComponent(s).replace(/!/g, \"%21\")\n        .replace(/'/g, \"%27\")\n        .replace(/\\(/g, \"%28\")\n        .replace(/\\)/g, \"%29\")\n        .replace(/\\*/g, \"%2A\");\n}\nexport function escapeUriString(s) {\n    return encodeURI(s);\n}\n// ICollection.Clear and Count members can be called on Arrays\n// or Dictionaries so we need a runtime check (see #1120)\nexport function count(col) {\n    if (isArrayLike(col)) {\n        return col.length;\n    }\n    else {\n        let count = 0;\n        for (const _ of col) {\n            count++;\n        }\n        return count;\n    }\n}\nexport function clear(col) {\n    if (isArrayLike(col)) {\n        col.splice(0);\n    }\n    else {\n        col.clear();\n    }\n}\nconst CURRIED_KEY = \"__CURRIED__\";\nexport function uncurry(arity, f) {\n    // f may be a function option with None value\n    if (f == null) {\n        return null;\n    }\n    // The function is already uncurried\n    if (f.length > 1) {\n        // if (CURRIED_KEY in f) { // This doesn't always work\n        return f;\n    }\n    let uncurriedFn;\n    switch (arity) {\n        case 2:\n            uncurriedFn = (a1, a2) => f(a1)(a2);\n            break;\n        case 3:\n            uncurriedFn = (a1, a2, a3) => f(a1)(a2)(a3);\n            break;\n        case 4:\n            uncurriedFn = (a1, a2, a3, a4) => f(a1)(a2)(a3)(a4);\n            break;\n        case 5:\n            uncurriedFn = (a1, a2, a3, a4, a5) => f(a1)(a2)(a3)(a4)(a5);\n            break;\n        case 6:\n            uncurriedFn = (a1, a2, a3, a4, a5, a6) => f(a1)(a2)(a3)(a4)(a5)(a6);\n            break;\n        case 7:\n            uncurriedFn = (a1, a2, a3, a4, a5, a6, a7) => f(a1)(a2)(a3)(a4)(a5)(a6)(a7);\n            break;\n        case 8:\n            uncurriedFn = (a1, a2, a3, a4, a5, a6, a7, a8) => f(a1)(a2)(a3)(a4)(a5)(a6)(a7)(a8);\n            break;\n        default:\n            throw new Error(\"Uncurrying to more than 8-arity is not supported: \" + arity);\n    }\n    uncurriedFn[CURRIED_KEY] = f;\n    return uncurriedFn;\n}\nexport function curry(arity, f) {\n    if (f == null) {\n        return undefined;\n    }\n    if (CURRIED_KEY in f) {\n        return f[CURRIED_KEY];\n    }\n    switch (arity) {\n        case 2:\n            return (a1) => (a2) => f(a1, a2);\n        case 3:\n            return (a1) => (a2) => (a3) => f(a1, a2, a3);\n        case 4:\n            return (a1) => (a2) => (a3) => (a4) => f(a1, a2, a3, a4);\n        case 5:\n            return (a1) => (a2) => (a3) => (a4) => (a5) => f(a1, a2, a3, a4, a5);\n        case 6:\n            return (a1) => (a2) => (a3) => (a4) => (a5) => (a6) => f(a1, a2, a3, a4, a5, a6);\n        case 7:\n            return (a1) => (a2) => (a3) => (a4) => (a5) => (a6) => (a7) => f(a1, a2, a3, a4, a5, a6, a7);\n        case 8:\n            return (a1) => (a2) => (a3) => (a4) => (a5) => (a6) => (a7) => (a8) => f(a1, a2, a3, a4, a5, a6, a7, a8);\n        default:\n            throw new Error(\"Currying to more than 8-arity is not supported: \" + arity);\n    }\n}\nexport function partialApply(arity, f, args) {\n    if (f == null) {\n        return null;\n    }\n    else if (CURRIED_KEY in f) {\n        f = f[CURRIED_KEY];\n        for (let i = 0; i < args.length; i++) {\n            f = f(args[i]);\n        }\n        return f;\n    }\n    else {\n        switch (arity) {\n            case 1:\n                // Wrap arguments to make sure .concat doesn't destruct arrays. Example\n                // [1,2].concat([3,4],5)   --> [1,2,3,4,5]    // fails\n                // [1,2].concat([[3,4],5]) --> [1,2,[3,4],5]  // ok\n                return (a1) => f.apply(null, args.concat([a1]));\n            case 2:\n                return (a1) => (a2) => f.apply(null, args.concat([a1, a2]));\n            case 3:\n                return (a1) => (a2) => (a3) => f.apply(null, args.concat([a1, a2, a3]));\n            case 4:\n                return (a1) => (a2) => (a3) => (a4) => f.apply(null, args.concat([a1, a2, a3, a4]));\n            case 5:\n                return (a1) => (a2) => (a3) => (a4) => (a5) => f.apply(null, args.concat([a1, a2, a3, a4, a5]));\n            case 6:\n                return (a1) => (a2) => (a3) => (a4) => (a5) => (a6) => f.apply(null, args.concat([a1, a2, a3, a4, a5, a6]));\n            case 7:\n                return (a1) => (a2) => (a3) => (a4) => (a5) => (a6) => (a7) => f.apply(null, args.concat([a1, a2, a3, a4, a5, a6, a7]));\n            case 8:\n                return (a1) => (a2) => (a3) => (a4) => (a5) => (a6) => (a7) => (a8) => f.apply(null, args.concat([a1, a2, a3, a4, a5, a6, a7, a8]));\n            default:\n                throw new Error(\"Partially applying to more than 8-arity is not supported: \" + arity);\n        }\n    }\n}\nexport function mapCurriedArgs(fn, mappings) {\n    function mapArg(fn, arg, mappings, idx) {\n        const mapping = mappings[idx];\n        if (mapping !== 0) {\n            const expectedArity = mapping[0];\n            const actualArity = mapping[1];\n            if (expectedArity > 1) {\n                arg = curry(expectedArity, arg);\n            }\n            if (actualArity > 1) {\n                arg = uncurry(actualArity, arg);\n            }\n        }\n        const res = fn(arg);\n        if (idx + 1 === mappings.length) {\n            return res;\n        }\n        else {\n            return (arg) => mapArg(res, arg, mappings, idx + 1);\n        }\n    }\n    return (arg) => mapArg(fn, arg, mappings, 0);\n}\nexport function addToDict(dict, k, v) {\n    if (dict.has(k)) {\n        throw new Error(\"An item with the same key has already been added. Key: \" + k);\n    }\n    dict.set(k, v);\n}\nexport function getItemFromDict(map, key) {\n    if (map.has(key)) {\n        return map.get(key);\n    }\n    else {\n        throw new Error(`The given key '${key}' was not present in the dictionary.`);\n    }\n}\n//# sourceMappingURL=Util.js.map","// tslint:disable: space-before-function-paren\nimport { combineHashCodes, compare, compareArrays, equalArrays, equals, identityHash, numberHash, structuralHash } from \"./Util\";\nfunction sameType(x, y) {\n    return y != null && Object.getPrototypeOf(x).constructor === Object.getPrototypeOf(y).constructor;\n}\n// Taken from Babel helpers\nfunction inherits(subClass, superClass) {\n    // if (typeof superClass !== \"function\" && superClass !== null) {\n    //   throw new TypeError(\n    //     \"Super expression must either be null or a function, not \" +\n    //       typeof superClass\n    //   );\n    // }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n        constructor: {\n            value: subClass,\n            enumerable: false,\n            writable: true,\n            configurable: true,\n        },\n    });\n    // if (superClass)\n    //   Object.setPrototypeOf\n    //     ? Object.setPrototypeOf(subClass, superClass)\n    //     : (subClass.__proto__ = superClass);\n}\nexport function declare(cons, superClass) {\n    inherits(cons, superClass || SystemObject);\n    return cons;\n}\nexport function SystemObject() {\n    return;\n}\nSystemObject.prototype.toString = function () {\n    return \"{\" + Object.keys(this).map((k) => k + \" = \" + String(this[k])).join(\";\\n \") + \"}\";\n};\nSystemObject.prototype.GetHashCode = function () {\n    return identityHash(this);\n};\nSystemObject.prototype.Equals = function (other) {\n    return this === other;\n};\nfunction compareList(self, other) {\n    if (self === other) {\n        return 0;\n    }\n    else {\n        if (other == null) {\n            return -1;\n        }\n        while (self.tail != null) {\n            if (other.tail == null) {\n                return 1;\n            }\n            const res = compare(self.head, other.head);\n            if (res !== 0) {\n                return res;\n            }\n            self = self.tail;\n            other = other.tail;\n        }\n        return other.tail == null ? 0 : -1;\n    }\n}\nexport class List {\n    constructor(head, tail) {\n        this.head = head;\n        this.tail = tail;\n    }\n    toString() {\n        return \"[\" + Array.from(this).join(\"; \") + \"]\";\n    }\n    toJSON() {\n        return Array.from(this);\n    }\n    [Symbol.iterator]() {\n        let cur = this;\n        return {\n            next: () => {\n                const value = cur === null || cur === void 0 ? void 0 : cur.head;\n                const done = (cur === null || cur === void 0 ? void 0 : cur.tail) == null;\n                cur = cur === null || cur === void 0 ? void 0 : cur.tail;\n                return { done, value };\n            },\n        };\n    }\n    GetHashCode() {\n        const hashes = Array.from(this).map(structuralHash);\n        return combineHashCodes(hashes);\n    }\n    Equals(other) {\n        return compareList(this, other) === 0;\n    }\n    CompareTo(other) {\n        return compareList(this, other);\n    }\n}\nexport function Union(tag, name, ...fields) {\n    this.tag = tag | 0;\n    this.name = name;\n    this.fields = fields;\n}\nUnion.prototype.toString = function () {\n    const len = this.fields.length;\n    if (len === 0) {\n        return this.name;\n    }\n    else if (len === 1) {\n        return this.name + \" \" + String(this.fields[0]);\n    }\n    else {\n        return this.name + \" (\" + this.fields.map((x) => String(x)).join(\",\") + \")\";\n    }\n};\nUnion.prototype.toJSON = function () {\n    return this.fields.length === 0\n        ? this.name\n        : [this.name].concat(this.fields);\n};\nUnion.prototype.GetHashCode = function () {\n    const hashes = this.fields.map((x) => structuralHash(x));\n    hashes.splice(0, 0, numberHash(this.tag));\n    return combineHashCodes(hashes);\n};\nUnion.prototype.Equals = function (other) {\n    return this === other\n        || (sameType(this, other)\n            && this.tag === other.tag\n            && equalArrays(this.fields, other.fields));\n};\nUnion.prototype.CompareTo = function (other) {\n    if (this === other) {\n        return 0;\n    }\n    else if (!sameType(this, other)) {\n        return -1;\n    }\n    else if (this.tag === other.tag) {\n        return compareArrays(this.fields, other.fields);\n    }\n    else {\n        return this.tag < other.tag ? -1 : 1;\n    }\n};\nfunction recordToJson(record, getFieldNames) {\n    const o = {};\n    const keys = getFieldNames == null ? Object.keys(record) : getFieldNames(record);\n    for (let i = 0; i < keys.length; i++) {\n        o[keys[i]] = record[keys[i]];\n    }\n    return o;\n}\nfunction recordEquals(self, other, getFieldNames) {\n    if (self === other) {\n        return true;\n    }\n    else if (!sameType(self, other)) {\n        return false;\n    }\n    else {\n        const thisNames = getFieldNames == null ? Object.keys(self) : getFieldNames(self);\n        for (let i = 0; i < thisNames.length; i++) {\n            if (!equals(self[thisNames[i]], other[thisNames[i]])) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\nfunction recordCompare(self, other, getFieldNames) {\n    if (self === other) {\n        return 0;\n    }\n    else if (!sameType(self, other)) {\n        return -1;\n    }\n    else {\n        const thisNames = getFieldNames == null ? Object.keys(self) : getFieldNames(self);\n        for (let i = 0; i < thisNames.length; i++) {\n            const result = compare(self[thisNames[i]], other[thisNames[i]]);\n            if (result !== 0) {\n                return result;\n            }\n        }\n        return 0;\n    }\n}\nexport function Record() {\n    return;\n}\nRecord.prototype.toString = function () {\n    return \"{\" + Object.keys(this).map((k) => k + \" = \" + String(this[k])).join(\";\\n \") + \"}\";\n};\nRecord.prototype.toJSON = function () {\n    return recordToJson(this);\n};\nRecord.prototype.GetHashCode = function () {\n    const hashes = Object.keys(this).map((k) => structuralHash(this[k]));\n    return combineHashCodes(hashes);\n};\nRecord.prototype.Equals = function (other) {\n    return recordEquals(this, other);\n};\nRecord.prototype.CompareTo = function (other) {\n    return recordCompare(this, other);\n};\nexport function anonRecord(o) {\n    return Object.assign(Object.create(Record.prototype), o);\n}\nexport const FSharpRef = declare(function FSharpRef(contents) {\n    this.contents = contents;\n}, Record);\nexport const Exception = declare(function Exception(message) {\n    this.stack = Error().stack;\n    this.message = message;\n}, SystemObject);\nexport function isException(x) {\n    return x instanceof Error || x instanceof Exception;\n}\nfunction getFSharpExceptionFieldNames(self) {\n    return Object.keys(self).filter((k) => k !== \"message\" && k !== \"stack\");\n}\nexport const FSharpException = declare(function FSharpException() {\n    Exception.call(this);\n}, Exception);\nFSharpException.prototype.toString = function () {\n    const fieldNames = getFSharpExceptionFieldNames(this);\n    const len = fieldNames.length;\n    if (len === 0) {\n        return this.message;\n    }\n    else if (len === 1) {\n        return this.message + \" \" + String(this[fieldNames[0]]);\n    }\n    else {\n        return this.message + \" (\" + fieldNames.map((k) => String(this[k])).join(\",\") + \")\";\n    }\n};\nFSharpException.prototype.toJSON = function () {\n    return recordToJson(this, getFSharpExceptionFieldNames);\n};\nFSharpException.prototype.GetHashCode = function () {\n    const hashes = getFSharpExceptionFieldNames(this).map((k) => structuralHash(this[k]));\n    return combineHashCodes(hashes);\n};\nFSharpException.prototype.Equals = function (other) {\n    return recordEquals(this, other, getFSharpExceptionFieldNames);\n};\nFSharpException.prototype.CompareTo = function (other) {\n    return recordCompare(this, other, getFSharpExceptionFieldNames);\n};\nexport const MatchFailureException = declare(function MatchFailureException(arg1, arg2, arg3) {\n    this.arg1 = arg1;\n    this.arg2 = arg2 | 0;\n    this.arg3 = arg3 | 0;\n    this.message = \"The match cases were incomplete\";\n}, FSharpException);\nexport const Attribute = declare(function Attribute() { return; }, SystemObject);\n//# sourceMappingURL=Types.js.map","import { anonRecord as makeAnonRecord, Record, Union } from \"./Types\";\nimport { compareArraysWith, equalArraysWith } from \"./Util\";\nexport class CaseInfo {\n    constructor(declaringType, tag, name, fields) {\n        this.declaringType = declaringType;\n        this.tag = tag;\n        this.name = name;\n        this.fields = fields;\n    }\n}\nexport class TypeInfo {\n    constructor(fullname, generics, constructor, fields, cases, enumCases) {\n        this.fullname = fullname;\n        this.generics = generics;\n        this.constructor = constructor;\n        this.fields = fields;\n        this.cases = cases;\n        this.enumCases = enumCases;\n    }\n    toString() {\n        return fullName(this);\n    }\n    Equals(other) {\n        return equals(this, other);\n    }\n    CompareTo(other) {\n        return compare(this, other);\n    }\n}\nexport function getGenerics(t) {\n    return t.generics != null ? t.generics : [];\n}\nexport function equals(t1, t2) {\n    if (t1.fullname === \"\") { // Anonymous records\n        return t2.fullname === \"\"\n            && equalArraysWith(getRecordElements(t1), getRecordElements(t2), ([k1, v1], [k2, v2]) => k1 === k2 && equals(v1, v2));\n    }\n    else {\n        return t1.fullname === t2.fullname\n            && equalArraysWith(getGenerics(t1), getGenerics(t2), equals);\n    }\n}\n// System.Type is not comparable in .NET, but let's implement this\n// in case users want to create a dictionary with types as keys\nexport function compare(t1, t2) {\n    if (t1.fullname !== t2.fullname) {\n        return t1.fullname < t2.fullname ? -1 : 1;\n    }\n    else {\n        return compareArraysWith(getGenerics(t1), getGenerics(t2), compare);\n    }\n}\nexport function type(fullname, generics) {\n    return new TypeInfo(fullname, generics);\n}\nexport function record(fullname, generics, constructor, fields) {\n    return new TypeInfo(fullname, generics, constructor, fields);\n}\nexport function anonRecord(...fields) {\n    return new TypeInfo(\"\", undefined, undefined, () => fields);\n}\nexport function union(fullname, generics, constructor, cases) {\n    const t = new TypeInfo(fullname, generics, constructor, undefined, () => cases().map((x, i) => typeof x === \"string\" ? new CaseInfo(t, i, x) : new CaseInfo(t, i, x[0], x[1])));\n    return t;\n}\nexport function tuple(...generics) {\n    return new TypeInfo(\"System.Tuple`\" + generics.length, generics);\n}\nexport function delegate(...generics) {\n    return new TypeInfo(\"System.Func`\" + generics.length, generics);\n}\nexport function lambda(argType, returnType) {\n    return new TypeInfo(\"Microsoft.FSharp.Core.FSharpFunc`2\", [argType, returnType]);\n}\nexport function option(generic) {\n    return new TypeInfo(\"Microsoft.FSharp.Core.FSharpOption`1\", [generic]);\n}\nexport function list(generic) {\n    return new TypeInfo(\"Microsoft.FSharp.Collections.FSharpList`1\", [generic]);\n}\nexport function array(generic) {\n    return new TypeInfo(generic.fullname + \"[]\", [generic]);\n}\nexport function enumType(fullname, underlyingType, enumCases) {\n    return new TypeInfo(fullname, [underlyingType], undefined, undefined, undefined, enumCases);\n}\nexport const obj = new TypeInfo(\"System.Object\");\nexport const unit = new TypeInfo(\"Microsoft.FSharp.Core.Unit\");\nexport const char = new TypeInfo(\"System.Char\");\nexport const string = new TypeInfo(\"System.String\");\nexport const bool = new TypeInfo(\"System.Boolean\");\nexport const int8 = new TypeInfo(\"System.SByte\");\nexport const uint8 = new TypeInfo(\"System.Byte\");\nexport const int16 = new TypeInfo(\"System.Int16\");\nexport const uint16 = new TypeInfo(\"System.UInt16\");\nexport const int32 = new TypeInfo(\"System.Int32\");\nexport const uint32 = new TypeInfo(\"System.UInt32\");\nexport const float32 = new TypeInfo(\"System.Single\");\nexport const float64 = new TypeInfo(\"System.Double\");\nexport const decimal = new TypeInfo(\"System.Decimal\");\nexport function name(info) {\n    if (Array.isArray(info)) {\n        return info[0];\n    }\n    else if (info instanceof CaseInfo) {\n        return info.name;\n    }\n    else {\n        const i = info.fullname.lastIndexOf(\".\");\n        return i === -1 ? info.fullname : info.fullname.substr(i + 1);\n    }\n}\nexport function fullName(t) {\n    const gen = t.generics != null && !isArray(t) ? t.generics : [];\n    if (gen.length > 0) {\n        return t.fullname + \"[\" + gen.map((x) => fullName(x)).join(\",\") + \"]\";\n    }\n    else {\n        return t.fullname;\n    }\n}\nexport function namespace(t) {\n    const i = t.fullname.lastIndexOf(\".\");\n    return i === -1 ? \"\" : t.fullname.substr(0, i);\n}\nexport function isArray(t) {\n    return t.fullname.endsWith(\"[]\");\n}\nexport function getElementType(t) {\n    var _a;\n    return isArray(t) ? (_a = t.generics) === null || _a === void 0 ? void 0 : _a[0] : undefined;\n}\nexport function isGenericType(t) {\n    return t.generics != null && t.generics.length > 0;\n}\nexport function isEnum(t) {\n    return t.enumCases != null && t.enumCases.length > 0;\n}\n/**\n * This doesn't replace types for fields (records) or cases (unions)\n * but it should be enough for type comparison purposes\n */\nexport function getGenericTypeDefinition(t) {\n    return t.generics == null ? t : new TypeInfo(t.fullname, t.generics.map(() => obj));\n}\nexport function getEnumUnderlyingType(t) {\n    var _a;\n    return (_a = t.generics) === null || _a === void 0 ? void 0 : _a[0];\n}\nexport function getEnumValues(t) {\n    if (isEnum(t) && t.enumCases != null) {\n        return t.enumCases.map((kv) => kv[1]);\n    }\n    else {\n        throw new Error(`${t.fullname} is not an enum type`);\n    }\n}\nexport function getEnumNames(t) {\n    if (isEnum(t) && t.enumCases != null) {\n        return t.enumCases.map((kv) => kv[0]);\n    }\n    else {\n        throw new Error(`${t.fullname} is not an enum type`);\n    }\n}\nfunction getEnumCase(t, v) {\n    if (t.enumCases != null) {\n        if (typeof v === \"string\") {\n            for (const kv of t.enumCases) {\n                if (kv[0] === v) {\n                    return kv;\n                }\n            }\n            throw new Error(`'${v}' was not found in ${t.fullname}`);\n        }\n        else {\n            for (const kv of t.enumCases) {\n                if (kv[1] === v) {\n                    return kv;\n                }\n            }\n            // .NET returns the number even if it doesn't match any of the cases\n            return [\"\", v];\n        }\n    }\n    else {\n        throw new Error(`${t.fullname} is not an enum type`);\n    }\n}\nexport function parseEnum(t, str) {\n    // TODO: better int parsing here, parseInt ceils floats: \"4.8\" -> 4\n    const value = parseInt(str, 10);\n    return getEnumCase(t, isNaN(value) ? str : value)[1];\n}\nexport function tryParseEnum(t, str) {\n    try {\n        const v = parseEnum(t, str);\n        return [true, v];\n    }\n    catch (_a) {\n        // supress error\n    }\n    return [false, NaN];\n}\nexport function getEnumName(t, v) {\n    return getEnumCase(t, v)[0];\n}\nexport function isEnumDefined(t, v) {\n    try {\n        const kv = getEnumCase(t, v);\n        return kv[0] != null && kv[0] !== \"\";\n    }\n    catch (_a) {\n        // supress error\n    }\n    return false;\n}\n// FSharpType\nexport function getUnionCases(t) {\n    if (t.cases != null) {\n        return t.cases();\n    }\n    else {\n        throw new Error(`${t.fullname} is not an F# union type`);\n    }\n}\nexport function getRecordElements(t) {\n    if (t.fields != null) {\n        return t.fields();\n    }\n    else {\n        throw new Error(`${t.fullname} is not an F# record type`);\n    }\n}\nexport function getTupleElements(t) {\n    if (isTuple(t) && t.generics != null) {\n        return t.generics;\n    }\n    else {\n        throw new Error(`${t.fullname} is not a tuple type`);\n    }\n}\nexport function getFunctionElements(t) {\n    if (isFunction(t) && t.generics != null) {\n        const gen = t.generics;\n        return [gen[0], gen[1]];\n    }\n    else {\n        throw new Error(`${t.fullname} is not an F# function type`);\n    }\n}\nexport function isUnion(t) {\n    return t instanceof TypeInfo ? t.cases != null : t instanceof Union;\n}\nexport function isRecord(t) {\n    return t instanceof TypeInfo ? t.fields != null : t instanceof Record;\n}\nexport function isTuple(t) {\n    return t.fullname.startsWith(\"System.Tuple\");\n}\n// In .NET this is false for delegates\nexport function isFunction(t) {\n    return t.fullname === \"Microsoft.FSharp.Core.FSharpFunc`2\";\n}\n// FSharpValue\nexport function getUnionFields(v, t) {\n    const cases = getUnionCases(t);\n    const case_ = cases[v.tag];\n    if (case_ == null) {\n        throw new Error(`Cannot find case ${v.name} in union type`);\n    }\n    return [case_, v.fields];\n}\nexport function getUnionCaseFields(uci) {\n    return uci.fields == null ? [] : uci.fields.map((t, i) => [\"Data\" + i, t]);\n}\nexport function getRecordFields(v) {\n    return Object.keys(v).map((k) => v[k]);\n}\nexport function getRecordField(v, field) {\n    return v[field[0]];\n}\nexport function getTupleFields(v) {\n    return v;\n}\nexport function getTupleField(v, i) {\n    return v[i];\n}\nexport function makeUnion(uci, values) {\n    const expectedLength = (uci.fields || []).length;\n    if (values.length !== expectedLength) {\n        throw new Error(`Expected an array of length ${expectedLength} but got ${values.length}`);\n    }\n    return uci.declaringType.constructor != null\n        ? new uci.declaringType.constructor(uci.tag, uci.name, ...values)\n        : {};\n}\nexport function makeRecord(t, values) {\n    const fields = getRecordElements(t);\n    if (fields.length !== values.length) {\n        throw new Error(`Expected an array of length ${fields.length} but got ${values.length}`);\n    }\n    return t.constructor != null\n        ? new t.constructor(...values)\n        : makeAnonRecord(fields.reduce((obj, [key, _t], i) => {\n            obj[key] = values[i];\n            return obj;\n        }, {}));\n}\nexport function makeTuple(values, _t) {\n    return values;\n}\n// Fable.Core.Reflection\nfunction assertUnion(x) {\n    if (!(x instanceof Union)) {\n        throw new Error(`Value is not an F# union type`);\n    }\n}\nexport function getCaseTag(x) {\n    assertUnion(x);\n    return x.tag;\n}\nexport function getCaseName(x) {\n    assertUnion(x);\n    return x.name;\n}\nexport function getCaseFields(x) {\n    assertUnion(x);\n    return x.fields;\n}\n//# sourceMappingURL=Reflection.js.map","import { declare, Union } from \"./Types\";\nimport { compare, equals, structuralHash } from \"./Util\";\n// Using a class here for better compatibility with TS files importing Some\nexport class Some {\n    constructor(value) {\n        this.value = value;\n    }\n    // Don't add \"Some\" for consistency with erased options\n    toString() {\n        return String(this.value);\n    }\n    toJSON() {\n        return this.value;\n    }\n    GetHashCode() {\n        return structuralHash(this.value);\n    }\n    Equals(other) {\n        if (other == null) {\n            return false;\n        }\n        else {\n            return equals(this.value, other instanceof Some ? other.value : other);\n        }\n    }\n    CompareTo(other) {\n        if (other == null) {\n            return 1;\n        }\n        else {\n            return compare(this.value, other instanceof Some ? other.value : other);\n        }\n    }\n}\nexport function some(x) {\n    return x == null || x instanceof Some ? new Some(x) : x;\n}\nexport function value(x) {\n    if (x == null) {\n        throw new Error(\"Option has no value\");\n    }\n    else {\n        return x instanceof Some ? x.value : x;\n    }\n}\nexport function tryValue(x) {\n    return x instanceof Some ? x.value : x;\n}\nexport function toArray(opt) {\n    return (opt == null) ? [] : [value(opt)];\n}\nexport function defaultArg(opt, defaultValue) {\n    return (opt != null) ? value(opt) : defaultValue;\n}\nexport function defaultArgWith(opt, defThunk) {\n    return (opt != null) ? value(opt) : defThunk();\n}\nexport function filter(predicate, opt) {\n    return (opt != null) ? (predicate(value(opt)) ? opt : null) : opt;\n}\nexport function map(mapping, opt) {\n    return (opt != null) ? some(mapping(value(opt))) : null;\n}\nexport function map2(mapping, opt1, opt2) {\n    return (opt1 != null && opt2 != null) ? mapping(value(opt1), value(opt2)) : null;\n}\nexport function map3(mapping, opt1, opt2, opt3) {\n    return (opt1 != null && opt2 != null && opt3 != null) ? mapping(value(opt1), value(opt2), value(opt3)) : null;\n}\nexport function bind(binder, opt) {\n    return opt != null ? binder(value(opt)) : null;\n}\nexport function tryOp(op, arg) {\n    try {\n        return some(op(arg));\n    }\n    catch (_a) {\n        return null;\n    }\n}\nexport const Choice = declare(function Choice(tag, name, field) {\n    Union.call(this, tag, name, field);\n}, Union);\nexport function choice1(x) {\n    return new Choice(0, \"Choice1Of2\", x);\n}\nexport function choice2(x) {\n    return new Choice(1, \"Choice2Of2\", x);\n}\nexport function tryValueIfChoice1(x) {\n    return x.tag === 0 ? some(x.fields[0]) : null;\n}\nexport function tryValueIfChoice2(x) {\n    return x.tag === 1 ? some(x.fields[0]) : null;\n}\nexport const Result = declare(function Result(tag, name, field) {\n    Union.call(this, tag, name, field);\n}, Union);\nexport function ok(x) {\n    return new Result(0, \"Ok\", x);\n}\nexport function error(x) {\n    return new Result(1, \"Error\", x);\n}\nexport function mapOk(f, result) {\n    return result.tag === 0 ? ok(f(result.fields[0])) : result;\n}\nexport function mapError(f, result) {\n    return result.tag === 1 ? error(f(result.fields[0])) : result;\n}\nexport function bindOk(f, result) {\n    return result.tag === 0 ? f(result.fields[0]) : result;\n}\n//# sourceMappingURL=Option.js.map","// https://github.com/MikeMcl/big.js/blob/01b3ce3a6b0ba7b42442ea48ec4ffc88d1669ec4/big.mjs\n/* tslint:disable */\nimport { combineHashCodes } from \"../Util\";\n// The shared prototype object.\nvar P = {\n    GetHashCode() { return combineHashCodes([this.s, this.e].concat(this.c)); },\n    Equals(x) { return !this.cmp(x); },\n    CompareTo(x) { return this.cmp(x); },\n};\n/*\n *  big.js v5.2.2\n *  A small, fast, easy-to-use library for arbitrary-precision decimal arithmetic.\n *  Copyright (c) 2018 Michael Mclaughlin <M8ch88l@gmail.com>\n *  https://github.com/MikeMcl/big.js/LICENCE\n */\n/************************************** EDITABLE DEFAULTS *****************************************/\n// The default values below must be integers within the stated ranges.\n/*\n * The maximum number of decimal places (DP) of the results of operations involving division:\n * div and sqrt, and pow with negative exponents.\n */\nvar DP = 28, // 0 to MAX_DP\n/*\n * The rounding mode (RM) used when rounding to the above decimal places.\n *\n *  0  Towards zero (i.e. truncate, no rounding).       (ROUND_DOWN)\n *  1  To nearest neighbour. If equidistant, round up.  (ROUND_HALF_UP)\n *  2  To nearest neighbour. If equidistant, to even.   (ROUND_HALF_EVEN)\n *  3  Away from zero.                                  (ROUND_UP)\n */\nRM = 1, // 0, 1, 2 or 3\n// The maximum value of DP and Big.DP.\nMAX_DP = 1E6, // 0 to 1000000\n// The maximum magnitude of the exponent argument to the pow method.\nMAX_POWER = 1E6, // 1 to 1000000\n/*\n * The negative exponent (NE) at and beneath which toString returns exponential notation.\n * (JavaScript numbers: -7)\n * -1000000 is the minimum recommended exponent value of a Big.\n */\nNE = -29, // 0 to -1000000\n/*\n * The positive exponent (PE) at and above which toString returns exponential notation.\n * (JavaScript numbers: 21)\n * 1000000 is the maximum recommended exponent value of a Big.\n * (This limit is not enforced or checked.)\n */\nPE = 29, // 0 to 1000000\n/**************************************************************************************************/\n// Error messages.\nNAME = '[big.js] ', INVALID = NAME + 'Invalid ', INVALID_DP = INVALID + 'decimal places', INVALID_RM = INVALID + 'rounding mode', DIV_BY_ZERO = NAME + 'Division by zero', UNDEFINED = void 0, NUMERIC = /^-?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i;\n/*\n * Create and return a Big constructor.\n *\n */\nfunction _Big_() {\n    /*\n     * The Big constructor and exported function.\n     * Create and return a new instance of a Big number object.\n     *\n     * n {number|string|Big} A numeric value.\n     */\n    function Big(n) {\n        var x = this;\n        // Enable constructor usage without new.\n        if (!(x instanceof Big))\n            return n === UNDEFINED ? _Big_() : new Big(n);\n        // Duplicate.\n        if (n instanceof Big) {\n            x.s = n.s;\n            x.e = n.e;\n            x.c = n.c.slice();\n            normalize(x);\n        }\n        else {\n            parse(x, n);\n        }\n        /*\n         * Retain a reference to this Big constructor, and shadow Big.prototype.constructor which\n         * points to Object.\n         */\n        x.constructor = Big;\n    }\n    Big.prototype = P;\n    Big.DP = DP;\n    Big.RM = RM;\n    Big.NE = NE;\n    Big.PE = PE;\n    Big.version = '5.2.2';\n    return Big;\n}\nfunction normalize(x) {\n    x = round(x, DP, 0);\n    if (x.c.length > 1 && !x.c[0]) {\n        let i = x.c.findIndex(x => x);\n        x.c = x.c.slice(i);\n        x.e = x.e - i;\n    }\n}\n/*\n * Parse the number or string value passed to a Big constructor.\n *\n * x {Big} A Big number instance.\n * n {number|string} A numeric value.\n */\nfunction parse(x, n) {\n    var e, i, nl;\n    // Minus zero?\n    if (n === 0 && 1 / n < 0)\n        n = '-0';\n    else if (!NUMERIC.test(n += ''))\n        throw Error(INVALID + 'number');\n    // Determine sign.\n    x.s = n.charAt(0) == '-' ? (n = n.slice(1), -1) : 1;\n    // Decimal point?\n    if ((e = n.indexOf('.')) > -1)\n        n = n.replace('.', '');\n    // Exponential form?\n    if ((i = n.search(/e/i)) > 0) {\n        // Determine exponent.\n        if (e < 0)\n            e = i;\n        e += +n.slice(i + 1);\n        n = n.substring(0, i);\n    }\n    else if (e < 0) {\n        // Integer.\n        e = n.length;\n    }\n    nl = n.length;\n    // Determine leading zeros before decimal point.\n    for (i = 0; i < e && i < nl && n.charAt(i) == '0';)\n        ++i;\n    // older version (ignores decimal point).\n    // // Determine leading zeros.\n    // for (i = 0; i < nl && n.charAt(i) == '0';) ++i;\n    if (i == nl) {\n        // Zero.\n        x.c = [x.e = 0];\n    }\n    else {\n        x.e = e - i - 1;\n        x.c = [];\n        // Convert string to array of digits without leading zeros\n        for (e = 0; i < nl;)\n            x.c[e++] = +n.charAt(i++);\n        // older version (doesn't keep trailing zeroes).\n        // // Determine trailing zeros.\n        // for (; nl > 0 && n.charAt(--nl) == '0';);\n        // // Convert string to array of digits without leading/trailing zeros.\n        // for (e = 0; i <= nl;) x.c[e++] = +n.charAt(i++);\n    }\n    x = round(x, Big.DP, Big.RM);\n    return x;\n}\n/*\n * Round Big x to a maximum of dp decimal places using rounding mode rm.\n * Called by stringify, P.div, P.round and P.sqrt.\n *\n * x {Big} The Big to round.\n * dp {number} Integer, 0 to MAX_DP inclusive.\n * rm {number} 0, 1, 2 or 3 (DOWN, HALF_UP, HALF_EVEN, UP)\n * [more] {boolean} Whether the result of division was truncated.\n */\nfunction round(x, dp, rm, more) {\n    var xc = x.c, i = x.e + dp + 1;\n    if (i < xc.length) {\n        if (rm === 1) {\n            // xc[i] is the digit after the digit that may be rounded up.\n            more = xc[i] >= 5;\n        }\n        else if (rm === 2) {\n            more = xc[i] > 5 || xc[i] == 5 &&\n                (more || i < 0 || xc[i + 1] !== UNDEFINED || xc[i - 1] & 1);\n        }\n        else if (rm === 3) {\n            more = more || !!xc[0];\n        }\n        else {\n            more = false;\n            if (rm !== 0)\n                throw Error(INVALID_RM);\n        }\n        if (i < 1) {\n            xc.length = 1;\n            if (more) {\n                // 1, 0.1, 0.01, 0.001, 0.0001 etc.\n                x.e = -dp;\n                xc[0] = 1;\n            }\n            else {\n                // Zero.\n                xc[0] = x.e = 0;\n            }\n        }\n        else {\n            // Remove any digits after the required decimal places.\n            xc.length = i--;\n            // Round up?\n            if (more) {\n                // Rounding up may mean the previous digit has to be rounded up.\n                for (; ++xc[i] > 9;) {\n                    xc[i] = 0;\n                    if (!i--) {\n                        ++x.e;\n                        xc.unshift(1);\n                    }\n                }\n            }\n            // Remove trailing zeros.\n            for (i = xc.length; !xc[--i];)\n                xc.pop();\n        }\n    }\n    else if (rm < 0 || rm > 3 || rm !== ~~rm) {\n        throw Error(INVALID_RM);\n    }\n    return x;\n}\n/*\n * Return a string representing the value of Big x in normal or exponential notation.\n * Handles P.toExponential, P.toFixed, P.toJSON, P.toPrecision, P.toString and P.valueOf.\n *\n * x {Big}\n * id? {number} Caller id.\n *         1 toExponential\n *         2 toFixed\n *         3 toPrecision\n *         4 valueOf\n * n? {number|undefined} Caller's argument.\n * k? {number|undefined}\n */\nfunction stringify(x, id, n, k) {\n    var e, s, Big = x.constructor, z = !x.c[0];\n    if (n !== UNDEFINED) {\n        if (n !== ~~n || n < (id == 3) || n > MAX_DP) {\n            throw Error(id == 3 ? INVALID + 'precision' : INVALID_DP);\n        }\n        x = new Big(x);\n        // The index of the digit that may be rounded up.\n        n = k - x.e;\n        // Round?\n        if (x.c.length > ++k)\n            round(x, n, Big.RM);\n        // toFixed: recalculate k as x.e may have changed if value rounded up.\n        if (id == 2)\n            k = x.e + n + 1;\n        // Append zeros?\n        for (; x.c.length < k;)\n            x.c.push(0);\n    }\n    e = x.e;\n    s = x.c.join('');\n    n = s.length;\n    // Exponential notation?\n    if (id != 2 && (id == 1 || id == 3 && k <= e || e <= Big.NE || e >= Big.PE)) {\n        s = s.charAt(0) + (n > 1 ? '.' + s.slice(1) : '') + (e < 0 ? 'e' : 'e+') + e;\n        // Normal notation.\n    }\n    else if (e < 0) {\n        for (; ++e;)\n            s = '0' + s;\n        s = '0.' + s;\n    }\n    else if (e > 0) {\n        if (++e > n)\n            for (e -= n; e--;)\n                s += '0';\n        else if (e < n)\n            s = s.slice(0, e) + '.' + s.slice(e);\n    }\n    else if (n > 1) {\n        s = s.charAt(0) + '.' + s.slice(1);\n    }\n    return x.s < 0 && (!z || id == 4) ? '-' + s : s;\n}\n// Prototype/instance methods\n/*\n * Return a new Big whose value is the absolute value of this Big.\n */\nP.abs = function () {\n    var x = new this.constructor(this);\n    x.s = 1;\n    return x;\n};\n/*\n * Return 1 if the value of this Big is greater than the value of Big y,\n *       -1 if the value of this Big is less than the value of Big y, or\n *        0 if they have the same value.\n*/\nP.cmp = function (y) {\n    var isneg, Big = this.constructor, x = new Big(this), y = new Big(y), xc = x.c, yc = y.c, i = x.s, j = y.s, k = x.e, l = y.e;\n    // Either zero?\n    if (!xc[0] || !yc[0])\n        return !xc[0] ? !yc[0] ? 0 : -j : i;\n    // Signs differ?\n    if (i != j)\n        return i;\n    isneg = i < 0;\n    // Compare exponents.\n    if (k != l)\n        return k > l ^ isneg ? 1 : -1;\n    // Compare digit by digit.\n    j = Math.max(xc.length, yc.length);\n    for (i = 0; i < j; i++) {\n        k = i < xc.length ? xc[i] : 0;\n        l = i < yc.length ? yc[i] : 0;\n        if (k != l)\n            return k > l ^ isneg ? 1 : -1;\n    }\n    return 0;\n    // old version (doesn't compare well trailing zeroes, e.g. 1.0 with 1.00)\n    // j = (k = xc.length) < (l = yc.length) ? k : l;\n    // // Compare digit by digit.\n    // for (i = -1; ++i < j;) {\n    //   if (xc[i] != yc[i]) return xc[i] > yc[i] ^ isneg ? 1 : -1;\n    // }\n    // // Compare lengths.\n    // return k == l ? 0 : k > l ^ isneg ? 1 : -1;\n};\n/*\n * Return a new Big whose value is the value of this Big divided by the value of Big y, rounded,\n * if necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.\n */\nP.div = function (y) {\n    var Big = this.constructor, x = new Big(this), y = new Big(y), a = x.c, // dividend\n    b = y.c, // divisor\n    k = x.s == y.s ? 1 : -1, dp = Big.DP;\n    if (dp !== ~~dp || dp < 0 || dp > MAX_DP)\n        throw Error(INVALID_DP);\n    // Divisor is zero?\n    if (!b[0])\n        throw Error(DIV_BY_ZERO);\n    // Dividend is 0? Return +-0.\n    if (!a[0])\n        return new Big(k * 0);\n    var bl, bt, n, cmp, ri, bz = b.slice(), ai = bl = b.length, al = a.length, r = a.slice(0, bl), // remainder\n    rl = r.length, q = y, // quotient\n    qc = q.c = [], qi = 0, d = dp + (q.e = x.e - y.e) + 1; // number of digits of the result\n    q.s = k;\n    k = d < 0 ? 0 : d;\n    // Create version of divisor with leading zero.\n    bz.unshift(0);\n    // Add zeros to make remainder as long as divisor.\n    for (; rl++ < bl;)\n        r.push(0);\n    do {\n        // n is how many times the divisor goes into current remainder.\n        for (n = 0; n < 10; n++) {\n            // Compare divisor and remainder.\n            if (bl != (rl = r.length)) {\n                cmp = bl > rl ? 1 : -1;\n            }\n            else {\n                for (ri = -1, cmp = 0; ++ri < bl;) {\n                    if (b[ri] != r[ri]) {\n                        cmp = b[ri] > r[ri] ? 1 : -1;\n                        break;\n                    }\n                }\n            }\n            // If divisor < remainder, subtract divisor from remainder.\n            if (cmp < 0) {\n                // Remainder can't be more than 1 digit longer than divisor.\n                // Equalise lengths using divisor with extra leading zero?\n                for (bt = rl == bl ? b : bz; rl;) {\n                    if (r[--rl] < bt[rl]) {\n                        ri = rl;\n                        for (; ri && !r[--ri];)\n                            r[ri] = 9;\n                        --r[ri];\n                        r[rl] += 10;\n                    }\n                    r[rl] -= bt[rl];\n                }\n                for (; !r[0];)\n                    r.shift();\n            }\n            else {\n                break;\n            }\n        }\n        // Add the digit n to the result array.\n        qc[qi++] = cmp ? n : ++n;\n        // Update the remainder.\n        if (r[0] && cmp)\n            r[rl] = a[ai] || 0;\n        else\n            r = [a[ai]];\n    } while ((ai++ < al || r[0] !== UNDEFINED) && k--);\n    // Leading zero? Do not remove if result is simply zero (qi == 1).\n    if (!qc[0] && qi != 1) {\n        // There can't be more than one zero.\n        qc.shift();\n        q.e--;\n    }\n    // Round?\n    if (qi > d)\n        round(q, dp, Big.RM, r[0] !== UNDEFINED);\n    return q;\n};\n/*\n * Return true if the value of this Big is equal to the value of Big y, otherwise return false.\n */\nP.eq = function (y) {\n    return !this.cmp(y);\n};\n/*\n * Return true if the value of this Big is greater than the value of Big y, otherwise return\n * false.\n */\nP.gt = function (y) {\n    return this.cmp(y) > 0;\n};\n/*\n * Return true if the value of this Big is greater than or equal to the value of Big y, otherwise\n * return false.\n */\nP.gte = function (y) {\n    return this.cmp(y) > -1;\n};\n/*\n * Return true if the value of this Big is less than the value of Big y, otherwise return false.\n */\nP.lt = function (y) {\n    return this.cmp(y) < 0;\n};\n/*\n * Return true if the value of this Big is less than or equal to the value of Big y, otherwise\n * return false.\n */\nP.lte = function (y) {\n    return this.cmp(y) < 1;\n};\n/*\n * Return a new Big whose value is the value of this Big minus the value of Big y.\n */\nP.minus = P.sub = function (y) {\n    var i, j, t, xlty, Big = this.constructor, x = new Big(this), y = new Big(y), a = x.s, b = y.s;\n    // Signs differ?\n    if (a != b) {\n        y.s = -b;\n        return x.plus(y);\n    }\n    var xc = x.c.slice(), xe = x.e, yc = y.c, ye = y.e;\n    // Either zero?\n    if (!xc[0] || !yc[0]) {\n        // y is non-zero? x is non-zero? Or both are zero.\n        return yc[0] ? (y.s = -b, y) : new Big(xc[0] ? x : 0);\n    }\n    // Determine which is the bigger number. Prepend zeros to equalise exponents.\n    if (a = xe - ye) {\n        if (xlty = a < 0) {\n            a = -a;\n            t = xc;\n        }\n        else {\n            ye = xe;\n            t = yc;\n        }\n        t.reverse();\n        for (b = a; b--;)\n            t.push(0);\n        t.reverse();\n    }\n    else {\n        // Exponents equal. Check digit by digit.\n        j = ((xlty = xc.length < yc.length) ? xc : yc).length;\n        for (a = b = 0; b < j; b++) {\n            if (xc[b] != yc[b]) {\n                xlty = xc[b] < yc[b];\n                break;\n            }\n        }\n    }\n    // x < y? Point xc to the array of the bigger number.\n    if (xlty) {\n        t = xc;\n        xc = yc;\n        yc = t;\n        y.s = -y.s;\n    }\n    /*\n     * Append zeros to xc if shorter. No need to add zeros to yc if shorter as subtraction only\n     * needs to start at yc.length.\n     */\n    if ((b = (j = yc.length) - (i = xc.length)) > 0)\n        for (; b--;)\n            xc[i++] = 0;\n    // Subtract yc from xc.\n    for (b = i; j > a;) {\n        if (xc[--j] < yc[j]) {\n            for (i = j; i && !xc[--i];)\n                xc[i] = 9;\n            --xc[i];\n            xc[j] += 10;\n        }\n        xc[j] -= yc[j];\n    }\n    // Remove trailing zeros.\n    for (; xc[--b] === 0;)\n        xc.pop();\n    // Remove leading zeros and adjust exponent accordingly.\n    for (; xc[0] === 0;) {\n        xc.shift();\n        --ye;\n    }\n    if (!xc[0]) {\n        // n - n = +0\n        y.s = 1;\n        // Result must be zero.\n        xc = [ye = 0];\n    }\n    y.c = xc;\n    y.e = ye;\n    return y;\n};\n/*\n * Return a new Big whose value is the value of this Big modulo the value of Big y.\n */\nP.mod = function (y) {\n    var ygtx, Big = this.constructor, x = new Big(this), y = new Big(y), a = x.s, b = y.s;\n    if (!y.c[0])\n        throw Error(DIV_BY_ZERO);\n    x.s = y.s = 1;\n    ygtx = y.cmp(x) == 1;\n    x.s = a;\n    y.s = b;\n    if (ygtx)\n        return new Big(x);\n    a = Big.DP;\n    b = Big.RM;\n    Big.DP = Big.RM = 0;\n    x = x.div(y);\n    Big.DP = a;\n    Big.RM = b;\n    return this.minus(x.times(y));\n};\n/*\n * Return a new Big whose value is the value of this Big plus the value of Big y.\n */\nP.plus = P.add = function (y) {\n    var t, Big = this.constructor, x = new Big(this), y = new Big(y), a = x.s, b = y.s;\n    // Signs differ?\n    if (a != b) {\n        y.s = -b;\n        return x.minus(y);\n    }\n    var xe = x.e, xc = x.c, ye = y.e, yc = y.c;\n    // Either zero? y is non-zero? x is non-zero? Or both are zero.\n    if (!xc[0] || !yc[0])\n        return yc[0] ? y : new Big(xc[0] ? x : a * 0);\n    xc = xc.slice();\n    // Prepend zeros to equalise exponents.\n    // Note: reverse faster than unshifts.\n    if (a = xe - ye) {\n        if (a > 0) {\n            ye = xe;\n            t = yc;\n        }\n        else {\n            a = -a;\n            t = xc;\n        }\n        t.reverse();\n        for (; a--;)\n            t.push(0);\n        t.reverse();\n    }\n    // Point xc to the longer array.\n    if (xc.length - yc.length < 0) {\n        t = yc;\n        yc = xc;\n        xc = t;\n    }\n    a = yc.length;\n    // Only start adding at yc.length - 1 as the further digits of xc can be left as they are.\n    for (b = 0; a; xc[a] %= 10)\n        b = (xc[--a] = xc[a] + yc[a] + b) / 10 | 0;\n    // No need to check for zero, as +x + +y != 0 && -x + -y != 0\n    if (b) {\n        xc.unshift(b);\n        ++ye;\n    }\n    // Remove trailing zeros.\n    for (a = xc.length; xc[--a] === 0;)\n        xc.pop();\n    y.c = xc;\n    y.e = ye;\n    return y;\n};\n/*\n * Return a Big whose value is the value of this Big raised to the power n.\n * If n is negative, round to a maximum of Big.DP decimal places using rounding\n * mode Big.RM.\n *\n * n {number} Integer, -MAX_POWER to MAX_POWER inclusive.\n */\nP.pow = function (n) {\n    var Big = this.constructor, x = new Big(this), y = new Big(1), one = new Big(1), isneg = n < 0;\n    if (n !== ~~n || n < -MAX_POWER || n > MAX_POWER)\n        throw Error(INVALID + 'exponent');\n    if (isneg)\n        n = -n;\n    for (;;) {\n        if (n & 1)\n            y = y.times(x);\n        n >>= 1;\n        if (!n)\n            break;\n        x = x.times(x);\n    }\n    return isneg ? one.div(y) : y;\n};\n/*\n * Return a new Big whose value is the value of this Big rounded using rounding mode rm\n * to a maximum of dp decimal places, or, if dp is negative, to an integer which is a\n * multiple of 10**-dp.\n * If dp is not specified, round to 0 decimal places.\n * If rm is not specified, use Big.RM.\n *\n * dp? {number} Integer, -MAX_DP to MAX_DP inclusive.\n * rm? 0, 1, 2 or 3 (ROUND_DOWN, ROUND_HALF_UP, ROUND_HALF_EVEN, ROUND_UP)\n */\nP.round = function (dp, rm) {\n    var Big = this.constructor;\n    if (dp === UNDEFINED)\n        dp = 0;\n    else if (dp !== ~~dp || dp < -MAX_DP || dp > MAX_DP)\n        throw Error(INVALID_DP);\n    return round(new Big(this), dp, rm === UNDEFINED ? Big.RM : rm);\n};\n/*\n * Return a new Big whose value is the square root of the value of this Big, rounded, if\n * necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.\n */\nP.sqrt = function () {\n    var r, c, t, Big = this.constructor, x = new Big(this), s = x.s, e = x.e, half = new Big(0.5);\n    // Zero?\n    if (!x.c[0])\n        return new Big(x);\n    // Negative?\n    if (s < 0)\n        throw Error(NAME + 'No square root');\n    // Estimate.\n    s = Math.sqrt(x + '');\n    // Math.sqrt underflow/overflow?\n    // Re-estimate: pass x coefficient to Math.sqrt as integer, then adjust the result exponent.\n    if (s === 0 || s === 1 / 0) {\n        c = x.c.join('');\n        if (!(c.length + e & 1))\n            c += '0';\n        s = Math.sqrt(c);\n        e = ((e + 1) / 2 | 0) - (e < 0 || e & 1);\n        r = new Big((s == 1 / 0 ? '1e' : (s = s.toExponential()).slice(0, s.indexOf('e') + 1)) + e);\n    }\n    else {\n        r = new Big(s);\n    }\n    e = r.e + (Big.DP += 4);\n    // Newton-Raphson iteration.\n    do {\n        t = r;\n        r = half.times(t.plus(x.div(t)));\n    } while (t.c.slice(0, e).join('') !== r.c.slice(0, e).join(''));\n    return round(r, Big.DP -= 4, Big.RM);\n};\n/*\n * Return a new Big whose value is the value of this Big times the value of Big y.\n */\nP.times = P.mul = function (y) {\n    var c, Big = this.constructor, x = new Big(this), y = new Big(y), xc = x.c, yc = y.c, a = xc.length, b = yc.length, i = x.e, j = y.e;\n    // Determine sign of result.\n    y.s = x.s == y.s ? 1 : -1;\n    // Return signed 0 if either 0.\n    if (!xc[0] || !yc[0])\n        return new Big(y.s * 0);\n    // Initialise exponent of result as x.e + y.e.\n    y.e = i + j;\n    // If array xc has fewer digits than yc, swap xc and yc, and lengths.\n    if (a < b) {\n        c = xc;\n        xc = yc;\n        yc = c;\n        j = a;\n        a = b;\n        b = j;\n    }\n    // Initialise coefficient array of result with zeros.\n    for (c = new Array(j = a + b); j--;)\n        c[j] = 0;\n    // Multiply.\n    // i is initially xc.length.\n    for (i = b; i--;) {\n        b = 0;\n        // a is yc.length.\n        for (j = a + i; j > i;) {\n            // Current sum of products at this digit position, plus carry.\n            b = c[j] + yc[i] * xc[j - i - 1] + b;\n            c[j--] = b % 10;\n            // carry\n            b = b / 10 | 0;\n        }\n        c[j] = (c[j] + b) % 10;\n    }\n    // Increment result exponent if there is a final carry, otherwise remove leading zero.\n    if (b)\n        ++y.e;\n    else\n        c.shift();\n    // Remove trailing zeros.\n    for (i = c.length; !c[--i];)\n        c.pop();\n    y.c = c;\n    return y;\n};\n/*\n * Return a string representing the value of this Big in exponential notation to dp fixed decimal\n * places and rounded using Big.RM.\n *\n * dp? {number} Integer, 0 to MAX_DP inclusive.\n */\nP.toExponential = function (dp) {\n    return stringify(this, 1, dp, dp);\n};\n/*\n * Return a string representing the value of this Big in normal notation to dp fixed decimal\n * places and rounded using Big.RM.\n *\n * dp? {number} Integer, 0 to MAX_DP inclusive.\n *\n * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.\n * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\n */\nP.toFixed = function (dp) {\n    return stringify(this, 2, dp, this.e + dp);\n};\n/*\n * Return a string representing the value of this Big rounded to sd significant digits using\n * Big.RM. Use exponential notation if sd is less than the number of digits necessary to represent\n * the integer part of the value in normal notation.\n *\n * sd {number} Integer, 1 to MAX_DP inclusive.\n */\nP.toPrecision = function (sd) {\n    return stringify(this, 3, sd, sd - 1);\n};\n/*\n * Return a string representing the value of this Big.\n * Return exponential notation if this Big has a positive exponent equal to or greater than\n * Big.PE, or a negative exponent equal to or less than Big.NE.\n * Omit the sign for negative zero.\n */\nP.toString = function () {\n    return stringify(this);\n};\n/*\n * Return a string representing the value of this Big.\n * Return exponential notation if this Big has a positive exponent equal to or greater than\n * Big.PE, or a negative exponent equal to or less than Big.NE.\n * Include the sign for negative zero.\n */\nP.valueOf = P.toJSON = function () {\n    return stringify(this, 4);\n};\n// Export\nexport var Big = _Big_();\nexport default Big;\n//# sourceMappingURL=big.js.map","import Decimal from \"./lib/big\";\nexport default Decimal;\nexport const get_Zero = new Decimal(0);\nexport const get_One = new Decimal(1);\nexport const get_MinusOne = new Decimal(-1);\nexport const get_MaxValue = new Decimal(\"79228162514264337593543950335\");\nexport const get_MinValue = new Decimal(\"-79228162514264337593543950335\");\nexport function compare(x, y) {\n    return x.cmp(y);\n}\nexport function equals(x, y) {\n    return !x.cmp(y);\n}\nexport function abs(x) {\n    return x.abs();\n}\nexport function round(x, digits = 0) {\n    return x.round(digits, 2 /* ROUND_HALF_EVEN */);\n}\nexport function truncate(x) {\n    return x.round(0, 0 /* ROUND_DOWN */);\n}\nexport function ceiling(x) {\n    return x.round(0, x.cmp(0) >= 0 ? 3 /* ROUND_UP */ : 0 /* ROUND_DOWN */);\n}\nexport function floor(x) {\n    return x.round(0, x.cmp(0) >= 0 ? 0 /* ROUND_DOWN */ : 3 /* ROUND_UP */);\n}\nexport function pow(x, n) {\n    return x.pow(n);\n}\nexport function sqrt(x) {\n    return x.sqrt();\n}\nexport function op_Addition(x, y) {\n    return x.add(y);\n}\nexport function op_Subtraction(x, y) {\n    return x.sub(y);\n}\nexport function op_Multiply(x, y) {\n    return x.mul(y);\n}\nexport function op_Division(x, y) {\n    return x.div(y);\n}\nexport function op_Modulus(x, y) {\n    return x.mod(y);\n}\nexport function op_UnaryNegation(x) {\n    const x2 = new Decimal(x);\n    x2.s = -x2.s || 0;\n    return x2;\n}\nexport const add = op_Addition;\nexport const subtract = op_Subtraction;\nexport const multiply = op_Multiply;\nexport const divide = op_Division;\nexport const remainder = op_Modulus;\nexport const negate = op_UnaryNegation;\nexport function toString(x) {\n    return x.toString();\n}\nexport function tryParse(str) {\n    try {\n        return [true, new Decimal(str.trim())];\n    }\n    catch (_a) {\n        return [false, get_Zero];\n    }\n}\nexport function parse(str) {\n    const [ok, value] = tryParse(str);\n    if (ok) {\n        return value;\n    }\n    else {\n        throw new Error(\"Input string was not in a correct format.\");\n    }\n}\nexport function toNumber(x) {\n    return +x;\n}\nfunction decimalToHex(dec, bitSize) {\n    const hex = new Uint8Array(bitSize / 4 | 0);\n    let hexCount = 1;\n    for (let d = 0; d < dec.length; d++) {\n        let value = dec[d];\n        for (let i = 0; i < hexCount; i++) {\n            const digit = hex[i] * 10 + value | 0;\n            hex[i] = digit & 0xF;\n            value = digit >> 4;\n        }\n        if (value !== 0) {\n            hex[hexCount++] = value;\n        }\n    }\n    return hex.slice(0, hexCount); // digits in reverse order\n}\nfunction hexToDecimal(hex, bitSize) {\n    const dec = new Uint8Array(bitSize * 301 / 1000 + 1 | 0);\n    let decCount = 1;\n    for (let d = hex.length - 1; d >= 0; d--) {\n        let carry = hex[d];\n        for (let i = 0; i < decCount; i++) {\n            const val = dec[i] * 16 + carry | 0;\n            dec[i] = (val % 10) | 0;\n            carry = (val / 10) | 0;\n        }\n        while (carry > 0) {\n            dec[decCount++] = (carry % 10) | 0;\n            carry = (carry / 10) | 0;\n        }\n    }\n    return dec.slice(0, decCount); // digits in reverse order\n}\nfunction setInt32Bits(hexDigits, bits, offset) {\n    for (let i = 0; i < 8; i++) {\n        hexDigits[offset + i] = (bits >> (i * 4)) & 0xF;\n    }\n}\nfunction getInt32Bits(hexDigits, offset) {\n    let bits = 0;\n    for (let i = 0; i < 8; i++) {\n        bits = bits | (hexDigits[offset + i] << (i * 4));\n    }\n    return bits;\n}\nexport function fromIntArray(bits) {\n    return fromInts(bits[0], bits[1], bits[2], bits[3]);\n}\nexport function fromInts(low, mid, high, signExp) {\n    const isNegative = signExp < 0;\n    const scale = (signExp >> 16) & 0x7F;\n    return fromParts(low, mid, high, isNegative, scale);\n}\nexport function fromParts(low, mid, high, isNegative, scale) {\n    const bitSize = 96;\n    const hexDigits = new Uint8Array(bitSize / 4);\n    setInt32Bits(hexDigits, low, 0);\n    setInt32Bits(hexDigits, mid, 8);\n    setInt32Bits(hexDigits, high, 16);\n    const decDigits = hexToDecimal(hexDigits, bitSize);\n    scale = scale & 0x7F;\n    const big = new Decimal(0);\n    big.c = Array.from(decDigits.reverse());\n    big.e = decDigits.length - scale - 1;\n    big.s = isNegative ? -1 : 1;\n    const d = new Decimal(big);\n    return d;\n}\nexport function getBits(d) {\n    const bitSize = 96;\n    const decDigits = Uint8Array.from(d.c);\n    const hexDigits = decimalToHex(decDigits, bitSize);\n    const low = getInt32Bits(hexDigits, 0);\n    const mid = getInt32Bits(hexDigits, 8);\n    const high = getInt32Bits(hexDigits, 16);\n    const decStr = d.toString();\n    const dotPos = decStr.indexOf(\".\");\n    const scale = dotPos < 0 ? 0 : decStr.length - dotPos - 1;\n    const signExp = ((scale & 0x7F) << 16) | (d.s < 0 ? 0x80000000 : 0);\n    return [low, mid, high, signExp];\n}\nexport function makeRangeStepFunction(step, last) {\n    const stepComparedWithZero = step.cmp(get_Zero);\n    if (stepComparedWithZero === 0) {\n        throw new Error(\"The step of a range cannot be zero\");\n    }\n    const stepGreaterThanZero = stepComparedWithZero > 0;\n    return (x) => {\n        const comparedWithLast = x.cmp(last);\n        if ((stepGreaterThanZero && comparedWithLast <= 0)\n            || (!stepGreaterThanZero && comparedWithLast >= 0)) {\n            return [x, op_Addition(x, step)];\n        }\n        else {\n            return null;\n        }\n    };\n}\n//# sourceMappingURL=Decimal.js.map","// export type decimal = Decimal;\nexport var NumberStyles;\n(function (NumberStyles) {\n    // None = 0x00000000,\n    // AllowLeadingWhite = 0x00000001,\n    // AllowTrailingWhite = 0x00000002,\n    // AllowLeadingSign = 0x00000004,\n    // AllowTrailingSign = 0x00000008,\n    // AllowParentheses = 0x00000010,\n    // AllowDecimalPoint = 0x00000020,\n    // AllowThousands = 0x00000040,\n    // AllowExponent = 0x00000080,\n    // AllowCurrencySymbol = 0x00000100,\n    NumberStyles[NumberStyles[\"AllowHexSpecifier\"] = 512] = \"AllowHexSpecifier\";\n    // Integer = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign,\n    // HexNumber = AllowLeadingWhite | AllowTrailingWhite | AllowHexSpecifier,\n    // Number = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign |\n    //          AllowTrailingSign | AllowDecimalPoint | AllowThousands,\n    // Float = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign |\n    //         AllowDecimalPoint | AllowExponent,\n    // Currency = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign | AllowTrailingSign |\n    //            AllowParentheses | AllowDecimalPoint | AllowThousands | AllowCurrencySymbol,\n    // Any = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign | AllowTrailingSign |\n    //       AllowParentheses | AllowDecimalPoint | AllowThousands | AllowCurrencySymbol | AllowExponent,\n})(NumberStyles || (NumberStyles = {}));\nfunction validResponse(regexMatch, radix) {\n    const [/*all*/ , sign, prefix, digits] = regexMatch;\n    return {\n        sign: sign || \"\",\n        prefix: prefix || \"\",\n        digits,\n        radix,\n    };\n}\nfunction getRange(unsigned, bitsize) {\n    switch (bitsize) {\n        case 8: return unsigned ? [0, 255] : [-128, 127];\n        case 16: return unsigned ? [0, 65535] : [-32768, 32767];\n        case 32: return unsigned ? [0, 4294967295] : [-2147483648, 2147483647];\n        default: throw new Error(\"Invalid bit size.\");\n    }\n}\nfunction getInvalidDigits(radix) {\n    switch (radix) {\n        case 2: return /[^0-1]/;\n        case 8: return /[^0-7]/;\n        case 10: return /[^0-9]/;\n        case 16: return /[^0-9a-fA-F]/;\n        default:\n            throw new Error(\"Invalid Base.\");\n    }\n}\nfunction getRadix(prefix, style) {\n    if (style & NumberStyles.AllowHexSpecifier) {\n        return 16;\n    }\n    else {\n        switch (prefix) {\n            case \"0b\":\n            case \"0B\": return 2;\n            case \"0o\":\n            case \"0O\": return 8;\n            case \"0x\":\n            case \"0X\": return 16;\n            default: return 10;\n        }\n    }\n}\nexport function isValid(str, style, radix) {\n    const integerRegex = /^\\s*([\\+\\-])?(0[xXoObB])?([0-9a-fA-F]+)\\s*$/;\n    const res = integerRegex.exec(str.replace(/_/g, \"\"));\n    if (res != null) {\n        const [/*all*/ , /*sign*/ , prefix, digits] = res;\n        radix = radix || getRadix(prefix, style);\n        const invalidDigits = getInvalidDigits(radix);\n        if (!invalidDigits.test(digits)) {\n            return validResponse(res, radix);\n        }\n    }\n    return null;\n}\nexport function parse(str, style, unsigned, bitsize, radix) {\n    const res = isValid(str, style, radix);\n    if (res != null) {\n        let v = Number.parseInt(res.sign + res.digits, res.radix);\n        if (!Number.isNaN(v)) {\n            const [umin, umax] = getRange(true, bitsize);\n            if (!unsigned && res.radix !== 10 && v >= umin && v <= umax) {\n                v = v << (32 - bitsize) >> (32 - bitsize);\n            }\n            const [min, max] = getRange(unsigned, bitsize);\n            if (v >= min && v <= max) {\n                return v;\n            }\n        }\n    }\n    throw new Error(\"Input string was not in a correct format.\");\n}\nexport function tryParse(str, style, unsigned, bitsize) {\n    try {\n        const v = parse(str, style, unsigned, bitsize);\n        return [true, v];\n    }\n    catch (_a) {\n        // supress error\n    }\n    return [false, 0];\n}\nexport function op_UnaryNegation_Int8(x) {\n    return x === -128 ? x : -x;\n}\nexport function op_UnaryNegation_Int16(x) {\n    return x === -32768 ? x : -x;\n}\nexport function op_UnaryNegation_Int32(x) {\n    return x === -2147483648 ? x : -x;\n}\n//# sourceMappingURL=Int32.js.map","// Adapted from: https://github.com/dcodeIO/long.js/blob/master/src/long.js\n// Apache License 2.0: https://github.com/dcodeIO/long.js/blob/master/LICENSE\nexport default Long;\n/**\n * wasm optimizations, to do native i64 multiplication and divide\n */\nvar wasm = null;\ntry {\n    wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\n        0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\n    ])), {}).exports;\n}\ncatch (e) {\n    // no wasm support :(\n}\n/**\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\n *  See the from* functions below for more convenient ways of constructing Longs.\n * @exports Long\n * @class A Long class for representing a 64 bit two's-complement integer value.\n * @param {number} low The low (signed) 32 bits of the long\n * @param {number} high The high (signed) 32 bits of the long\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @constructor\n */\nexport function Long(low, high, unsigned) {\n    /**\n     * The low 32 bits as a signed value.\n     * @type {number}\n     */\n    this.low = low | 0;\n    /**\n     * The high 32 bits as a signed value.\n     * @type {number}\n     */\n    this.high = high | 0;\n    /**\n     * Whether unsigned or not.\n     * @type {boolean}\n     */\n    this.unsigned = !!unsigned;\n}\nLong.prototype.GetHashCode = function () {\n    let h1 = this.unsigned ? 1 : 0;\n    h1 = ((h1 << 5) + h1) ^ this.high;\n    h1 = ((h1 << 5) + h1) ^ this.low;\n    return h1;\n};\nLong.prototype.Equals = function (x) { return equals(this, x); };\nLong.prototype.CompareTo = function (x) { return compare(this, x); };\nLong.prototype.toString = function (radix) { return toString(this, radix); };\nLong.prototype.toJSON = function () { return toString(this); };\n// The internal representation of a long is the two given signed, 32-bit values.\n// We use 32-bit pieces because these are the size of integers on which\n// Javascript performs bit-operations.  For operations like addition and\n// multiplication, we split each number into 16 bit pieces, which can easily be\n// multiplied within Javascript's floating-point representation without overflow\n// or change in sign.\n//\n// In the algorithms below, we frequently reduce the negative case to the\n// positive case by negating the input(s) and then post-processing the result.\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n// a positive number, it overflows back into a negative).  Not handling this\n// case would often result in infinite recursion.\n//\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\n// methods on which they depend.\n/**\n * An indicator used to reliably determine if an object is a Long or not.\n * @type {boolean}\n * @const\n * @private\n */\nLong.prototype.__isLong__;\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\n/**\n * @function\n * @param {*} obj Object\n * @returns {boolean}\n * @inner\n */\nexport function isLong(obj) {\n    return (obj && obj[\"__isLong__\"]) === true;\n}\n/**\n * Tests if the specified object is a Long.\n * @function\n * @param {*} obj Object\n * @returns {boolean}\n */\n// Long.isLong = isLong;\n/**\n * A cache of the Long representations of small integer values.\n * @type {!Object}\n * @inner\n */\nvar INT_CACHE = {};\n/**\n * A cache of the Long representations of small unsigned integer values.\n * @type {!Object}\n * @inner\n */\nvar UINT_CACHE = {};\n/**\n * @param {number} value\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nexport function fromInt(value, unsigned) {\n    var obj, cachedObj, cache;\n    if (unsigned) {\n        value >>>= 0;\n        if (cache = (0 <= value && value < 256)) {\n            cachedObj = UINT_CACHE[value];\n            if (cachedObj)\n                return cachedObj;\n        }\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\n        if (cache)\n            UINT_CACHE[value] = obj;\n        return obj;\n    }\n    else {\n        value |= 0;\n        if (cache = (-128 <= value && value < 128)) {\n            cachedObj = INT_CACHE[value];\n            if (cachedObj)\n                return cachedObj;\n        }\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\n        if (cache)\n            INT_CACHE[value] = obj;\n        return obj;\n    }\n}\n/**\n * Returns a Long representing the given 32 bit integer value.\n * @function\n * @param {number} value The 32 bit integer in question\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {!Long} The corresponding Long value\n */\n// Long.fromInt = fromInt;\n/**\n * @param {number} value\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nexport function fromNumber(value, unsigned) {\n    if (isNaN(value))\n        return unsigned ? UZERO : ZERO;\n    if (unsigned) {\n        if (value < 0)\n            return UZERO;\n        if (value >= TWO_PWR_64_DBL)\n            return MAX_UNSIGNED_VALUE;\n    }\n    else {\n        if (value <= -TWO_PWR_63_DBL)\n            return MIN_VALUE;\n        if (value + 1 >= TWO_PWR_63_DBL)\n            return MAX_VALUE;\n    }\n    if (value < 0)\n        return negate(fromNumber(-value, unsigned));\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\n}\n/**\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\n * @function\n * @param {number} value The number in question\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {!Long} The corresponding Long value\n */\n// Long.fromNumber = fromNumber;\n/**\n * @param {number} lowBits\n * @param {number} highBits\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nexport function fromBits(lowBits, highBits, unsigned) {\n    return new Long(lowBits, highBits, unsigned);\n}\n/**\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\n *  assumed to use 32 bits.\n * @function\n * @param {number} lowBits The low 32 bits\n * @param {number} highBits The high 32 bits\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {!Long} The corresponding Long value\n */\n// Long.fromBits = fromBits;\n/**\n * @function\n * @param {number} base\n * @param {number} exponent\n * @returns {number}\n * @inner\n */\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\n/**\n * @param {string} str\n * @param {(boolean|number)=} unsigned\n * @param {number=} radix\n * @returns {!Long}\n * @inner\n */\nexport function fromString(str, unsigned, radix) {\n    if (str.length === 0)\n        throw Error('empty string');\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\n        return ZERO;\n    if (typeof unsigned === 'number') {\n        // For goog.math.long compatibility\n        radix = unsigned,\n            unsigned = false;\n    }\n    else {\n        unsigned = !!unsigned;\n    }\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix)\n        throw RangeError('radix');\n    var p = str.indexOf('-');\n    if (p > 0)\n        throw Error('interior hyphen');\n    else if (p === 0) {\n        return negate(fromString(str.substring(1), unsigned, radix));\n    }\n    // Do several (8) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\n    var result = ZERO;\n    for (var i = 0; i < str.length; i += 8) {\n        var size = Math.min(8, str.length - i), value = parseInt(str.substring(i, i + size), radix);\n        if (size < 8) {\n            var power = fromNumber(pow_dbl(radix, size));\n            result = add(multiply(result, power), fromNumber(value));\n        }\n        else {\n            result = multiply(result, radixToPower);\n            result = add(result, fromNumber(value));\n        }\n    }\n    result.unsigned = unsigned;\n    return result;\n}\n/**\n * Returns a Long representation of the given string, written using the specified radix.\n * @function\n * @param {string} str The textual representation of the Long\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\n * @returns {!Long} The corresponding Long value\n */\n// Long.fromString = fromString;\n/**\n * @function\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nexport function fromValue(val, unsigned) {\n    if (typeof val === 'number')\n        return fromNumber(val, unsigned);\n    if (typeof val === 'string')\n        return fromString(val, unsigned);\n    // Throws for non-objects, converts non-instanceof Long:\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\n}\n/**\n * Converts the specified value to a Long using the appropriate from* function for its type.\n * @function\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {!Long}\n */\n// Long.fromValue = fromValue;\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\n// no runtime penalty for these.\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_16_DBL = 1 << 16;\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_24_DBL = 1 << 24;\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\n/**\n * @type {!Long}\n * @const\n * @inner\n */\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\n/**\n * @type {!Long}\n * @inner\n */\nexport var ZERO = fromInt(0);\n/**\n * Signed zero.\n * @type {!Long}\n */\n// Long.ZERO = ZERO;\n/**\n * @type {!Long}\n * @inner\n */\nexport var UZERO = fromInt(0, true);\n/**\n * Unsigned zero.\n * @type {!Long}\n */\n// Long.UZERO = UZERO;\n/**\n * @type {!Long}\n * @inner\n */\nexport var ONE = fromInt(1);\n/**\n * Signed one.\n * @type {!Long}\n */\n// Long.ONE = ONE;\n/**\n * @type {!Long}\n * @inner\n */\nexport var UONE = fromInt(1, true);\n/**\n * Unsigned one.\n * @type {!Long}\n */\n// Long.UONE = UONE;\n/**\n * @type {!Long}\n * @inner\n */\nexport var NEG_ONE = fromInt(-1);\n/**\n * Signed negative one.\n * @type {!Long}\n */\n// Long.NEG_ONE = NEG_ONE;\n/**\n * @type {!Long}\n * @inner\n */\nexport var MAX_VALUE = fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0, false);\n/**\n * Maximum signed value.\n * @type {!Long}\n */\n// Long.MAX_VALUE = MAX_VALUE;\n/**\n * @type {!Long}\n * @inner\n */\nexport var MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF | 0, 0xFFFFFFFF | 0, true);\n/**\n * Maximum unsigned value.\n * @type {!Long}\n */\n// Long.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\n/**\n * @type {!Long}\n * @inner\n */\nexport var MIN_VALUE = fromBits(0, 0x80000000 | 0, false);\n/**\n * Minimum signed value.\n * @type {!Long}\n */\n// Long.MIN_VALUE = MIN_VALUE;\n/**\n * @alias Long.prototype\n * @inner\n */\n// var LongPrototype = Long.prototype;\n/**\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\n * @this {!Long}\n * @returns {number}\n */\nexport function toInt($this) {\n    return $this.unsigned ? $this.low >>> 0 : $this.low;\n}\n;\n/**\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\n * @this {!Long}\n * @returns {number}\n */\nexport function toNumber($this) {\n    if ($this.unsigned)\n        return (($this.high >>> 0) * TWO_PWR_32_DBL) + ($this.low >>> 0);\n    return $this.high * TWO_PWR_32_DBL + ($this.low >>> 0);\n}\n;\n/**\n * Converts the Long to a string written in the specified radix.\n * @this {!Long}\n * @param {number=} radix Radix (2-36), defaults to 10\n * @returns {string}\n * @override\n * @throws {RangeError} If `radix` is out of range\n */\nexport function toString($this, radix) {\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix)\n        throw RangeError('radix');\n    if (isZero($this))\n        return '0';\n    if (isNegative($this)) { // Unsigned Longs are never negative\n        if (equals($this, MIN_VALUE)) {\n            // We need to change the Long value before it can be negated, so we remove\n            // the bottom-most digit in this base and then recurse to do the rest.\n            var radixLong = fromNumber(radix), div = divide($this, radixLong), rem1 = subtract(multiply(div, radixLong), $this);\n            return toString(div, radix) + toInt(rem1).toString(radix);\n        }\n        else\n            return '-' + toString(negate($this), radix);\n    }\n    // Do several (6) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n    var radixToPower = fromNumber(pow_dbl(radix, 6), $this.unsigned), rem = $this;\n    var result = '';\n    while (true) {\n        var remDiv = divide(rem, radixToPower), intval = toInt(subtract(rem, multiply(remDiv, radixToPower))) >>> 0, digits = intval.toString(radix);\n        rem = remDiv;\n        if (isZero(rem))\n            return digits + result;\n        else {\n            while (digits.length < 6)\n                digits = '0' + digits;\n            result = '' + digits + result;\n        }\n    }\n}\n;\n/**\n * Gets the high 32 bits as a signed integer.\n * @this {!Long}\n * @returns {number} Signed high bits\n */\nexport function getHighBits($this) {\n    return $this.high;\n}\n;\n/**\n * Gets the high 32 bits as an unsigned integer.\n * @this {!Long}\n * @returns {number} Unsigned high bits\n */\nexport function getHighBitsUnsigned($this) {\n    return $this.high >>> 0;\n}\n;\n/**\n * Gets the low 32 bits as a signed integer.\n * @this {!Long}\n * @returns {number} Signed low bits\n */\nexport function getLowBits($this) {\n    return $this.low;\n}\n;\n/**\n * Gets the low 32 bits as an unsigned integer.\n * @this {!Long}\n * @returns {number} Unsigned low bits\n */\nexport function getLowBitsUnsigned($this) {\n    return $this.low >>> 0;\n}\n;\n/**\n * Gets the number of bits needed to represent the absolute value of this Long.\n * @this {!Long}\n * @returns {number}\n */\nexport function getNumBitsAbs($this) {\n    if (isNegative($this)) // Unsigned Longs are never negative\n        return equals($this, MIN_VALUE) ? 64 : getNumBitsAbs(negate($this));\n    var val = $this.high != 0 ? $this.high : $this.low;\n    for (var bit = 31; bit > 0; bit--)\n        if ((val & (1 << bit)) != 0)\n            break;\n    return $this.high != 0 ? bit + 33 : bit + 1;\n}\n;\n/**\n * Tests if this Long's value equals zero.\n * @this {!Long}\n * @returns {boolean}\n */\nexport function isZero($this) {\n    return $this.high === 0 && $this.low === 0;\n}\n;\n/**\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\n * @returns {boolean}\n */\n// LongPrototype.eqz = LongPrototype.isZero;\n/**\n * Tests if this Long's value is negative.\n * @this {!Long}\n * @returns {boolean}\n */\nexport function isNegative($this) {\n    return !$this.unsigned && $this.high < 0;\n}\n;\n/**\n * Tests if this Long's value is positive.\n * @this {!Long}\n * @returns {boolean}\n */\nexport function isPositive($this) {\n    return $this.unsigned || $this.high >= 0;\n}\n;\n/**\n * Tests if this Long's value is odd.\n * @this {!Long}\n * @returns {boolean}\n */\nexport function isOdd($this) {\n    return ($this.low & 1) === 1;\n}\n;\n/**\n * Tests if this Long's value is even.\n * @this {!Long}\n * @returns {boolean}\n */\nexport function isEven($this) {\n    return ($this.low & 1) === 0;\n}\n;\n/**\n * Tests if this Long's value equals the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nexport function equals($this, other) {\n    if (!isLong(other))\n        other = fromValue(other);\n    if ($this.unsigned !== other.unsigned && ($this.high >>> 31) === 1 && (other.high >>> 31) === 1)\n        return false;\n    return $this.high === other.high && $this.low === other.low;\n}\n;\n/**\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.eq = LongPrototype.equals;\n/**\n * Tests if this Long's value differs from the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nexport function notEquals($this, other) {\n    return !equals($this, /* validates */ other);\n}\n;\n/**\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.neq = LongPrototype.notEquals;\n/**\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.ne = LongPrototype.notEquals;\n/**\n * Tests if this Long's value is less than the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nexport function lessThan($this, other) {\n    return compare($this, /* validates */ other) < 0;\n}\n;\n/**\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.lt = LongPrototype.lessThan;\n/**\n * Tests if this Long's value is less than or equal the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nexport function lessThanOrEqual($this, other) {\n    return compare($this, /* validates */ other) <= 0;\n}\n;\n/**\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.lte = LongPrototype.lessThanOrEqual;\n/**\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.le = LongPrototype.lessThanOrEqual;\n/**\n * Tests if this Long's value is greater than the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nexport function greaterThan($this, other) {\n    return compare($this, /* validates */ other) > 0;\n}\n;\n/**\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.gt = LongPrototype.greaterThan;\n/**\n * Tests if this Long's value is greater than or equal the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nexport function greaterThanOrEqual($this, other) {\n    return compare($this, /* validates */ other) >= 0;\n}\n;\n/**\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.gte = LongPrototype.greaterThanOrEqual;\n/**\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.ge = LongPrototype.greaterThanOrEqual;\n/**\n * Compares this Long's value with the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n *  if the given one is greater\n */\nexport function compare($this, other) {\n    if (!isLong(other))\n        other = fromValue(other);\n    if (equals($this, other))\n        return 0;\n    var thisNeg = isNegative($this), otherNeg = isNegative(other);\n    if (thisNeg && !otherNeg)\n        return -1;\n    if (!thisNeg && otherNeg)\n        return 1;\n    // At this point the sign bits are the same\n    if (!$this.unsigned)\n        return isNegative(subtract($this, other)) ? -1 : 1;\n    // Both are positive if at least one is unsigned\n    return (other.high >>> 0) > ($this.high >>> 0) || (other.high === $this.high && (other.low >>> 0) > ($this.low >>> 0)) ? -1 : 1;\n}\n;\n/**\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n *  if the given one is greater\n */\n// LongPrototype.comp = LongPrototype.compare;\n/**\n * Negates this Long's value.\n * @this {!Long}\n * @returns {!Long} Negated Long\n */\nexport function negate($this) {\n    if (!$this.unsigned && equals($this, MIN_VALUE))\n        return MIN_VALUE;\n    return add(not($this), ONE);\n}\n;\n/**\n * Negates this Long's value. This is an alias of {@link Long#negate}.\n * @function\n * @returns {!Long} Negated Long\n */\n// LongPrototype.neg = LongPrototype.negate;\n/**\n * Returns the sum of this and the specified Long.\n * @this {!Long}\n * @param {!Long|number|string} addend Addend\n * @returns {!Long} Sum\n */\nexport function add($this, addend) {\n    if (!isLong(addend))\n        addend = fromValue(addend);\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n    var a48 = $this.high >>> 16;\n    var a32 = $this.high & 0xFFFF;\n    var a16 = $this.low >>> 16;\n    var a00 = $this.low & 0xFFFF;\n    var b48 = addend.high >>> 16;\n    var b32 = addend.high & 0xFFFF;\n    var b16 = addend.low >>> 16;\n    var b00 = addend.low & 0xFFFF;\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\n    c00 += a00 + b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 + b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 + b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 + b48;\n    c48 &= 0xFFFF;\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, $this.unsigned);\n}\n;\n/**\n * Returns the difference of this and the specified Long.\n * @this {!Long}\n * @param {!Long|number|string} subtrahend Subtrahend\n * @returns {!Long} Difference\n */\nexport function subtract($this, subtrahend) {\n    if (!isLong(subtrahend))\n        subtrahend = fromValue(subtrahend);\n    return add($this, negate(subtrahend));\n}\n;\n/**\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\n * @function\n * @param {!Long|number|string} subtrahend Subtrahend\n * @returns {!Long} Difference\n */\n// LongPrototype.sub = LongPrototype.subtract;\n/**\n * Returns the product of this and the specified Long.\n * @this {!Long}\n * @param {!Long|number|string} multiplier Multiplier\n * @returns {!Long} Product\n */\nexport function multiply($this, multiplier) {\n    if (isZero($this))\n        return $this.unsigned ? UZERO : ZERO;\n    if (!isLong(multiplier))\n        multiplier = fromValue(multiplier);\n    // use wasm support if present\n    if (wasm) {\n        var low = wasm.mul($this.low, $this.high, multiplier.low, multiplier.high);\n        return fromBits(low, wasm.get_high(), $this.unsigned);\n    }\n    if (isZero(multiplier))\n        return $this.unsigned ? UZERO : ZERO;\n    if (equals($this, MIN_VALUE))\n        return isOdd(multiplier) ? MIN_VALUE : ZERO;\n    if (equals(multiplier, MIN_VALUE))\n        return isOdd($this) ? MIN_VALUE : ZERO;\n    if (isNegative($this)) {\n        if (isNegative(multiplier))\n            return multiply(negate($this), negate(multiplier));\n        else\n            return negate(multiply(negate($this), multiplier));\n    }\n    else if (isNegative(multiplier))\n        return negate(multiply($this, negate(multiplier)));\n    // If both longs are small, use float multiplication\n    if (lessThan($this, TWO_PWR_24) && lessThan(multiplier, TWO_PWR_24))\n        return fromNumber(toNumber($this) * toNumber(multiplier), $this.unsigned);\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\n    // We can skip products that would overflow.\n    var a48 = $this.high >>> 16;\n    var a32 = $this.high & 0xFFFF;\n    var a16 = $this.low >>> 16;\n    var a00 = $this.low & 0xFFFF;\n    var b48 = multiplier.high >>> 16;\n    var b32 = multiplier.high & 0xFFFF;\n    var b16 = multiplier.low >>> 16;\n    var b00 = multiplier.low & 0xFFFF;\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\n    c00 += a00 * b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 * b00;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c16 += a00 * b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 * b00;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a16 * b16;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a00 * b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n    c48 &= 0xFFFF;\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, $this.unsigned);\n}\n;\n/**\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\n * @function\n * @param {!Long|number|string} multiplier Multiplier\n * @returns {!Long} Product\n */\n// LongPrototype.mul = LongPrototype.multiply;\n/**\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\n *  unsigned if this Long is unsigned.\n * @this {!Long}\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Quotient\n */\nexport function divide($this, divisor) {\n    if (!isLong(divisor))\n        divisor = fromValue(divisor);\n    if (isZero(divisor))\n        throw Error('division by zero');\n    // use wasm support if present\n    if (wasm) {\n        // guard against signed division overflow: the largest\n        // negative number / -1 would be 1 larger than the largest\n        // positive number, due to two's complement.\n        if (!$this.unsigned &&\n            $this.high === -0x80000000 &&\n            divisor.low === -1 && divisor.high === -1) {\n            // be consistent with non-wasm code path\n            return $this;\n        }\n        var low = ($this.unsigned ? wasm.div_u : wasm.div_s)($this.low, $this.high, divisor.low, divisor.high);\n        return fromBits(low, wasm.get_high(), $this.unsigned);\n    }\n    if (isZero($this))\n        return $this.unsigned ? UZERO : ZERO;\n    var approx, rem, res;\n    if (!$this.unsigned) {\n        // This section is only relevant for signed longs and is derived from the\n        // closure library as a whole.\n        if (equals($this, MIN_VALUE)) {\n            if (equals(divisor, ONE) || equals(divisor, NEG_ONE))\n                return MIN_VALUE; // recall that -MIN_VALUE == MIN_VALUE\n            else if (equals(divisor, MIN_VALUE))\n                return ONE;\n            else {\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n                var halfThis = shiftRight($this, 1);\n                approx = shiftLeft(divide(halfThis, divisor), 1);\n                if (equals(approx, ZERO)) {\n                    return isNegative(divisor) ? ONE : NEG_ONE;\n                }\n                else {\n                    rem = subtract($this, multiply(divisor, approx));\n                    res = add(approx, divide(rem, divisor));\n                    return res;\n                }\n            }\n        }\n        else if (equals(divisor, MIN_VALUE))\n            return $this.unsigned ? UZERO : ZERO;\n        if (isNegative($this)) {\n            if (isNegative(divisor))\n                return divide(negate($this), negate(divisor));\n            return negate(divide(negate($this), divisor));\n        }\n        else if (isNegative(divisor))\n            return negate(divide($this, negate(divisor)));\n        res = ZERO;\n    }\n    else {\n        // The algorithm below has not been made for unsigned longs. It's therefore\n        // required to take special care of the MSB prior to running it.\n        if (!divisor.unsigned)\n            divisor = toUnsigned(divisor);\n        if (greaterThan(divisor, $this))\n            return UZERO;\n        if (greaterThan(divisor, shiftRightUnsigned($this, 1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\n            return UONE;\n        res = UZERO;\n    }\n    // Repeat the following until the remainder is less than other:  find a\n    // floating-point that approximates remainder / other *from below*, add this\n    // into the result, and subtract it from the remainder.  It is critical that\n    // the approximate value is less than or equal to the real value so that the\n    // remainder never becomes negative.\n    rem = $this;\n    while (greaterThanOrEqual(rem, divisor)) {\n        // Approximate the result of division. This may be a little greater or\n        // smaller than the actual value.\n        approx = Math.max(1, Math.floor(toNumber(rem) / toNumber(divisor)));\n        // We will tweak the approximate result by changing it in the 48-th digit or\n        // the smallest non-fractional digit, whichever is larger.\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2), delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48), \n        // Decrease the approximation until it is smaller than the remainder.  Note\n        // that if it is too large, the product overflows and is negative.\n        approxRes = fromNumber(approx), approxRem = multiply(approxRes, divisor);\n        while (isNegative(approxRem) || greaterThan(approxRem, rem)) {\n            approx -= delta;\n            approxRes = fromNumber(approx, $this.unsigned);\n            approxRem = multiply(approxRes, divisor);\n        }\n        // We know the answer can't be zero... and actually, zero would cause\n        // infinite recursion since we would make no progress.\n        if (isZero(approxRes))\n            approxRes = ONE;\n        res = add(res, approxRes);\n        rem = subtract(rem, approxRem);\n    }\n    return res;\n}\n;\n/**\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\n * @function\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Quotient\n */\n// LongPrototype.div = LongPrototype.divide;\n/**\n * Returns this Long modulo the specified.\n * @this {!Long}\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Remainder\n */\nexport function modulo($this, divisor) {\n    if (!isLong(divisor))\n        divisor = fromValue(divisor);\n    // use wasm support if present\n    if (wasm) {\n        var low = ($this.unsigned ? wasm.rem_u : wasm.rem_s)($this.low, $this.high, divisor.low, divisor.high);\n        return fromBits(low, wasm.get_high(), $this.unsigned);\n    }\n    return subtract($this, multiply(divide($this, divisor), divisor));\n}\n;\n/**\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n * @function\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Remainder\n */\n// LongPrototype.mod = LongPrototype.modulo;\n/**\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n * @function\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Remainder\n */\n// LongPrototype.rem = LongPrototype.modulo;\n/**\n * Returns the bitwise NOT of this Long.\n * @this {!Long}\n * @returns {!Long}\n */\nexport function not($this) {\n    return fromBits(~$this.low, ~$this.high, $this.unsigned);\n}\n;\n/**\n * Returns the bitwise AND of this Long and the specified.\n * @this {!Long}\n * @param {!Long|number|string} other Other Long\n * @returns {!Long}\n */\nexport function and($this, other) {\n    if (!isLong(other))\n        other = fromValue(other);\n    return fromBits($this.low & other.low, $this.high & other.high, $this.unsigned);\n}\n;\n/**\n * Returns the bitwise OR of this Long and the specified.\n * @this {!Long}\n * @param {!Long|number|string} other Other Long\n * @returns {!Long}\n */\nexport function or($this, other) {\n    if (!isLong(other))\n        other = fromValue(other);\n    return fromBits($this.low | other.low, $this.high | other.high, $this.unsigned);\n}\n;\n/**\n * Returns the bitwise XOR of this Long and the given one.\n * @this {!Long}\n * @param {!Long|number|string} other Other Long\n * @returns {!Long}\n */\nexport function xor($this, other) {\n    if (!isLong(other))\n        other = fromValue(other);\n    return fromBits($this.low ^ other.low, $this.high ^ other.high, $this.unsigned);\n}\n;\n/**\n * Returns this Long with bits shifted to the left by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nexport function shiftLeft($this, numBits) {\n    if (isLong(numBits))\n        numBits = toInt(numBits);\n    if ((numBits &= 63) === 0)\n        return $this;\n    else if (numBits < 32)\n        return fromBits($this.low << numBits, ($this.high << numBits) | ($this.low >>> (32 - numBits)), $this.unsigned);\n    else\n        return fromBits(0, $this.low << (numBits - 32), $this.unsigned);\n}\n;\n/**\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\n// LongPrototype.shl = LongPrototype.shiftLeft;\n/**\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nexport function shiftRight($this, numBits) {\n    if (isLong(numBits))\n        numBits = toInt(numBits);\n    if ((numBits &= 63) === 0)\n        return $this;\n    else if (numBits < 32)\n        return fromBits(($this.low >>> numBits) | ($this.high << (32 - numBits)), $this.high >> numBits, $this.unsigned);\n    else\n        return fromBits($this.high >> (numBits - 32), $this.high >= 0 ? 0 : -1, $this.unsigned);\n}\n;\n/**\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\n// LongPrototype.shr = LongPrototype.shiftRight;\n/**\n * Returns this Long with bits logically shifted to the right by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nexport function shiftRightUnsigned($this, numBits) {\n    if (isLong(numBits))\n        numBits = toInt(numBits);\n    numBits &= 63;\n    if (numBits === 0)\n        return $this;\n    else {\n        var high = $this.high;\n        if (numBits < 32) {\n            var low = $this.low;\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, $this.unsigned);\n        }\n        else if (numBits === 32)\n            return fromBits(high, 0, $this.unsigned);\n        else\n            return fromBits(high >>> (numBits - 32), 0, $this.unsigned);\n    }\n}\n;\n/**\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\n// LongPrototype.shru = LongPrototype.shiftRightUnsigned;\n/**\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\n// LongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\n/**\n * Returns this Long with bits rotated to the left by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Rotated Long\n */\nexport const rotateLeft = function rotateLeft(numBits) {\n    var b;\n    if (isLong(numBits))\n        numBits = numBits.toInt();\n    if ((numBits &= 63) === 0)\n        return this;\n    if (numBits === 32)\n        return fromBits(this.high, this.low, this.unsigned);\n    if (numBits < 32) {\n        b = (32 - numBits);\n        return fromBits(((this.low << numBits) | (this.high >>> b)), ((this.high << numBits) | (this.low >>> b)), this.unsigned);\n    }\n    numBits -= 32;\n    b = (32 - numBits);\n    return fromBits(((this.high << numBits) | (this.low >>> b)), ((this.low << numBits) | (this.high >>> b)), this.unsigned);\n};\n/**\n * Returns this Long with bits rotated to the left by the given amount. This is an alias of {@link Long#rotateLeft}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Rotated Long\n */\n// LongPrototype.rotl = LongPrototype.rotateLeft;\n/**\n * Returns this Long with bits rotated to the right by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Rotated Long\n */\nexport const rotateRight = function rotateRight(numBits) {\n    var b;\n    if (isLong(numBits))\n        numBits = numBits.toInt();\n    if ((numBits &= 63) === 0)\n        return this;\n    if (numBits === 32)\n        return fromBits(this.high, this.low, this.unsigned);\n    if (numBits < 32) {\n        b = (32 - numBits);\n        return fromBits(((this.high << b) | (this.low >>> numBits)), ((this.low << b) | (this.high >>> numBits)), this.unsigned);\n    }\n    numBits -= 32;\n    b = (32 - numBits);\n    return fromBits(((this.low << b) | (this.high >>> numBits)), ((this.high << b) | (this.low >>> numBits)), this.unsigned);\n};\n/**\n * Returns this Long with bits rotated to the right by the given amount. This is an alias of {@link Long#rotateRight}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Rotated Long\n */\n// LongPrototype.rotr = LongPrototype.rotateRight;\n/**\n * Converts this Long to signed.\n * @this {!Long}\n * @returns {!Long} Signed long\n */\nexport function toSigned($this) {\n    if (!$this.unsigned)\n        return $this;\n    return fromBits($this.low, $this.high, false);\n}\n;\n/**\n * Converts this Long to unsigned.\n * @this {!Long}\n * @returns {!Long} Unsigned long\n */\nexport function toUnsigned($this) {\n    if ($this.unsigned)\n        return $this;\n    return fromBits($this.low, $this.high, true);\n}\n;\n/**\n * Converts this Long to its byte representation.\n * @param {boolean=} le Whether little or big endian, defaults to big endian\n * @this {!Long}\n * @returns {!Array.<number>} Byte representation\n */\nexport function toBytes($this, le) {\n    return le ? toBytesLE($this) : toBytesBE($this);\n}\n;\n/**\n * Converts this Long to its little endian byte representation.\n * @this {!Long}\n * @returns {!Array.<number>} Little endian byte representation\n */\nexport function toBytesLE($this) {\n    var hi = $this.high, lo = $this.low;\n    return [\n        lo & 0xff,\n        lo >>> 8 & 0xff,\n        lo >>> 16 & 0xff,\n        lo >>> 24,\n        hi & 0xff,\n        hi >>> 8 & 0xff,\n        hi >>> 16 & 0xff,\n        hi >>> 24\n    ];\n}\n;\n/**\n * Converts this Long to its big endian byte representation.\n * @this {!Long}\n * @returns {!Array.<number>} Big endian byte representation\n */\nexport function toBytesBE($this) {\n    var hi = $this.high, lo = $this.low;\n    return [\n        hi >>> 24,\n        hi >>> 16 & 0xff,\n        hi >>> 8 & 0xff,\n        hi & 0xff,\n        lo >>> 24,\n        lo >>> 16 & 0xff,\n        lo >>> 8 & 0xff,\n        lo & 0xff\n    ];\n}\n;\n/**\n * Creates a Long from its byte representation.\n * @param {!Array.<number>} bytes Byte representation\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @param {boolean=} le Whether little or big endian, defaults to big endian\n * @returns {Long} The corresponding Long value\n */\nexport function fromBytes(bytes, unsigned, le) {\n    return le ? fromBytesLE(bytes, unsigned) : fromBytesBE(bytes, unsigned);\n}\n;\n/**\n * Creates a Long from its little endian byte representation.\n * @param {!Array.<number>} bytes Little endian byte representation\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {Long} The corresponding Long value\n */\nexport function fromBytesLE(bytes, unsigned) {\n    return new Long(bytes[0] |\n        bytes[1] << 8 |\n        bytes[2] << 16 |\n        bytes[3] << 24, bytes[4] |\n        bytes[5] << 8 |\n        bytes[6] << 16 |\n        bytes[7] << 24, unsigned);\n}\n;\n/**\n * Creates a Long from its big endian byte representation.\n * @param {!Array.<number>} bytes Big endian byte representation\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {Long} The corresponding Long value\n */\nexport function fromBytesBE(bytes, unsigned) {\n    return new Long(bytes[4] << 24 |\n        bytes[5] << 16 |\n        bytes[6] << 8 |\n        bytes[7], bytes[0] << 24 |\n        bytes[1] << 16 |\n        bytes[2] << 8 |\n        bytes[3], unsigned);\n}\n;\n//# sourceMappingURL=long.js.map","import { isValid } from \"./Int32\";\nimport * as LongLib from \"./lib/long\";\nexport default LongLib.Long;\nexport const get_Zero = LongLib.ZERO;\nexport const get_One = LongLib.ONE;\nexport const op_Addition = LongLib.add;\nexport const op_Subtraction = LongLib.subtract;\nexport const op_Multiply = LongLib.multiply;\nexport const op_Division = LongLib.divide;\nexport const op_Modulus = LongLib.modulo;\nexport const op_UnaryNegation = LongLib.negate;\nexport const op_LeftShift = LongLib.shiftLeft;\nexport const op_RightShift = LongLib.shiftRight;\nexport const op_RightShiftUnsigned = LongLib.shiftRightUnsigned;\nexport const op_BitwiseAnd = LongLib.and;\nexport const op_BitwiseOr = LongLib.or;\nexport const op_ExclusiveOr = LongLib.xor;\nexport const op_LogicalNot = LongLib.not;\nexport const op_LessThan = LongLib.lessThan;\nexport const op_LessThanOrEqual = LongLib.lessThanOrEqual;\nexport const op_GreaterThan = LongLib.greaterThan;\nexport const op_GreaterThanOrEqual = LongLib.greaterThanOrEqual;\nexport const op_Equality = LongLib.equals;\nexport const op_Inequality = LongLib.notEquals;\nexport const equals = LongLib.equals;\nexport const compare = LongLib.compare;\nexport const fromInt = LongLib.fromInt;\nexport const fromBits = LongLib.fromBits;\nexport const fromBytes = LongLib.fromBytes;\nexport const fromNumber = LongLib.fromNumber;\nexport const fromString = LongLib.fromString;\nexport const fromValue = LongLib.fromValue;\nexport const toInt = LongLib.toInt;\nexport const toBytes = LongLib.toBytes;\nexport const toNumber = LongLib.toNumber;\nexport const toString = LongLib.toString;\nexport const getLowBits = LongLib.getLowBits;\nexport const getHighBits = LongLib.getHighBits;\nexport const getLowBitsUnsigned = LongLib.getLowBitsUnsigned;\nexport const getHighBitsUnsigned = LongLib.getHighBitsUnsigned;\nfunction getMaxValue(unsigned, radix, isNegative) {\n    switch (radix) {\n        case 2: return unsigned ?\n            \"1111111111111111111111111111111111111111111111111111111111111111\" :\n            (isNegative ? \"1000000000000000000000000000000000000000000000000000000000000000\"\n                : \"111111111111111111111111111111111111111111111111111111111111111\");\n        case 8: return unsigned ?\n            \"1777777777777777777777\" :\n            (isNegative ? \"1000000000000000000000\" : \"777777777777777777777\");\n        case 10: return unsigned ?\n            \"18446744073709551615\" :\n            (isNegative ? \"9223372036854775808\" : \"9223372036854775807\");\n        case 16: return unsigned ?\n            \"FFFFFFFFFFFFFFFF\" :\n            (isNegative ? \"8000000000000000\" : \"7FFFFFFFFFFFFFFF\");\n        default: throw new Error(\"Invalid radix.\");\n    }\n}\nexport function abs(x) {\n    if (!x.unsigned && LongLib.isNegative(x)) {\n        return op_UnaryNegation(x);\n    }\n    else {\n        return x;\n    }\n}\nexport function fromInteger(value, unsigned, kind) {\n    let x = value;\n    let xh = 0;\n    switch (kind) {\n        case 0:\n            x = value << 24 >> 24;\n            xh = x;\n            break;\n        case 4:\n            x = value << 24 >>> 24;\n            break;\n        case 1:\n            x = value << 16 >> 16;\n            xh = x;\n            break;\n        case 5:\n            x = value << 16 >>> 16;\n            break;\n        case 2:\n            x = value >> 0;\n            xh = x;\n            break;\n        case 6:\n            x = value >>> 0;\n            break;\n    }\n    return LongLib.fromBits(x, xh >> 31, unsigned);\n}\nexport function parse(str, style, unsigned, _bitsize, radix) {\n    const res = isValid(str, style, radix);\n    if (res != null) {\n        const lessOrEqual = (x, y) => {\n            const len = Math.max(x.length, y.length);\n            return x.padStart(len, \"0\") <= y.padStart(len, \"0\");\n        };\n        const isNegative = res.sign === \"-\";\n        const maxValue = getMaxValue(unsigned || res.radix !== 10, res.radix, isNegative);\n        if (lessOrEqual(res.digits.toUpperCase(), maxValue)) {\n            str = isNegative ? res.sign + res.digits : res.digits;\n            return LongLib.fromString(str, unsigned, res.radix);\n        }\n    }\n    throw new Error(\"Input string was not in a correct format.\");\n}\nexport function tryParse(str, style, unsigned, bitsize) {\n    try {\n        const v = parse(str, style, unsigned, bitsize);\n        return [true, v];\n    }\n    catch (_a) {\n        // supress error\n    }\n    return [false, LongLib.ZERO];\n}\nexport function unixEpochMillisecondsToTicks(ms, offset) {\n    return op_Multiply(op_Addition(op_Addition(LongLib.fromNumber(ms), 62135596800000), offset), 10000);\n}\nexport function ticksToUnixEpochMilliseconds(ticks) {\n    return LongLib.toNumber(op_Subtraction(op_Division(ticks, 10000), 62135596800000));\n}\nexport function makeRangeStepFunction(step, last, unsigned) {\n    const stepComparedWithZero = LongLib.compare(step, unsigned ? LongLib.UZERO : LongLib.ZERO);\n    if (stepComparedWithZero === 0) {\n        throw new Error(\"The step of a range cannot be zero\");\n    }\n    const stepGreaterThanZero = stepComparedWithZero > 0;\n    return (x) => {\n        const comparedWithLast = LongLib.compare(x, last);\n        if ((stepGreaterThanZero && comparedWithLast <= 0)\n            || (!stepGreaterThanZero && comparedWithLast >= 0)) {\n            return [x, op_Addition(x, step)];\n        }\n        else {\n            return null;\n        }\n    };\n}\n//# sourceMappingURL=Long.js.map","import { makeRangeStepFunction as makeDecimalRangeStepFunction } from \"./Decimal\";\nimport { makeRangeStepFunction as makeLongRangeStepFunction } from \"./Long\";\nimport { some, value } from \"./Option\";\nimport { compare, equals } from \"./Util\";\nexport class Enumerator {\n    constructor(iter) {\n        this.iter = iter;\n    }\n    MoveNext() {\n        const cur = this.iter.next();\n        this.current = cur.value;\n        return !cur.done;\n    }\n    get Current() {\n        return this.current;\n    }\n    Reset() {\n        throw new Error(\"JS iterators cannot be reset\");\n    }\n    Dispose() {\n        return;\n    }\n}\nexport function getEnumerator(o) {\n    return new Enumerator(o[Symbol.iterator]());\n}\nexport function toIterator(en) {\n    return {\n        next() {\n            return en.MoveNext()\n                ? { done: false, value: en.Current }\n                : { done: true, value: null };\n        },\n    };\n}\n// export function toIterable<T>(en: IEnumerable<T>): Iterable<T> {\n//   return {\n//     [Symbol.iterator]() {\n//       return toIterator(en.GetEnumerator());\n//     },\n//   };\n// }\nfunction __failIfNone(res) {\n    if (res == null) {\n        throw new Error(\"Seq did not contain any matching element\");\n    }\n    return value(res);\n}\nfunction makeSeq(f) {\n    const seq = {\n        [Symbol.iterator]: f,\n        toString: () => \"seq [\" + Array.from(seq).join(\"; \") + \"]\",\n    };\n    return seq;\n}\nexport function ofArray(xs) {\n    return delay(() => unfold((i) => i != null && i < xs.length ? [xs[i], i + 1] : null, 0));\n}\nexport function allPairs(xs, ys) {\n    let firstEl = true;\n    const ysCache = [];\n    return collect((x) => {\n        if (firstEl) {\n            firstEl = false;\n            return map((y) => {\n                ysCache.push(y);\n                return [x, y];\n            }, ys);\n        }\n        else {\n            return ysCache.map((y) => [x, y]);\n            // return map(function (i) {\n            //     return [x, ysCache[i]];\n            // }, rangeNumber(0, 1, ysCache.length - 1));\n        }\n    }, xs);\n}\nexport function append(xs, ys) {\n    return delay(() => {\n        let firstDone = false;\n        const i = xs[Symbol.iterator]();\n        let iters = [i, null];\n        return unfold(() => {\n            var _a, _b;\n            let cur;\n            if (!firstDone) {\n                cur = (_a = iters[0]) === null || _a === void 0 ? void 0 : _a.next();\n                if (cur != null && !cur.done) {\n                    return [cur.value, iters];\n                }\n                else {\n                    firstDone = true;\n                    iters = [null, ys[Symbol.iterator]()];\n                }\n            }\n            cur = (_b = iters[1]) === null || _b === void 0 ? void 0 : _b.next();\n            return cur != null && !cur.done ? [cur.value, iters] : null;\n        }, iters);\n    });\n}\nexport function average(xs, averager) {\n    let count = 0;\n    const total = fold((acc, x) => {\n        count++;\n        return averager.Add(acc, x);\n    }, averager.GetZero(), xs);\n    return averager.DivideByInt(total, count);\n}\nexport function averageBy(f, xs, averager) {\n    let count = 0;\n    const total = fold((acc, x) => {\n        count++;\n        return averager.Add(acc, f(x));\n    }, averager.GetZero(), xs);\n    return averager.DivideByInt(total, count);\n}\nexport function concat(xs) {\n    return delay(() => {\n        const iter = xs[Symbol.iterator]();\n        let output = { value: null };\n        return unfold((innerIter) => {\n            let hasFinished = false;\n            while (!hasFinished) {\n                if (innerIter == null) {\n                    const cur = iter.next();\n                    if (!cur.done) {\n                        innerIter = cur.value[Symbol.iterator]();\n                    }\n                    else {\n                        hasFinished = true;\n                    }\n                }\n                else {\n                    const cur = innerIter.next();\n                    if (!cur.done) {\n                        output = { value: cur.value };\n                        hasFinished = true;\n                    }\n                    else {\n                        innerIter = null;\n                    }\n                }\n            }\n            return innerIter != null && output != null ? [output.value, innerIter] : null;\n        }, null);\n    });\n}\nexport function collect(f, xs) {\n    return concat(map(f, xs));\n}\nexport function choose(f, xs) {\n    return delay(() => unfold((iter) => {\n        let cur = iter.next();\n        while (!cur.done) {\n            const y = f(cur.value);\n            if (y != null) {\n                return [value(y), iter];\n            }\n            cur = iter.next();\n        }\n        return null;\n    }, xs[Symbol.iterator]()));\n}\nexport function compareWith(f, xs, ys) {\n    const nonZero = tryFind((i) => i !== 0, map2((x, y) => f(x, y), xs, ys));\n    return nonZero != null ? value(nonZero) : length(xs) - length(ys);\n}\nexport function delay(f) {\n    return makeSeq(() => f()[Symbol.iterator]());\n}\nexport function empty() {\n    return unfold(() => null, undefined);\n}\nexport function enumerateFromFunctions(factory, moveNext, current) {\n    return delay(() => unfold((e) => moveNext(e) ? [current(e), e] : null, factory()));\n}\nexport function enumerateWhile(cond, xs) {\n    return concat(unfold(() => cond() ? [xs, true] : null, undefined));\n}\nexport function enumerateThenFinally(xs, finalFn) {\n    return delay(() => {\n        let iter;\n        try {\n            iter = xs[Symbol.iterator]();\n        }\n        catch (err) {\n            return empty();\n        }\n        finally {\n            finalFn();\n        }\n        return unfold((it) => {\n            try {\n                const cur = it.next();\n                return !cur.done ? [cur.value, it] : null;\n            }\n            catch (err) {\n                return null;\n            }\n            finally {\n                finalFn();\n            }\n        }, iter);\n    });\n}\nexport function enumerateUsing(disp, work) {\n    let isDisposed = false;\n    const disposeOnce = () => {\n        if (!isDisposed) {\n            isDisposed = true;\n            disp.Dispose();\n        }\n    };\n    try {\n        return enumerateThenFinally(work(disp), disposeOnce);\n    }\n    catch (err) {\n        return void 0;\n    }\n    finally {\n        disposeOnce();\n    }\n}\nexport function exactlyOne(xs) {\n    const iter = xs[Symbol.iterator]();\n    const fst = iter.next();\n    if (fst.done) {\n        throw new Error(\"Seq was empty\");\n    }\n    const snd = iter.next();\n    if (!snd.done) {\n        throw new Error(\"Seq had multiple items\");\n    }\n    return fst.value;\n}\nexport function except(itemsToExclude, source) {\n    const exclusionItems = Array.from(itemsToExclude);\n    const testIsNotInExclusionItems = (element) => !exclusionItems.some((excludedItem) => equals(excludedItem, element));\n    return filter(testIsNotInExclusionItems, source);\n}\nexport function exists(f, xs) {\n    let cur;\n    for (const iter = xs[Symbol.iterator]();;) {\n        cur = iter.next();\n        if (cur.done) {\n            break;\n        }\n        if (f(cur.value)) {\n            return true;\n        }\n    }\n    return false;\n}\nexport function exists2(f, xs, ys) {\n    let cur1;\n    let cur2;\n    for (const iter1 = xs[Symbol.iterator](), iter2 = ys[Symbol.iterator]();;) {\n        cur1 = iter1.next();\n        cur2 = iter2.next();\n        if (cur1.done || cur2.done) {\n            break;\n        }\n        if (f(cur1.value, cur2.value)) {\n            return true;\n        }\n    }\n    return false;\n}\nexport function forAll(f, xs) {\n    return !exists((x) => !f(x), xs);\n}\nexport function forAll2(f, xs, ys) {\n    return !exists2((x, y) => !f(x, y), xs, ys);\n}\nexport function contains(i, xs) {\n    return exists((x) => equals(x, i), xs);\n}\nexport function filter(f, xs) {\n    return delay(() => unfold((iter) => {\n        let cur = iter.next();\n        while (!cur.done) {\n            if (f(cur.value)) {\n                return [cur.value, iter];\n            }\n            cur = iter.next();\n        }\n        return null;\n    }, xs[Symbol.iterator]()));\n}\nexport function where(f, xs) {\n    return filter(f, xs);\n}\nexport function fold(f, acc, xs) {\n    if (Array.isArray(xs) || ArrayBuffer.isView(xs)) {\n        return xs.reduce(f, acc);\n    }\n    else {\n        let cur;\n        for (let i = 0, iter = xs[Symbol.iterator]();; i++) {\n            cur = iter.next();\n            if (cur.done) {\n                break;\n            }\n            acc = f(acc, cur.value, i);\n        }\n        return acc;\n    }\n}\nexport function foldBack(f, xs, acc) {\n    const arr = Array.isArray(xs) || ArrayBuffer.isView(xs) ? xs : Array.from(xs);\n    for (let i = arr.length - 1; i >= 0; i--) {\n        acc = f(arr[i], acc, i);\n    }\n    return acc;\n}\nexport function fold2(f, acc, xs, ys) {\n    const iter1 = xs[Symbol.iterator]();\n    const iter2 = ys[Symbol.iterator]();\n    let cur1;\n    let cur2;\n    for (let i = 0;; i++) {\n        cur1 = iter1.next();\n        cur2 = iter2.next();\n        if (cur1.done || cur2.done) {\n            break;\n        }\n        acc = f(acc, cur1.value, cur2.value, i);\n    }\n    return acc;\n}\nexport function foldBack2(f, xs, ys, acc) {\n    const ar1 = Array.isArray(xs) || ArrayBuffer.isView(xs) ? xs : Array.from(xs);\n    const ar2 = Array.isArray(ys) || ArrayBuffer.isView(ys) ? ys : Array.from(ys);\n    for (let i = ar1.length - 1; i >= 0; i--) {\n        acc = f(ar1[i], ar2[i], acc, i);\n    }\n    return acc;\n}\nexport function tryHead(xs) {\n    const iter = xs[Symbol.iterator]();\n    const cur = iter.next();\n    return cur.done ? null : some(cur.value);\n}\nexport function head(xs) {\n    return __failIfNone(tryHead(xs));\n}\nexport function initialize(n, f) {\n    return delay(() => unfold((i) => i < n ? [f(i), i + 1] : null, 0));\n}\nexport function initializeInfinite(f) {\n    return delay(() => unfold((i) => [f(i), i + 1], 0));\n}\nexport function tryItem(i, xs) {\n    if (i < 0) {\n        return null;\n    }\n    if (Array.isArray(xs) || ArrayBuffer.isView(xs)) {\n        return i < xs.length ? some(xs[i]) : null;\n    }\n    for (let j = 0, iter = xs[Symbol.iterator]();; j++) {\n        const cur = iter.next();\n        if (cur.done) {\n            break;\n        }\n        if (j === i) {\n            return some(cur.value);\n        }\n    }\n    return null;\n}\nexport function item(i, xs) {\n    return __failIfNone(tryItem(i, xs));\n}\nexport function iterate(f, xs) {\n    fold((_, x) => (f(x), null), null, xs);\n}\nexport function iterate2(f, xs, ys) {\n    fold2((_, x, y) => (f(x, y), null), null, xs, ys);\n}\nexport function iterateIndexed(f, xs) {\n    fold((_, x, i) => (f(i !== null && i !== void 0 ? i : 0, x), null), null, xs);\n}\nexport function iterateIndexed2(f, xs, ys) {\n    fold2((_, x, y, i) => (f(i !== null && i !== void 0 ? i : 0, x, y), null), null, xs, ys);\n}\nexport function isEmpty(xs) {\n    const i = xs[Symbol.iterator]();\n    return i.next().done;\n}\nexport function tryLast(xs) {\n    return isEmpty(xs) ? null : some(reduce((_, x) => x, xs));\n}\nexport function last(xs) {\n    return __failIfNone(tryLast(xs));\n}\nexport function length(xs) {\n    return Array.isArray(xs) || ArrayBuffer.isView(xs)\n        ? xs.length\n        : fold((acc, _x) => acc + 1, 0, xs);\n}\nexport function map(f, xs) {\n    return delay(() => unfold((iter) => {\n        const cur = iter.next();\n        return !cur.done ? [f(cur.value), iter] : null;\n    }, xs[Symbol.iterator]()));\n}\nexport function mapIndexed(f, xs) {\n    return delay(() => {\n        let i = 0;\n        return unfold((iter) => {\n            const cur = iter.next();\n            return !cur.done ? [f(i++, cur.value), iter] : null;\n        }, xs[Symbol.iterator]());\n    });\n}\nexport function indexed(xs) {\n    return mapIndexed((i, x) => [i, x], xs);\n}\nexport function map2(f, xs, ys) {\n    return delay(() => {\n        const iter1 = xs[Symbol.iterator]();\n        const iter2 = ys[Symbol.iterator]();\n        return unfold(() => {\n            const cur1 = iter1.next();\n            const cur2 = iter2.next();\n            return !cur1.done && !cur2.done ? [f(cur1.value, cur2.value), null] : null;\n        }, undefined);\n    });\n}\nexport function mapIndexed2(f, xs, ys) {\n    return delay(() => {\n        let i = 0;\n        const iter1 = xs[Symbol.iterator]();\n        const iter2 = ys[Symbol.iterator]();\n        return unfold(() => {\n            const cur1 = iter1.next();\n            const cur2 = iter2.next();\n            return !cur1.done && !cur2.done ? [f(i++, cur1.value, cur2.value), null] : null;\n        }, undefined);\n    });\n}\nexport function map3(f, xs, ys, zs) {\n    return delay(() => {\n        const iter1 = xs[Symbol.iterator]();\n        const iter2 = ys[Symbol.iterator]();\n        const iter3 = zs[Symbol.iterator]();\n        return unfold(() => {\n            const cur1 = iter1.next();\n            const cur2 = iter2.next();\n            const cur3 = iter3.next();\n            return !cur1.done && !cur2.done && !cur3.done ? [f(cur1.value, cur2.value, cur3.value), null] : null;\n        }, undefined);\n    });\n}\nexport function mapFold(f, acc, xs, transform) {\n    const result = [];\n    let r;\n    let cur;\n    for (let i = 0, iter = xs[Symbol.iterator]();; i++) {\n        cur = iter.next();\n        if (cur.done) {\n            break;\n        }\n        [r, acc] = f(acc, cur.value);\n        result.push(r);\n    }\n    return transform !== void 0 ? [transform(result), acc] : [result, acc];\n}\nexport function mapFoldBack(f, xs, acc, transform) {\n    const arr = Array.isArray(xs) || ArrayBuffer.isView(xs) ? xs : Array.from(xs);\n    const result = [];\n    let r;\n    for (let i = arr.length - 1; i >= 0; i--) {\n        [r, acc] = f(arr[i], acc);\n        result.push(r);\n    }\n    return transform !== void 0 ? [transform(result), acc] : [result, acc];\n}\nexport function max(xs, comparer) {\n    const compareFn = comparer != null ? comparer.Compare : compare;\n    return reduce((acc, x) => compareFn(acc, x) === 1 ? acc : x, xs);\n}\nexport function maxBy(f, xs, comparer) {\n    const compareFn = comparer != null ? comparer.Compare : compare;\n    return reduce((acc, x) => compareFn(f(acc), f(x)) === 1 ? acc : x, xs);\n}\nexport function min(xs, comparer) {\n    const compareFn = comparer != null ? comparer.Compare : compare;\n    return reduce((acc, x) => compareFn(acc, x) === -1 ? acc : x, xs);\n}\nexport function minBy(f, xs, comparer) {\n    const compareFn = comparer != null ? comparer.Compare : compare;\n    return reduce((acc, x) => compareFn(f(acc), f(x)) === -1 ? acc : x, xs);\n}\nexport function pairwise(xs) {\n    return delay(() => {\n        const iter = xs[Symbol.iterator]();\n        const cur = iter.next();\n        if (cur.done) {\n            return empty();\n        }\n        const hd = cur.value;\n        const tl = tail(xs);\n        const ys = scan(([_, last], next) => [last, next], [hd, hd], tl);\n        return skip(1, ys);\n    });\n}\nexport function rangeChar(first, last) {\n    return delay(() => unfold((x) => x <= last ? [x, String.fromCharCode(x.charCodeAt(0) + 1)] : null, first));\n}\nexport function rangeLong(first, step, last, unsigned) {\n    const stepFn = makeLongRangeStepFunction(step, last, unsigned);\n    return delay(() => unfold(stepFn, first));\n}\nexport function rangeDecimal(first, step, last) {\n    const stepFn = makeDecimalRangeStepFunction(step, last);\n    return delay(() => unfold(stepFn, first));\n}\nexport function rangeNumber(first, step, last) {\n    if (step === 0) {\n        throw new Error(\"Step cannot be 0\");\n    }\n    return delay(() => unfold((x) => step > 0 && x <= last || step < 0 && x >= last ? [x, x + step] : null, first));\n}\nexport function readOnly(xs) {\n    return map((x) => x, xs);\n}\nexport function reduce(f, xs) {\n    if (Array.isArray(xs) || ArrayBuffer.isView(xs)) {\n        return xs.reduce(f);\n    }\n    const iter = xs[Symbol.iterator]();\n    let cur = iter.next();\n    if (cur.done) {\n        throw new Error(\"Seq was empty\");\n    }\n    let acc = cur.value;\n    while (true) {\n        cur = iter.next();\n        if (cur.done) {\n            break;\n        }\n        acc = f(acc, cur.value);\n    }\n    return acc;\n}\nexport function reduceBack(f, xs) {\n    const ar = Array.isArray(xs) || ArrayBuffer.isView(xs) ? xs : Array.from(xs);\n    if (ar.length === 0) {\n        throw new Error(\"Seq was empty\");\n    }\n    let acc = ar[ar.length - 1];\n    for (let i = ar.length - 2; i >= 0; i--) {\n        acc = f(ar[i], acc, i);\n    }\n    return acc;\n}\nexport function replicate(n, x) {\n    return initialize(n, () => x);\n}\nexport function reverse(xs) {\n    const ar = Array.isArray(xs) || ArrayBuffer.isView(xs) ? xs.slice(0) : Array.from(xs);\n    return ofArray(ar.reverse());\n}\nexport function scan(f, seed, xs) {\n    return delay(() => {\n        const iter = xs[Symbol.iterator]();\n        return unfold((acc) => {\n            if (acc == null) {\n                return [seed, seed];\n            }\n            const cur = iter.next();\n            if (!cur.done) {\n                acc = f(acc, cur.value);\n                return [acc, acc];\n            }\n            return null;\n        }, null);\n    });\n}\nexport function scanBack(f, xs, seed) {\n    return reverse(scan((acc, x) => f(x, acc), seed, reverse(xs)));\n}\nexport function singleton(y) {\n    return [y];\n}\nexport function skip(n, xs) {\n    return makeSeq(() => {\n        const iter = xs[Symbol.iterator]();\n        for (let i = 1; i <= n; i++) {\n            if (iter.next().done) {\n                throw new Error(\"Seq has not enough elements\");\n            }\n        }\n        return iter;\n    });\n}\nexport function skipWhile(f, xs) {\n    return delay(() => {\n        let hasPassed = false;\n        return filter((x) => hasPassed || (hasPassed = !f(x)), xs);\n    });\n}\nexport function sortWith(f, xs) {\n    const ys = Array.from(xs);\n    return ofArray(ys.sort(f));\n}\nexport function sum(xs, adder) {\n    return fold((acc, x) => adder.Add(acc, x), adder.GetZero(), xs);\n}\nexport function sumBy(f, xs, adder) {\n    return fold((acc, x) => adder.Add(acc, f(x)), adder.GetZero(), xs);\n}\nexport function tail(xs) {\n    return skip(1, xs);\n}\nexport function take(n, xs, truncate = false) {\n    return delay(() => {\n        const iter = xs[Symbol.iterator]();\n        return unfold((i) => {\n            if (i < n) {\n                const cur = iter.next();\n                if (!cur.done) {\n                    return [cur.value, i + 1];\n                }\n                if (!truncate) {\n                    throw new Error(\"Seq has not enough elements\");\n                }\n            }\n            return null;\n        }, 0);\n    });\n}\nexport function truncate(n, xs) {\n    return take(n, xs, true);\n}\nexport function takeWhile(f, xs) {\n    return delay(() => {\n        const iter = xs[Symbol.iterator]();\n        return unfold(() => {\n            const cur = iter.next();\n            if (!cur.done && f(cur.value)) {\n                return [cur.value, null];\n            }\n            return null;\n        }, 0);\n    });\n}\nexport function tryFind(f, xs, defaultValue) {\n    for (let i = 0, iter = xs[Symbol.iterator]();; i++) {\n        const cur = iter.next();\n        if (cur.done) {\n            break;\n        }\n        if (f(cur.value, i)) {\n            return some(cur.value);\n        }\n    }\n    return defaultValue === void 0 ? null : some(defaultValue);\n}\nexport function find(f, xs) {\n    return __failIfNone(tryFind(f, xs));\n}\nexport function tryFindBack(f, xs, defaultValue) {\n    const arr = Array.isArray(xs) || ArrayBuffer.isView(xs) ? xs.slice(0) : Array.from(xs);\n    return tryFind(f, arr.reverse(), defaultValue);\n}\nexport function findBack(f, xs) {\n    return __failIfNone(tryFindBack(f, xs));\n}\nexport function tryFindIndex(f, xs) {\n    for (let i = 0, iter = xs[Symbol.iterator]();; i++) {\n        const cur = iter.next();\n        if (cur.done) {\n            break;\n        }\n        if (f(cur.value, i)) {\n            return i;\n        }\n    }\n    return null;\n}\nexport function findIndex(f, xs) {\n    return __failIfNone(tryFindIndex(f, xs));\n}\nexport function tryFindIndexBack(f, xs) {\n    const arr = Array.isArray(xs) || ArrayBuffer.isView(xs) ? xs.slice(0) : Array.from(xs);\n    for (let i = arr.length - 1; i >= 0; i--) {\n        if (f(arr[i], i)) {\n            return i;\n        }\n    }\n    return null;\n}\nexport function findIndexBack(f, xs) {\n    return __failIfNone(tryFindIndexBack(f, xs));\n}\nexport function tryPick(f, xs) {\n    for (let i = 0, iter = xs[Symbol.iterator]();; i++) {\n        const cur = iter.next();\n        if (cur.done) {\n            break;\n        }\n        const y = f(cur.value, i);\n        if (y != null) {\n            return y;\n        }\n    }\n    return null;\n}\nexport function pick(f, xs) {\n    return __failIfNone(tryPick(f, xs));\n}\nexport function unfold(f, fst) {\n    return makeSeq(() => {\n        // Capture a copy of the first value in the closure\n        // so the sequence is restarted every time, see #1230\n        let acc = fst;\n        const iter = {\n            next: () => {\n                const res = f(acc);\n                if (res != null) {\n                    const v = value(res);\n                    if (v != null) {\n                        acc = v[1];\n                        return { done: false, value: v[0] };\n                    }\n                }\n                return { done: true, value: undefined };\n            },\n        };\n        return iter;\n    });\n}\nexport function zip(xs, ys) {\n    return map2((x, y) => [x, y], xs, ys);\n}\nexport function zip3(xs, ys, zs) {\n    return map3((x, y, z) => [x, y, z], xs, ys, zs);\n}\nexport function windowed(windowSize, source) {\n    if (windowSize <= 0) {\n        throw new Error(\"windowSize must be positive\");\n    }\n    return makeSeq(() => {\n        let window = [];\n        const iter = source[Symbol.iterator]();\n        const iter2 = {\n            next: () => {\n                let cur;\n                while (window.length < windowSize) {\n                    if ((cur = iter.next()).done) {\n                        return { done: true, value: undefined };\n                    }\n                    window.push(cur.value);\n                }\n                const value = window;\n                window = window.slice(1);\n                return { done: false, value };\n            },\n        };\n        return iter2;\n    });\n}\nexport function transpose(source) {\n    return makeSeq(() => {\n        const iters = Array.from(source, (x) => x[Symbol.iterator]());\n        const iter = {\n            next: () => {\n                if (iters.length === 0) {\n                    return { done: true, value: undefined }; // empty sequence\n                }\n                const results = Array.from(iters, (iter) => iter.next());\n                if (results[0].done) {\n                    if (!results.every((x) => x.done)) {\n                        throw new Error(\"Sequences have different lengths\");\n                    }\n                    return { done: true, value: undefined };\n                }\n                else {\n                    if (!results.every((x) => !x.done)) {\n                        throw new Error(\"Sequences have different lengths\");\n                    }\n                    const values = results.map((x) => x.value);\n                    return { done: false, value: values };\n                }\n            },\n        };\n        return iter;\n    });\n}\n//# sourceMappingURL=Seq.js.map","/**\n * DateTimeOffset functions.\n *\n * Note: Date instances are always DateObjects in local\n * timezone (because JS dates are all kinds of messed up).\n * A local date returns UTC epoc when `.getTime()` is called.\n *\n * Basically; invariant: date.getTime() always return UTC time.\n */\nimport { fromValue, ticksToUnixEpochMilliseconds, unixEpochMillisecondsToTicks } from \"./Long\";\nimport { compareDates, dateOffset, padWithZeros } from \"./Util\";\nexport const offsetRegex = /(?:Z|[+-](\\d+):?([0-5]?\\d)?)\\s*$/;\nexport function dateOffsetToString(offset) {\n    const isMinus = offset < 0;\n    offset = Math.abs(offset);\n    const hours = ~~(offset / 3600000);\n    const minutes = (offset % 3600000) / 60000;\n    return (isMinus ? \"-\" : \"+\") +\n        padWithZeros(hours, 2) + \":\" +\n        padWithZeros(minutes, 2);\n}\nexport function dateToHalfUTCString(date, half) {\n    const str = date.toISOString();\n    return half === \"first\"\n        ? str.substring(0, str.indexOf(\"T\"))\n        : str.substring(str.indexOf(\"T\") + 1, str.length - 1);\n}\nfunction dateToISOString(d, utc) {\n    if (utc) {\n        return d.toISOString();\n    }\n    else {\n        // JS Date is always local\n        const printOffset = d.kind == null ? true : d.kind === 2 /* Local */;\n        return padWithZeros(d.getFullYear(), 4) + \"-\" +\n            padWithZeros(d.getMonth() + 1, 2) + \"-\" +\n            padWithZeros(d.getDate(), 2) + \"T\" +\n            padWithZeros(d.getHours(), 2) + \":\" +\n            padWithZeros(d.getMinutes(), 2) + \":\" +\n            padWithZeros(d.getSeconds(), 2) + \".\" +\n            padWithZeros(d.getMilliseconds(), 3) +\n            (printOffset ? dateOffsetToString(d.getTimezoneOffset() * -60000) : \"\");\n    }\n}\nfunction dateToISOStringWithOffset(dateWithOffset, offset) {\n    const str = dateWithOffset.toISOString();\n    return str.substring(0, str.length - 1) + dateOffsetToString(offset);\n}\nfunction dateToStringWithCustomFormat(date, format, utc) {\n    return format.replace(/(\\w)\\1*/g, (match) => {\n        let rep = Number.NaN;\n        switch (match.substring(0, 1)) {\n            case \"y\":\n                const y = utc ? date.getUTCFullYear() : date.getFullYear();\n                rep = match.length < 4 ? y % 100 : y;\n                break;\n            case \"M\":\n                rep = (utc ? date.getUTCMonth() : date.getMonth()) + 1;\n                break;\n            case \"d\":\n                rep = utc ? date.getUTCDate() : date.getDate();\n                break;\n            case \"H\":\n                rep = utc ? date.getUTCHours() : date.getHours();\n                break;\n            case \"h\":\n                const h = utc ? date.getUTCHours() : date.getHours();\n                rep = h > 12 ? h % 12 : h;\n                break;\n            case \"m\":\n                rep = utc ? date.getUTCMinutes() : date.getMinutes();\n                break;\n            case \"s\":\n                rep = utc ? date.getUTCSeconds() : date.getSeconds();\n                break;\n            case \"f\":\n                rep = utc ? date.getUTCMilliseconds() : date.getMilliseconds();\n                break;\n        }\n        if (Number.isNaN(rep)) {\n            return match;\n        }\n        else {\n            return (rep < 10 && match.length > 1) ? \"0\" + rep : \"\" + rep;\n        }\n    });\n}\nfunction dateToStringWithOffset(date, format) {\n    var _a, _b, _c;\n    const d = new Date(date.getTime() + ((_a = date.offset) !== null && _a !== void 0 ? _a : 0));\n    if (typeof format !== \"string\") {\n        return d.toISOString().replace(/\\.\\d+/, \"\").replace(/[A-Z]|\\.\\d+/g, \" \") + dateOffsetToString(((_b = date.offset) !== null && _b !== void 0 ? _b : 0));\n    }\n    else if (format.length === 1) {\n        switch (format) {\n            case \"D\":\n            case \"d\": return dateToHalfUTCString(d, \"first\");\n            case \"T\":\n            case \"t\": return dateToHalfUTCString(d, \"second\");\n            case \"O\":\n            case \"o\": return dateToISOStringWithOffset(d, ((_c = date.offset) !== null && _c !== void 0 ? _c : 0));\n            default: throw new Error(\"Unrecognized Date print format\");\n        }\n    }\n    else {\n        return dateToStringWithCustomFormat(d, format, true);\n    }\n}\nfunction dateToStringWithKind(date, format) {\n    const utc = date.kind === 1 /* UTC */;\n    if (typeof format !== \"string\") {\n        return utc ? date.toUTCString() : date.toLocaleString();\n    }\n    else if (format.length === 1) {\n        switch (format) {\n            case \"D\":\n            case \"d\":\n                return utc ? dateToHalfUTCString(date, \"first\") : date.toLocaleDateString();\n            case \"T\":\n            case \"t\":\n                return utc ? dateToHalfUTCString(date, \"second\") : date.toLocaleTimeString();\n            case \"O\":\n            case \"o\":\n                return dateToISOString(date, utc);\n            default:\n                throw new Error(\"Unrecognized Date print format\");\n        }\n    }\n    else {\n        return dateToStringWithCustomFormat(date, format, utc);\n    }\n}\nexport function toString(date, format, _provider) {\n    return date.offset != null\n        ? dateToStringWithOffset(date, format)\n        : dateToStringWithKind(date, format);\n}\nexport default function DateTime(value, kind) {\n    const d = new Date(value);\n    d.kind = (kind == null ? 0 /* Unspecified */ : kind) | 0;\n    return d;\n}\nexport function fromTicks(ticks, kind) {\n    ticks = fromValue(ticks);\n    kind = kind != null ? kind : 0 /* Unspecified */;\n    let date = DateTime(ticksToUnixEpochMilliseconds(ticks), kind);\n    // Ticks are local to offset (in this case, either UTC or Local/Unknown).\n    // If kind is anything but UTC, that means that the tick number was not\n    // in utc, thus getTime() cannot return UTC, and needs to be shifted.\n    if (kind !== 1 /* UTC */) {\n        date = DateTime(date.getTime() - dateOffset(date), kind);\n    }\n    return date;\n}\nexport function fromDateTimeOffset(date, kind) {\n    var _a;\n    switch (kind) {\n        case 1 /* UTC */: return DateTime(date.getTime(), 1 /* UTC */);\n        case 2 /* Local */: return DateTime(date.getTime(), 2 /* Local */);\n        default:\n            const d = DateTime(date.getTime() + ((_a = date.offset) !== null && _a !== void 0 ? _a : 0), kind);\n            return DateTime(d.getTime() - dateOffset(d), kind);\n    }\n}\nexport function getTicks(date) {\n    return unixEpochMillisecondsToTicks(date.getTime(), dateOffset(date));\n}\nexport function minValue() {\n    // This is \"0001-01-01T00:00:00.000Z\", actual JS min value is -8640000000000000\n    return DateTime(-62135596800000, 0 /* Unspecified */);\n}\nexport function maxValue() {\n    // This is \"9999-12-31T23:59:59.999Z\", actual JS max value is 8640000000000000\n    return DateTime(253402300799999, 0 /* Unspecified */);\n}\nexport function parseRaw(str) {\n    let date = new Date(str);\n    if (isNaN(date.getTime())) {\n        // Try to check strings JS Date cannot parse (see #1045, #1422)\n        // tslint:disable-next-line:max-line-length\n        const m = /^\\s*(\\d+[^\\w\\s:]\\d+[^\\w\\s:]\\d+)?\\s*(\\d+:\\d+(?::\\d+(?:\\.\\d+)?)?)?\\s*([AaPp][Mm])?\\s*([+-]\\d+(?::\\d+)?)?\\s*$/.exec(str);\n        if (m != null) {\n            let baseDate;\n            let timeInSeconds = 0;\n            if (m[2] != null) {\n                const timeParts = m[2].split(\":\");\n                timeInSeconds =\n                    parseInt(timeParts[0], 10) * 3600 +\n                        parseInt(timeParts[1] || \"0\", 10) * 60 +\n                        parseFloat(timeParts[2] || \"0\");\n                if (m[3] != null && m[3].toUpperCase() === \"PM\") {\n                    timeInSeconds += 720;\n                }\n            }\n            if (m[4] != null) { // There's an offset, parse as UTC\n                if (m[1] != null) {\n                    baseDate = new Date(m[1] + \" UTC\");\n                }\n                else {\n                    const d = new Date();\n                    baseDate = new Date(d.getUTCFullYear() + \"/\" + (d.getUTCMonth() + 1) + \"/\" + d.getUTCDate());\n                }\n                const offsetParts = m[4].substr(1).split(\":\");\n                let offsetInMinutes = parseInt(offsetParts[0], 10) * 60 + parseInt(offsetParts[1] || \"0\", 10);\n                if (m[4][0] === \"+\") {\n                    offsetInMinutes *= -1;\n                }\n                timeInSeconds += offsetInMinutes * 60;\n            }\n            else {\n                if (m[1] != null) {\n                    baseDate = new Date(m[1]);\n                }\n                else {\n                    const d = new Date();\n                    baseDate = new Date(d.getFullYear() + \"/\" + (d.getMonth() + 1) + \"/\" + d.getDate());\n                }\n            }\n            date = new Date(baseDate.getTime() + timeInSeconds * 1000);\n            // correct for daylight savings time\n            date = new Date(date.getTime() + (date.getTimezoneOffset() - baseDate.getTimezoneOffset()) * 60000);\n        }\n        else {\n            throw new Error(\"The string is not a valid Date.\");\n        }\n    }\n    return date;\n}\nexport function parse(str, detectUTC = false) {\n    const date = parseRaw(str);\n    const offset = offsetRegex.exec(str);\n    // .NET always parses DateTime as Local if there's offset info (even \"Z\")\n    // Newtonsoft.Json uses UTC if the offset is \"Z\"\n    const kind = offset != null\n        ? (detectUTC && offset[0] === \"Z\" ? 1 /* UTC */ : 2 /* Local */)\n        : 0 /* Unspecified */;\n    return DateTime(date.getTime(), kind);\n}\nexport function tryParse(v, _refValue) {\n    try {\n        // if value is null or whitespace, parsing fails\n        if (v == null || v.trim() === \"\") {\n            return [false, minValue()];\n        }\n        return [true, parse(v)];\n    }\n    catch (_err) {\n        return [false, minValue()];\n    }\n}\nexport function create(year, month, day, h = 0, m = 0, s = 0, ms = 0, kind) {\n    const dateValue = kind === 1 /* UTC */\n        ? Date.UTC(year, month - 1, day, h, m, s, ms)\n        : new Date(year, month - 1, day, h, m, s, ms).getTime();\n    if (isNaN(dateValue)) {\n        throw new Error(\"The parameters describe an unrepresentable Date.\");\n    }\n    const date = DateTime(dateValue, kind);\n    if (year <= 99) {\n        date.setFullYear(year, month - 1, day);\n    }\n    return date;\n}\nexport function now() {\n    return DateTime(Date.now(), 2 /* Local */);\n}\nexport function utcNow() {\n    return DateTime(Date.now(), 1 /* UTC */);\n}\nexport function today() {\n    return date(now());\n}\nexport function isLeapYear(year) {\n    return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;\n}\nexport function daysInMonth(year, month) {\n    return month === 2\n        ? (isLeapYear(year) ? 29 : 28)\n        : (month >= 8 ? (month % 2 === 0 ? 31 : 30) : (month % 2 === 0 ? 30 : 31));\n}\nexport function toUniversalTime(date) {\n    return date.kind === 1 /* UTC */ ? date : DateTime(date.getTime(), 1 /* UTC */);\n}\nexport function toLocalTime(date) {\n    return date.kind === 2 /* Local */ ? date : DateTime(date.getTime(), 2 /* Local */);\n}\nexport function specifyKind(d, kind) {\n    return create(year(d), month(d), day(d), hour(d), minute(d), second(d), millisecond(d), kind);\n}\nexport function timeOfDay(d) {\n    return hour(d) * 3600000\n        + minute(d) * 60000\n        + second(d) * 1000\n        + millisecond(d);\n}\nexport function date(d) {\n    return create(year(d), month(d), day(d), 0, 0, 0, 0, d.kind);\n}\nexport function day(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCDate() : d.getDate();\n}\nexport function hour(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCHours() : d.getHours();\n}\nexport function millisecond(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCMilliseconds() : d.getMilliseconds();\n}\nexport function minute(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCMinutes() : d.getMinutes();\n}\nexport function month(d) {\n    return (d.kind === 1 /* UTC */ ? d.getUTCMonth() : d.getMonth()) + 1;\n}\nexport function second(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCSeconds() : d.getSeconds();\n}\nexport function year(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCFullYear() : d.getFullYear();\n}\nexport function dayOfWeek(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCDay() : d.getDay();\n}\nexport function dayOfYear(d) {\n    const _year = year(d);\n    const _month = month(d);\n    let _day = day(d);\n    for (let i = 1; i < _month; i++) {\n        _day += daysInMonth(_year, i);\n    }\n    return _day;\n}\nexport function add(d, ts) {\n    const newDate = DateTime(d.getTime() + ts, d.kind);\n    if (d.kind === 2 /* Local */) {\n        const oldTzOffset = d.getTimezoneOffset();\n        const newTzOffset = newDate.getTimezoneOffset();\n        return oldTzOffset !== newTzOffset\n            ? DateTime(newDate.getTime() + (newTzOffset - oldTzOffset) * 60000, d.kind)\n            : newDate;\n    }\n    else {\n        return newDate;\n    }\n}\nexport function addDays(d, v) {\n    return add(d, v * 86400000);\n}\nexport function addHours(d, v) {\n    return add(d, v * 3600000);\n}\nexport function addMinutes(d, v) {\n    return add(d, v * 60000);\n}\nexport function addSeconds(d, v) {\n    return add(d, v * 1000);\n}\nexport function addMilliseconds(d, v) {\n    return add(d, v);\n}\nexport function addYears(d, v) {\n    const newMonth = month(d);\n    const newYear = year(d) + v;\n    const _daysInMonth = daysInMonth(newYear, newMonth);\n    const newDay = Math.min(_daysInMonth, day(d));\n    return create(newYear, newMonth, newDay, hour(d), minute(d), second(d), millisecond(d), d.kind);\n}\nexport function addMonths(d, v) {\n    let newMonth = month(d) + v;\n    let newMonth_ = 0;\n    let yearOffset = 0;\n    if (newMonth > 12) {\n        newMonth_ = newMonth % 12;\n        yearOffset = Math.floor(newMonth / 12);\n        newMonth = newMonth_;\n    }\n    else if (newMonth < 1) {\n        newMonth_ = 12 + newMonth % 12;\n        yearOffset = Math.floor(newMonth / 12) + (newMonth_ === 12 ? -1 : 0);\n        newMonth = newMonth_;\n    }\n    const newYear = year(d) + yearOffset;\n    const _daysInMonth = daysInMonth(newYear, newMonth);\n    const newDay = Math.min(_daysInMonth, day(d));\n    return create(newYear, newMonth, newDay, hour(d), minute(d), second(d), millisecond(d), d.kind);\n}\nexport function subtract(d, that) {\n    return typeof that === \"number\"\n        ? add(d, -that)\n        : d.getTime() - that.getTime();\n}\nexport function toLongDateString(d) {\n    return d.toDateString();\n}\nexport function toShortDateString(d) {\n    return d.toLocaleDateString();\n}\nexport function toLongTimeString(d) {\n    return d.toLocaleTimeString();\n}\nexport function toShortTimeString(d) {\n    return d.toLocaleTimeString().replace(/:\\d\\d(?!:)/, \"\");\n}\nexport function equals(d1, d2) {\n    return d1.getTime() === d2.getTime();\n}\nexport const compare = compareDates;\nexport const compareTo = compareDates;\nexport function op_Addition(x, y) {\n    return add(x, y);\n}\nexport function op_Subtraction(x, y) {\n    return subtract(x, y);\n}\nexport function isDaylightSavingTime(x) {\n    const jan = new Date(x.getFullYear(), 0, 1);\n    const jul = new Date(x.getFullYear(), 6, 1);\n    return isDST(jan.getTimezoneOffset(), jul.getTimezoneOffset(), x.getTimezoneOffset());\n}\nfunction isDST(janOffset, julOffset, tOffset) {\n    return Math.min(janOffset, julOffset) === tOffset;\n}\n//# sourceMappingURL=Date.js.map","export function create(pattern, options = 0) {\n    // Supported RegexOptions\n    // * IgnoreCase:  0x0001\n    // * Multiline:   0x0002\n    // * Singleline:  0x0010\n    // * ECMAScript:  0x0100 (ignored)\n    if ((options & ~(1 ^ 2 ^ 16 ^ 256)) !== 0) {\n        throw new Error(\"RegexOptions only supports: IgnoreCase, Multiline, Singleline and ECMAScript\");\n    }\n    let flags = \"g\";\n    flags += options & 1 ? \"i\" : \"\"; // 0x0001 RegexOptions.IgnoreCase\n    flags += options & 2 ? \"m\" : \"\";\n    flags += options & 16 ? \"s\" : \"\";\n    return new RegExp(pattern, flags);\n}\n// From http://stackoverflow.com/questions/3446170/escape-string-for-use-in-javascript-regex\nexport function escape(str) {\n    return str.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, \"\\\\$&\");\n}\nexport function unescape(str) {\n    return str.replace(/\\\\([\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|])/g, \"$1\");\n}\nexport function isMatch(str, pattern, options = 0) {\n    let reg;\n    reg = str instanceof RegExp\n        ? (reg = str, str = pattern, reg.lastIndex = options, reg)\n        : reg = create(pattern, options);\n    return reg.test(str);\n}\nexport function match(str, pattern, options = 0) {\n    let reg;\n    reg = str instanceof RegExp\n        ? (reg = str, str = pattern, reg.lastIndex = options, reg)\n        : reg = create(pattern, options);\n    return reg.exec(str);\n}\nexport function matches(str, pattern, options = 0) {\n    let reg;\n    reg = str instanceof RegExp\n        ? (reg = str, str = pattern, reg.lastIndex = options, reg)\n        : reg = create(pattern, options);\n    if (!reg.global) {\n        throw new Error(\"Non-global RegExp\"); // Prevent infinite loop\n    }\n    let m = reg.exec(str);\n    const matches = [];\n    while (m !== null) {\n        matches.push(m);\n        m = reg.exec(str);\n    }\n    return matches;\n}\nexport function options(reg) {\n    let options = 256; // ECMAScript\n    options |= reg.ignoreCase ? 1 : 0;\n    options |= reg.multiline ? 2 : 0;\n    return options;\n}\nexport function replace(reg, input, replacement, limit, offset = 0) {\n    function replacer() {\n        let res = arguments[0];\n        if (limit) {\n            limit--;\n            const match = [];\n            const len = arguments.length;\n            for (let i = 0; i < len - 2; i++) {\n                match.push(arguments[i]);\n            }\n            match.index = arguments[len - 2];\n            match.input = arguments[len - 1];\n            res = replacement(match);\n        }\n        return res;\n    }\n    if (typeof reg === \"string\") {\n        const tmp = reg;\n        reg = create(input, limit !== null && limit !== void 0 ? limit : 0);\n        input = tmp;\n        limit = undefined;\n    }\n    if (typeof replacement === \"function\") {\n        limit = limit == null ? -1 : limit;\n        return input.substring(0, offset) + input.substring(offset).replace(reg, replacer);\n    }\n    else {\n        // $0 doesn't work with JS regex, see #1155\n        replacement = replacement.replace(/\\$0/g, (_s) => \"$&\");\n        if (limit != null) {\n            let m;\n            const sub1 = input.substring(offset);\n            const _matches = matches(reg, sub1);\n            const sub2 = matches.length > limit ? (m = _matches[limit - 1], sub1.substring(0, m.index + m[0].length)) : sub1;\n            return input.substring(0, offset) + sub2.replace(reg, replacement)\n                + input.substring(offset + sub2.length);\n        }\n        else {\n            return input.replace(reg, replacement);\n        }\n    }\n}\nexport function split(reg, input, limit, offset = 0) {\n    if (typeof reg === \"string\") {\n        const tmp = reg;\n        reg = create(input, limit !== null && limit !== void 0 ? limit : 0);\n        input = tmp;\n        limit = undefined;\n    }\n    input = input.substring(offset);\n    return input.split(reg, limit);\n}\n//# sourceMappingURL=RegExp.js.map","import { toString as dateToString } from \"./Date\";\nimport Decimal from \"./Decimal\";\nimport Long, * as _Long from \"./Long\";\nimport { escape } from \"./RegExp\";\nconst fsFormatRegExp = /(^|[^%])%([0+\\- ]*)(\\d+)?(?:\\.(\\d+))?(\\w)/;\nconst formatRegExp = /\\{(\\d+)(,-?\\d+)?(?:\\:([a-zA-Z])(\\d{0,2})|\\:(.+?))?\\}/g;\n// RFC 4122 compliant. From https://stackoverflow.com/a/13653180/3922220\n// const guidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/;\n// Relax GUID parsing, see #1637\nconst guidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/;\n// These are used for formatting and only take longs and decimals into account (no bigint)\nfunction isNumeric(x) {\n    return typeof x === \"number\" || x instanceof Long || x instanceof Decimal;\n}\nfunction isLessThan(x, y) {\n    if (x instanceof Long) {\n        return _Long.compare(x, y) < 0;\n    }\n    else if (x instanceof Decimal) {\n        return x.cmp(y) < 0;\n    }\n    else {\n        return x < y;\n    }\n}\nfunction multiply(x, y) {\n    if (x instanceof Long) {\n        return _Long.op_Multiply(x, y);\n    }\n    else if (x instanceof Decimal) {\n        return x.mul(y);\n    }\n    else {\n        return x * y;\n    }\n}\nfunction toFixed(x, dp) {\n    if (x instanceof Long) {\n        return String(x) + (0).toFixed(dp).substr(1);\n    }\n    else {\n        return x.toFixed(dp);\n    }\n}\nfunction toPrecision(x, sd) {\n    if (x instanceof Long) {\n        return String(x) + (0).toPrecision(sd).substr(1);\n    }\n    else {\n        return x.toPrecision(sd);\n    }\n}\nfunction toExponential(x, dp) {\n    if (x instanceof Long) {\n        return String(x) + (0).toExponential(dp).substr(1);\n    }\n    else {\n        return x.toExponential(dp);\n    }\n}\nfunction cmp(x, y, ic) {\n    function isIgnoreCase(i) {\n        return i === true ||\n            i === 1 /* CurrentCultureIgnoreCase */ ||\n            i === 3 /* InvariantCultureIgnoreCase */ ||\n            i === 5 /* OrdinalIgnoreCase */;\n    }\n    function isOrdinal(i) {\n        return i === 4 /* Ordinal */ ||\n            i === 5 /* OrdinalIgnoreCase */;\n    }\n    if (x == null) {\n        return y == null ? 0 : -1;\n    }\n    if (y == null) {\n        return 1;\n    } // everything is bigger than null\n    if (isOrdinal(ic)) {\n        if (isIgnoreCase(ic)) {\n            x = x.toLowerCase();\n            y = y.toLowerCase();\n        }\n        return (x === y) ? 0 : (x < y ? -1 : 1);\n    }\n    else {\n        if (isIgnoreCase(ic)) {\n            x = x.toLocaleLowerCase();\n            y = y.toLocaleLowerCase();\n        }\n        return x.localeCompare(y);\n    }\n}\nexport function compare(...args) {\n    switch (args.length) {\n        case 2: return cmp(args[0], args[1], false);\n        case 3: return cmp(args[0], args[1], args[2]);\n        case 4: return cmp(args[0], args[1], args[2] === true);\n        case 5: return cmp(args[0].substr(args[1], args[4]), args[2].substr(args[3], args[4]), false);\n        case 6: return cmp(args[0].substr(args[1], args[4]), args[2].substr(args[3], args[4]), args[5]);\n        case 7: return cmp(args[0].substr(args[1], args[4]), args[2].substr(args[3], args[4]), args[5] === true);\n        default: throw new Error(\"String.compare: Unsupported number of parameters\");\n    }\n}\nexport function compareOrdinal(x, y) {\n    return cmp(x, y, 4 /* Ordinal */);\n}\nexport function compareTo(x, y) {\n    return cmp(x, y, 0 /* CurrentCulture */);\n}\nexport function startsWith(str, pattern, ic) {\n    if (str.length >= pattern.length) {\n        return cmp(str.substr(0, pattern.length), pattern, ic) === 0;\n    }\n    return false;\n}\nexport function indexOfAny(str, anyOf, ...args) {\n    if (str == null || str === \"\") {\n        return -1;\n    }\n    const startIndex = (args.length > 0) ? args[0] : 0;\n    if (startIndex < 0) {\n        throw new Error(\"Start index cannot be negative\");\n    }\n    const length = (args.length > 1) ? args[1] : str.length - startIndex;\n    if (length < 0) {\n        throw new Error(\"Length cannot be negative\");\n    }\n    if (length > str.length - startIndex) {\n        throw new Error(\"Invalid startIndex and length\");\n    }\n    str = str.substr(startIndex, length);\n    for (const c of anyOf) {\n        const index = str.indexOf(c);\n        if (index > -1) {\n            return index + startIndex;\n        }\n    }\n    return -1;\n}\nfunction toHex(x) {\n    if (x instanceof Long) {\n        return _Long.toString(x.unsigned ? x : _Long.fromBytes(_Long.toBytes(x), true), 16);\n    }\n    else {\n        return (Number(x) >>> 0).toString(16);\n    }\n}\nexport function printf(input) {\n    return {\n        input,\n        cont: fsFormat(input),\n    };\n}\nexport function toConsole(arg) {\n    // Don't remove the lambda here, see #1357\n    return arg.cont((x) => { console.log(x); });\n}\nexport function toConsoleError(arg) {\n    return arg.cont((x) => { console.error(x); });\n}\nexport function toText(arg) {\n    return arg.cont((x) => x);\n}\nexport function toFail(arg) {\n    return arg.cont((x) => { throw new Error(x); });\n}\nfunction formatOnce(str2, rep) {\n    return str2.replace(fsFormatRegExp, (_, prefix, flags, padLength, precision, format) => {\n        let sign = \"\";\n        if (isNumeric(rep)) {\n            if (format.toLowerCase() !== \"x\") {\n                if (isLessThan(rep, 0)) {\n                    rep = multiply(rep, -1);\n                    sign = \"-\";\n                }\n                else {\n                    if (flags.indexOf(\" \") >= 0) {\n                        sign = \" \";\n                    }\n                    else if (flags.indexOf(\"+\") >= 0) {\n                        sign = \"+\";\n                    }\n                }\n            }\n            precision = precision == null ? null : parseInt(precision, 10);\n            switch (format) {\n                case \"f\":\n                case \"F\":\n                    precision = precision != null ? precision : 6;\n                    rep = toFixed(rep, precision);\n                    break;\n                case \"g\":\n                case \"G\":\n                    rep = precision != null ? toPrecision(rep, precision) : toPrecision(rep);\n                    break;\n                case \"e\":\n                case \"E\":\n                    rep = precision != null ? toExponential(rep, precision) : toExponential(rep);\n                    break;\n                case \"x\":\n                    rep = toHex(rep);\n                    break;\n                case \"X\":\n                    rep = toHex(rep).toUpperCase();\n                    break;\n                default: // AOid\n                    rep = String(rep);\n                    break;\n            }\n        }\n        padLength = parseInt(padLength, 10);\n        if (!isNaN(padLength)) {\n            const zeroFlag = flags.indexOf(\"0\") >= 0; // Use '0' for left padding\n            const minusFlag = flags.indexOf(\"-\") >= 0; // Right padding\n            const ch = minusFlag || !zeroFlag ? \" \" : \"0\";\n            if (ch === \"0\") {\n                rep = padLeft(rep, padLength - sign.length, ch, minusFlag);\n                rep = sign + rep;\n            }\n            else {\n                rep = padLeft(sign + rep, padLength, ch, minusFlag);\n            }\n        }\n        else {\n            rep = sign + rep;\n        }\n        const once = prefix + rep;\n        return once.replace(/%/g, \"%%\");\n    });\n}\nfunction createPrinter(str, cont) {\n    return (...args) => {\n        // Make a copy as the function may be used several times\n        let strCopy = str;\n        for (const arg of args) {\n            strCopy = formatOnce(strCopy, arg);\n        }\n        return fsFormatRegExp.test(strCopy)\n            ? createPrinter(strCopy, cont)\n            : cont(strCopy.replace(/%%/g, \"%\"));\n    };\n}\nexport function fsFormat(str) {\n    return (cont) => {\n        return fsFormatRegExp.test(str)\n            ? createPrinter(str, cont)\n            : cont(str);\n    };\n}\nexport function format(str, ...args) {\n    if (typeof str === \"object\" && args.length > 0) {\n        // Called with culture info\n        str = args[0];\n        args.shift();\n    }\n    return str.replace(formatRegExp, (_, idx, padLength, format, precision, pattern) => {\n        let rep = args[idx];\n        if (isNumeric(rep)) {\n            precision = precision == null ? null : parseInt(precision, 10);\n            switch (format) {\n                case \"f\":\n                case \"F\":\n                    precision = precision != null ? precision : 2;\n                    rep = toFixed(rep, precision);\n                    break;\n                case \"g\":\n                case \"G\":\n                    rep = precision != null ? toPrecision(rep, precision) : toPrecision(rep);\n                    break;\n                case \"e\":\n                case \"E\":\n                    rep = precision != null ? toExponential(rep, precision) : toExponential(rep);\n                    break;\n                case \"p\":\n                case \"P\":\n                    precision = precision != null ? precision : 2;\n                    rep = toFixed(multiply(rep, 100), precision) + \" %\";\n                    break;\n                case \"d\":\n                case \"D\":\n                    rep = precision != null ? padLeft(String(rep), precision, \"0\") : String(rep);\n                    break;\n                case \"x\":\n                case \"X\":\n                    rep = precision != null ? padLeft(toHex(rep), precision, \"0\") : toHex(rep);\n                    if (format === \"X\") {\n                        rep = rep.toUpperCase();\n                    }\n                    break;\n                default:\n                    if (pattern) {\n                        let sign = \"\";\n                        rep = pattern.replace(/(0+)(\\.0+)?/, (_, intPart, decimalPart) => {\n                            if (isLessThan(rep, 0)) {\n                                rep = multiply(rep, -1);\n                                sign = \"-\";\n                            }\n                            rep = toFixed(rep, decimalPart != null ? decimalPart.length - 1 : 0);\n                            return padLeft(rep, (intPart || \"\").length - sign.length + (decimalPart != null ? decimalPart.length : 0), \"0\");\n                        });\n                        rep = sign + rep;\n                    }\n            }\n        }\n        else if (rep instanceof Date) {\n            rep = dateToString(rep, pattern || format);\n        }\n        padLength = parseInt((padLength || \" \").substring(1), 10);\n        if (!isNaN(padLength)) {\n            rep = padLeft(String(rep), Math.abs(padLength), \" \", padLength < 0);\n        }\n        return rep;\n    });\n}\nexport function endsWith(str, search) {\n    const idx = str.lastIndexOf(search);\n    return idx >= 0 && idx === str.length - search.length;\n}\nexport function initialize(n, f) {\n    if (n < 0) {\n        throw new Error(\"String length must be non-negative\");\n    }\n    const xs = new Array(n);\n    for (let i = 0; i < n; i++) {\n        xs[i] = f(i);\n    }\n    return xs.join(\"\");\n}\nexport function insert(str, startIndex, value) {\n    if (startIndex < 0 || startIndex > str.length) {\n        throw new Error(\"startIndex is negative or greater than the length of this instance.\");\n    }\n    return str.substring(0, startIndex) + value + str.substring(startIndex);\n}\nexport function isNullOrEmpty(str) {\n    return typeof str !== \"string\" || str.length === 0;\n}\nexport function isNullOrWhiteSpace(str) {\n    return typeof str !== \"string\" || /^\\s*$/.test(str);\n}\nexport function concat(...xs) {\n    return xs.map((x) => String(x)).join(\"\");\n}\nexport function join(delimiter, xs) {\n    if (Array.isArray(xs)) {\n        return xs.join(delimiter);\n    }\n    else {\n        return Array.from(xs).join(delimiter);\n    }\n}\nexport function joinWithIndices(delimiter, xs, startIndex, count) {\n    const endIndexPlusOne = startIndex + count;\n    if (endIndexPlusOne > xs.length) {\n        throw new Error(\"Index and count must refer to a location within the buffer.\");\n    }\n    return xs.slice(startIndex, endIndexPlusOne).join(delimiter);\n}\n/** Validates UUID as specified in RFC4122 (versions 1-5). Trims braces. */\nexport function validateGuid(str, doNotThrow) {\n    const trimmedAndLowered = trim(str, \"{\", \"}\").toLowerCase();\n    if (guidRegex.test(trimmedAndLowered)) {\n        return doNotThrow ? [true, trimmedAndLowered] : trimmedAndLowered;\n    }\n    else if (doNotThrow) {\n        return [false, \"00000000-0000-0000-0000-000000000000\"];\n    }\n    throw new Error(\"Guid should contain 32 digits with 4 dashes: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\");\n}\n// From https://gist.github.com/LeverOne/1308368\nexport function newGuid() {\n    let b = \"\";\n    for (let a = 0; a++ < 36;) {\n        b += a * 51 & 52\n            ? (a ^ 15 ? 8 ^ Math.random() * (a ^ 20 ? 16 : 4) : 4).toString(16)\n            : \"-\";\n    }\n    return b;\n}\n// Maps for number <-> hex string conversion\nlet _convertMapsInitialized = false;\nlet _byteToHex;\nlet _hexToByte;\nfunction initConvertMaps() {\n    _byteToHex = new Array(256);\n    _hexToByte = {};\n    for (let i = 0; i < 256; i++) {\n        _byteToHex[i] = (i + 0x100).toString(16).substr(1);\n        _hexToByte[_byteToHex[i]] = i;\n    }\n    _convertMapsInitialized = true;\n}\n/** Parse a UUID into it's component bytes */\n// Adapted from https://github.com/zefferus/uuid-parse\nexport function guidToArray(s) {\n    if (!_convertMapsInitialized) {\n        initConvertMaps();\n    }\n    let i = 0;\n    const buf = new Uint8Array(16);\n    s.toLowerCase().replace(/[0-9a-f]{2}/g, ((oct) => {\n        switch (i) {\n            // .NET saves first three byte groups with different endianness\n            // See https://stackoverflow.com/a/16722909/3922220\n            case 0:\n            case 1:\n            case 2:\n            case 3:\n                buf[3 - i++] = _hexToByte[oct];\n                break;\n            case 4:\n            case 5:\n                buf[9 - i++] = _hexToByte[oct];\n                break;\n            case 6:\n            case 7:\n                buf[13 - i++] = _hexToByte[oct];\n                break;\n            case 8:\n            case 9:\n            case 10:\n            case 11:\n            case 12:\n            case 13:\n            case 14:\n            case 15:\n                buf[i++] = _hexToByte[oct];\n                break;\n        }\n    }));\n    // Zero out remaining bytes if string was short\n    while (i < 16) {\n        buf[i++] = 0;\n    }\n    return buf;\n}\n/** Convert UUID byte array into a string */\nexport function arrayToGuid(buf) {\n    if (buf.length !== 16) {\n        throw new Error(\"Byte array for GUID must be exactly 16 bytes long\");\n    }\n    if (!_convertMapsInitialized) {\n        initConvertMaps();\n    }\n    const guid = _byteToHex[buf[3]] + _byteToHex[buf[2]] +\n        _byteToHex[buf[1]] + _byteToHex[buf[0]] + \"-\" +\n        _byteToHex[buf[5]] + _byteToHex[buf[4]] + \"-\" +\n        _byteToHex[buf[7]] + _byteToHex[buf[6]] + \"-\" +\n        _byteToHex[buf[8]] + _byteToHex[buf[9]] + \"-\" +\n        _byteToHex[buf[10]] + _byteToHex[buf[11]] +\n        _byteToHex[buf[12]] + _byteToHex[buf[13]] +\n        _byteToHex[buf[14]] + _byteToHex[buf[15]];\n    return guid;\n}\nfunction notSupported(name) {\n    throw new Error(\"The environment doesn't support '\" + name + \"', please use a polyfill.\");\n}\nexport function toBase64String(inArray) {\n    let str = \"\";\n    for (let i = 0; i < inArray.length; i++) {\n        str += String.fromCharCode(inArray[i]);\n    }\n    return typeof btoa === \"function\" ? btoa(str) : notSupported(\"btoa\");\n}\nexport function fromBase64String(b64Encoded) {\n    const binary = typeof atob === \"function\" ? atob(b64Encoded) : notSupported(\"atob\");\n    const bytes = new Uint8Array(binary.length);\n    for (let i = 0; i < binary.length; i++) {\n        bytes[i] = binary.charCodeAt(i);\n    }\n    return bytes;\n}\nexport function padLeft(str, len, ch, isRight) {\n    ch = ch || \" \";\n    len = len - str.length;\n    for (let i = 0; i < len; i++) {\n        str = isRight ? str + ch : ch + str;\n    }\n    return str;\n}\nexport function padRight(str, len, ch) {\n    return padLeft(str, len, ch, true);\n}\nexport function remove(str, startIndex, count) {\n    if (startIndex >= str.length) {\n        throw new Error(\"startIndex must be less than length of string\");\n    }\n    if (typeof count === \"number\" && (startIndex + count) > str.length) {\n        throw new Error(\"Index and count must refer to a location within the string.\");\n    }\n    return str.slice(0, startIndex) + (typeof count === \"number\" ? str.substr(startIndex + count) : \"\");\n}\nexport function replace(str, search, replace) {\n    return str.replace(new RegExp(escape(search), \"g\"), replace);\n}\nexport function replicate(n, x) {\n    return initialize(n, () => x);\n}\nexport function getCharAtIndex(input, index) {\n    if (index < 0 || index >= input.length) {\n        throw new Error(\"Index was outside the bounds of the array.\");\n    }\n    return input[index];\n}\nexport function split(str, splitters, count, removeEmpty) {\n    count = typeof count === \"number\" ? count : undefined;\n    removeEmpty = typeof removeEmpty === \"number\" ? removeEmpty : undefined;\n    if (count && count < 0) {\n        throw new Error(\"Count cannot be less than zero\");\n    }\n    if (count === 0) {\n        return [];\n    }\n    if (!Array.isArray(splitters)) {\n        if (removeEmpty === 0) {\n            return str.split(splitters, count);\n        }\n        const len = arguments.length;\n        splitters = Array(len - 1);\n        for (let key = 1; key < len; key++) {\n            splitters[key - 1] = arguments[key];\n        }\n    }\n    splitters = splitters.map((x) => escape(x));\n    splitters = splitters.length > 0 ? splitters : [\" \"];\n    let i = 0;\n    const splits = [];\n    const reg = new RegExp(splitters.join(\"|\"), \"g\");\n    while (count == null || count > 1) {\n        const m = reg.exec(str);\n        if (m === null) {\n            break;\n        }\n        if (!removeEmpty || (m.index - i) > 0) {\n            count = count != null ? count - 1 : count;\n            splits.push(str.substring(i, m.index));\n        }\n        i = reg.lastIndex;\n    }\n    if (!removeEmpty || (str.length - i) > 0) {\n        splits.push(str.substring(i));\n    }\n    return splits;\n}\nexport function trim(str, ...chars) {\n    if (chars.length === 0) {\n        return str.trim();\n    }\n    const pattern = \"[\" + escape(chars.join(\"\")) + \"]+\";\n    return str.replace(new RegExp(\"^\" + pattern), \"\").replace(new RegExp(pattern + \"$\"), \"\");\n}\nexport function trimStart(str, ...chars) {\n    return chars.length === 0\n        ? str.trimStart()\n        : str.replace(new RegExp(\"^[\" + escape(chars.join(\"\")) + \"]+\"), \"\");\n}\nexport function trimEnd(str, ...chars) {\n    return chars.length === 0\n        ? str.trimEnd()\n        : str.replace(new RegExp(\"[\" + escape(chars.join(\"\")) + \"]+$\"), \"\");\n}\nexport function filter(pred, x) {\n    return x.split(\"\").filter((c) => pred(c)).join(\"\");\n}\nexport function substring(str, startIndex, length) {\n    if ((startIndex + (length || 0) > str.length)) {\n        throw new Error(\"Invalid startIndex and/or length\");\n    }\n    return length != null ? str.substr(startIndex, length) : str.substr(startIndex);\n}\n//# sourceMappingURL=String.js.map","import { declare, FSharpRef } from \"./Types.js\";\nimport { iterateIndexed, toIterator, getEnumerator, delay, collect, map, sumBy, iterate } from \"./Seq.js\";\nimport { type } from \"./Reflection.js\";\nimport { equals, getItemFromDict, tryGetValue } from \"./Util.js\";\nimport { addInPlace } from \"./Array.js\";\nimport { format } from \"./String.js\";\nexport const MutableMap$00602 = declare(function Fable_Collections_MutableMap(pairs, comparer) {\n  const $this$$1 = this;\n  const this$ = new FSharpRef(null);\n  $this$$1.comparer = comparer;\n  this$.contents = $this$$1;\n  $this$$1.hashMap = new Map([]);\n  $this$$1[\"init@20-1\"] = 1;\n  iterate(function (pair) {\n    MutableMap$00602$$Add$$5BDDA1(this$.contents, pair[0], pair[1]);\n  }, pairs);\n});\nexport function MutableMap$00602$reflection($gen$$4, $gen$$5) {\n  return type(\"Fable.Collections.MutableMap`2\", [$gen$$4, $gen$$5]);\n}\nexport function MutableMap$00602$$$$002Ector$$6623D9B3(pairs, comparer) {\n  return this instanceof MutableMap$00602 ? MutableMap$00602.call(this, pairs, comparer) : new MutableMap$00602(pairs, comparer);\n}\n\nfunction MutableMap$00602$$TryFindIndex$$2B595(this$$$1, k) {\n  const h = this$$$1.comparer.GetHashCode(k) | 0;\n  const matchValue = tryGetValue(this$$$1.hashMap, h, null);\n\n  if (matchValue[0]) {\n    return [true, h, matchValue[1].findIndex(function (pair$$1) {\n      return this$$$1.comparer.Equals(k, pair$$1[0]);\n    })];\n  } else {\n    return [false, h, -1];\n  }\n}\n\nexport function MutableMap$00602$$TryFind$$2B595(this$$$2, k$$1) {\n  const matchValue$$1 = MutableMap$00602$$TryFindIndex$$2B595(this$$$2, k$$1);\n  var $target$$10;\n\n  if (matchValue$$1[0]) {\n    if (matchValue$$1[2] > -1) {\n      $target$$10 = 0;\n    } else {\n      $target$$10 = 1;\n    }\n  } else {\n    $target$$10 = 1;\n  }\n\n  switch ($target$$10) {\n    case 0:\n      {\n        return getItemFromDict(this$$$2.hashMap, matchValue$$1[1])[matchValue$$1[2]];\n      }\n\n    case 1:\n      {\n        return null;\n      }\n  }\n}\nexport function MutableMap$00602$$get_Comparer(this$$$3) {\n  return this$$$3.comparer;\n}\nexport function MutableMap$00602$$Clear(this$$$4) {\n  this$$$4.hashMap.clear();\n}\nexport function MutableMap$00602$$get_Count(this$$$5) {\n  const source = this$$$5.hashMap.values();\n  return sumBy(function projection(pairs$$2) {\n    return pairs$$2.length;\n  }, source, {\n    GetZero() {\n      return 0;\n    },\n\n    Add($x$$2, $y$$3) {\n      return $x$$2 + $y$$3;\n    }\n\n  }) | 0;\n}\nexport function MutableMap$00602$$get_Item$$2B595(this$$$6, k$$2) {\n  const matchValue$$2 = MutableMap$00602$$TryFind$$2B595(this$$$6, k$$2);\n\n  if (matchValue$$2 != null) {\n    const pair$$2 = matchValue$$2;\n    return pair$$2[1];\n  } else {\n    throw new Error(\"The item was not found in collection\");\n  }\n}\nexport function MutableMap$00602$$set_Item$$5BDDA1(this$$$7, k$$3, v) {\n  const matchValue$$3 = MutableMap$00602$$TryFindIndex$$2B595(this$$$7, k$$3);\n  var $target$$20;\n\n  if (matchValue$$3[0]) {\n    if (matchValue$$3[2] > -1) {\n      $target$$20 = 0;\n    } else {\n      $target$$20 = 1;\n    }\n  } else {\n    $target$$20 = 1;\n  }\n\n  switch ($target$$20) {\n    case 0:\n      {\n        getItemFromDict(this$$$7.hashMap, matchValue$$3[1])[matchValue$$3[2]] = [k$$3, v];\n        break;\n      }\n\n    case 1:\n      {\n        if (matchValue$$3[0]) {\n          const value = addInPlace([k$$3, v], getItemFromDict(this$$$7.hashMap, matchValue$$3[1]));\n          void null;\n        } else {\n          this$$$7.hashMap.set(matchValue$$3[1], [[k$$3, v]]);\n        }\n\n        break;\n      }\n  }\n}\nexport function MutableMap$00602$$Add$$5BDDA1(this$$$8, k$$4, v$$1) {\n  const matchValue$$4 = MutableMap$00602$$TryFindIndex$$2B595(this$$$8, k$$4);\n  var $target$$24;\n\n  if (matchValue$$4[0]) {\n    if (matchValue$$4[2] > -1) {\n      $target$$24 = 0;\n    } else {\n      $target$$24 = 1;\n    }\n  } else {\n    $target$$24 = 1;\n  }\n\n  switch ($target$$24) {\n    case 0:\n      {\n        const msg = format(\"An item with the same key has already been added. Key: {0}\", k$$4);\n        throw new Error(msg);\n        break;\n      }\n\n    case 1:\n      {\n        if (matchValue$$4[0]) {\n          const value$$1 = addInPlace([k$$4, v$$1], getItemFromDict(this$$$8.hashMap, matchValue$$4[1]));\n          void null;\n        } else {\n          this$$$8.hashMap.set(matchValue$$4[1], [[k$$4, v$$1]]);\n        }\n\n        break;\n      }\n  }\n}\nexport function MutableMap$00602$$ContainsKey$$2B595(this$$$9, k$$5) {\n  const matchValue$$5 = MutableMap$00602$$TryFindIndex$$2B595(this$$$9, k$$5);\n  var $target$$27;\n\n  if (matchValue$$5[0]) {\n    if (matchValue$$5[2] > -1) {\n      $target$$27 = 0;\n    } else {\n      $target$$27 = 1;\n    }\n  } else {\n    $target$$27 = 1;\n  }\n\n  switch ($target$$27) {\n    case 0:\n      {\n        return true;\n      }\n\n    case 1:\n      {\n        return false;\n      }\n  }\n}\nexport function MutableMap$00602$$Remove$$2B595(this$$$10, k$$6) {\n  const matchValue$$6 = MutableMap$00602$$TryFindIndex$$2B595(this$$$10, k$$6);\n  var $target$$30;\n\n  if (matchValue$$6[0]) {\n    if (matchValue$$6[2] > -1) {\n      $target$$30 = 0;\n    } else {\n      $target$$30 = 1;\n    }\n  } else {\n    $target$$30 = 1;\n  }\n\n  switch ($target$$30) {\n    case 0:\n      {\n        getItemFromDict(this$$$10.hashMap, matchValue$$6[1]).splice(matchValue$$6[2], 1);\n        return true;\n      }\n\n    case 1:\n      {\n        return false;\n      }\n  }\n}\n\nMutableMap$00602.prototype[Symbol.iterator] = function () {\n  var elems;\n  const this$$$11 = this;\n  return toIterator((elems = delay(function () {\n    return collect(function (pairs$$3) {\n      return map(function (pair$$3) {\n        return pair$$3;\n      }, pairs$$3);\n    }, this$$$11.hashMap.values());\n  }), getEnumerator(elems)));\n};\n\nMutableMap$00602.prototype.Add = function (item) {\n  const this$$$12 = this;\n  MutableMap$00602$$Add$$5BDDA1(this$$$12, item[0], item[1]);\n};\n\nMutableMap$00602.prototype.Clear = function () {\n  const this$$$13 = this;\n  MutableMap$00602$$Clear(this$$$13);\n};\n\nMutableMap$00602.prototype.Contains = function (item$$1) {\n  var p;\n  const this$$$14 = this;\n  const matchValue$$7 = MutableMap$00602$$TryFind$$2B595(this$$$14, item$$1[0]);\n  var $target$$31;\n\n  if (matchValue$$7 != null) {\n    if (p = matchValue$$7, equals(p[1], item$$1[1])) {\n      $target$$31 = 0;\n    } else {\n      $target$$31 = 1;\n    }\n  } else {\n    $target$$31 = 1;\n  }\n\n  switch ($target$$31) {\n    case 0:\n      {\n        return true;\n      }\n\n    case 1:\n      {\n        return false;\n      }\n  }\n};\n\nMutableMap$00602.prototype.CopyTo = function (array, arrayIndex) {\n  const this$$$15 = this;\n  iterateIndexed(function action(i$$10, e) {\n    array[arrayIndex + i$$10] = e;\n  }, this$$$15);\n};\n\nObject.defineProperty(MutableMap$00602.prototype, \"Count\", {\n  \"get\": function () {\n    const this$$$16 = this;\n    return MutableMap$00602$$get_Count(this$$$16) | 0;\n  }\n});\nObject.defineProperty(MutableMap$00602.prototype, \"IsReadOnly\", {\n  \"get\": function () {\n    return false;\n  }\n});\n\nMutableMap$00602.prototype.Remove = function (item$$2) {\n  const this$$$18 = this;\n  const matchValue$$8 = MutableMap$00602$$TryFind$$2B595(this$$$18, item$$2[0]);\n\n  if (matchValue$$8 != null) {\n    const pair$$4 = matchValue$$8;\n\n    if (equals(pair$$4[1], item$$2[1])) {\n      const value$$2 = MutableMap$00602$$Remove$$2B595(this$$$18, item$$2[0]);\n      void value$$2;\n    }\n\n    return true;\n  } else {\n    return false;\n  }\n};\n\nObject.defineProperty(MutableMap$00602.prototype, \"size\", {\n  \"get\": function () {\n    const this$$$19 = this;\n    return MutableMap$00602$$get_Count(this$$$19) | 0;\n  }\n});\n\nMutableMap$00602.prototype.clear = function () {\n  const this$$$20 = this;\n  MutableMap$00602$$Clear(this$$$20);\n};\n\nMutableMap$00602.prototype.delete = function (k$$7) {\n  const this$$$21 = this;\n  return MutableMap$00602$$Remove$$2B595(this$$$21, k$$7);\n};\n\nMutableMap$00602.prototype.entries = function () {\n  const this$$$22 = this;\n  return map(function mapping(x) {\n    return x;\n  }, this$$$22);\n};\n\nMutableMap$00602.prototype.get = function (k$$8) {\n  const this$$$23 = this;\n  return MutableMap$00602$$get_Item$$2B595(this$$$23, k$$8);\n};\n\nMutableMap$00602.prototype.has = function (k$$9) {\n  const this$$$24 = this;\n  return MutableMap$00602$$ContainsKey$$2B595(this$$$24, k$$9);\n};\n\nMutableMap$00602.prototype.keys = function () {\n  const this$$$25 = this;\n  return map(function mapping$$1(pair$$5) {\n    return pair$$5[0];\n  }, this$$$25);\n};\n\nMutableMap$00602.prototype.set = function (k$$10, v$$2) {\n  const this$$$26 = this;\n  MutableMap$00602$$set_Item$$5BDDA1(this$$$26, k$$10, v$$2);\n  return this$$$26;\n};\n\nMutableMap$00602.prototype.values = function () {\n  const this$$$27 = this;\n  return map(function mapping$$2(pair$$6) {\n    return pair$$6[1];\n  }, this$$$27);\n};","import { Record, List, declare, Union } from \"./Types.js\";\nimport { type, record, bool, list, union, int32 } from \"./Reflection.js\";\nimport { value as value$$3, some } from \"./Option.js\";\nimport { iterate as iterate$$1, empty as empty$$1, toIterator, map as map$$2, unfold, getEnumerator, fold as fold$$1 } from \"./Seq.js\";\nimport { compare, structuralHash, isDisposable } from \"./Util.js\";\nimport { join, format } from \"./String.js\";\nimport { MutableMap$00602$$$$002Ector$$6623D9B3 as MutableMap$002400602$0024$0024$0024$0024002Ector$0024$00246623D9B3 } from \"./MutableMap\";\nimport { addInPlace } from \"./Array.js\";\nexport const MapTree$00602 = declare(function Map_MapTree(tag, name, ...fields) {\n  Union.call(this, tag, name, ...fields);\n}, Union);\nexport function MapTree$00602$reflection($gen$$3, $gen$$4) {\n  return union(\"Map.MapTree`2\", [$gen$$3, $gen$$4], MapTree$00602, () => [\"MapEmpty\", [\"MapOne\", [$gen$$3, $gen$$4]], [\"MapNode\", [$gen$$3, $gen$$4, MapTree$00602$reflection($gen$$3, $gen$$4), MapTree$00602$reflection($gen$$3, $gen$$4), int32]]]);\n}\nexport function MapTreeModule$$$sizeAux($acc$$5, $m$$6) {\n  MapTreeModule$$$sizeAux: while (true) {\n    const acc = $acc$$5,\n          m = $m$$6;\n\n    switch (m.tag) {\n      case 1:\n        {\n          return acc + 1 | 0;\n        }\n\n      case 2:\n        {\n          $acc$$5 = MapTreeModule$$$sizeAux(acc + 1, m.fields[2]);\n          $m$$6 = m.fields[3];\n          continue MapTreeModule$$$sizeAux;\n        }\n\n      default:\n        {\n          return acc | 0;\n        }\n    }\n\n    break;\n  }\n}\nexport function MapTreeModule$$$size(x) {\n  return MapTreeModule$$$sizeAux(0, x);\n}\nexport function MapTreeModule$$$empty() {\n  return new MapTree$00602(0, \"MapEmpty\");\n}\nexport function MapTreeModule$$$height(_arg1) {\n  switch (_arg1.tag) {\n    case 1:\n      {\n        return 1;\n      }\n\n    case 2:\n      {\n        return _arg1.fields[4] | 0;\n      }\n\n    default:\n      {\n        return 0;\n      }\n  }\n}\nexport function MapTreeModule$$$isEmpty(m$$1) {\n  if (m$$1.tag === 0) {\n    return true;\n  } else {\n    return false;\n  }\n}\nexport function MapTreeModule$$$mk(l$$1, k, v, r$$1) {\n  var $target$$14;\n\n  if (l$$1.tag === 0) {\n    if (r$$1.tag === 0) {\n      $target$$14 = 0;\n    } else {\n      $target$$14 = 1;\n    }\n  } else {\n    $target$$14 = 1;\n  }\n\n  switch ($target$$14) {\n    case 0:\n      {\n        return new MapTree$00602(1, \"MapOne\", k, v);\n      }\n\n    case 1:\n      {\n        const hl = MapTreeModule$$$height(l$$1) | 0;\n        const hr = MapTreeModule$$$height(r$$1) | 0;\n        const m$$2 = (hl < hr ? hr : hl) | 0;\n        return new MapTree$00602(2, \"MapNode\", k, v, l$$1, r$$1, m$$2 + 1);\n      }\n  }\n}\nexport function MapTreeModule$$$rebalance(t1, k$$1, v$$1, t2) {\n  const t1h = MapTreeModule$$$height(t1) | 0;\n  const t2h = MapTreeModule$$$height(t2) | 0;\n\n  if (t2h > t1h + 2) {\n    if (t2.tag === 2) {\n      if (MapTreeModule$$$height(t2.fields[2]) > t1h + 1) {\n        if (t2.fields[2].tag === 2) {\n          return MapTreeModule$$$mk(MapTreeModule$$$mk(t1, k$$1, v$$1, t2.fields[2].fields[2]), t2.fields[2].fields[0], t2.fields[2].fields[1], MapTreeModule$$$mk(t2.fields[2].fields[3], t2.fields[0], t2.fields[1], t2.fields[3]));\n        } else {\n          throw new Error(\"rebalance\");\n        }\n      } else {\n        return MapTreeModule$$$mk(MapTreeModule$$$mk(t1, k$$1, v$$1, t2.fields[2]), t2.fields[0], t2.fields[1], t2.fields[3]);\n      }\n    } else {\n      throw new Error(\"rebalance\");\n    }\n  } else if (t1h > t2h + 2) {\n    if (t1.tag === 2) {\n      if (MapTreeModule$$$height(t1.fields[3]) > t2h + 1) {\n        if (t1.fields[3].tag === 2) {\n          return MapTreeModule$$$mk(MapTreeModule$$$mk(t1.fields[2], t1.fields[0], t1.fields[1], t1.fields[3].fields[2]), t1.fields[3].fields[0], t1.fields[3].fields[1], MapTreeModule$$$mk(t1.fields[3].fields[3], k$$1, v$$1, t2));\n        } else {\n          throw new Error(\"re  balance\");\n        }\n      } else {\n        return MapTreeModule$$$mk(t1.fields[2], t1.fields[0], t1.fields[1], MapTreeModule$$$mk(t1.fields[3], k$$1, v$$1, t2));\n      }\n    } else {\n      throw new Error(\"rebalance\");\n    }\n  } else {\n    return MapTreeModule$$$mk(t1, k$$1, v$$1, t2);\n  }\n}\nexport function MapTreeModule$$$add(comparer, k$$2, v$$2, m$$3) {\n  switch (m$$3.tag) {\n    case 1:\n      {\n        const c = comparer.Compare(k$$2, m$$3.fields[0]) | 0;\n\n        if (c < 0) {\n          return new MapTree$00602(2, \"MapNode\", k$$2, v$$2, new MapTree$00602(0, \"MapEmpty\"), m$$3, 2);\n        } else if (c === 0) {\n          return new MapTree$00602(1, \"MapOne\", k$$2, v$$2);\n        } else {\n          return new MapTree$00602(2, \"MapNode\", k$$2, v$$2, m$$3, new MapTree$00602(0, \"MapEmpty\"), 2);\n        }\n      }\n\n    case 2:\n      {\n        const c$$1 = comparer.Compare(k$$2, m$$3.fields[0]) | 0;\n\n        if (c$$1 < 0) {\n          return MapTreeModule$$$rebalance(MapTreeModule$$$add(comparer, k$$2, v$$2, m$$3.fields[2]), m$$3.fields[0], m$$3.fields[1], m$$3.fields[3]);\n        } else if (c$$1 === 0) {\n          return new MapTree$00602(2, \"MapNode\", k$$2, v$$2, m$$3.fields[2], m$$3.fields[3], m$$3.fields[4]);\n        } else {\n          return MapTreeModule$$$rebalance(m$$3.fields[2], m$$3.fields[0], m$$3.fields[1], MapTreeModule$$$add(comparer, k$$2, v$$2, m$$3.fields[3]));\n        }\n      }\n\n    default:\n      {\n        return new MapTree$00602(1, \"MapOne\", k$$2, v$$2);\n      }\n  }\n}\nexport function MapTreeModule$$$find($comparer$$1$$23, $k$$3$$24, $m$$4$$25) {\n  MapTreeModule$$$find: while (true) {\n    const comparer$$1 = $comparer$$1$$23,\n          k$$3 = $k$$3$$24,\n          m$$4 = $m$$4$$25;\n\n    switch (m$$4.tag) {\n      case 1:\n        {\n          const c$$2 = comparer$$1.Compare(k$$3, m$$4.fields[0]) | 0;\n\n          if (c$$2 === 0) {\n            return m$$4.fields[1];\n          } else {\n            throw new Error(\"key not found\");\n          }\n        }\n\n      case 2:\n        {\n          const c$$3 = comparer$$1.Compare(k$$3, m$$4.fields[0]) | 0;\n\n          if (c$$3 < 0) {\n            $comparer$$1$$23 = comparer$$1;\n            $k$$3$$24 = k$$3;\n            $m$$4$$25 = m$$4.fields[2];\n            continue MapTreeModule$$$find;\n          } else if (c$$3 === 0) {\n            return m$$4.fields[1];\n          } else {\n            $comparer$$1$$23 = comparer$$1;\n            $k$$3$$24 = k$$3;\n            $m$$4$$25 = m$$4.fields[3];\n            continue MapTreeModule$$$find;\n          }\n        }\n\n      default:\n        {\n          throw new Error(\"key not found\");\n        }\n    }\n\n    break;\n  }\n}\nexport function MapTreeModule$$$tryFind($comparer$$2$$26, $k$$4$$27, $m$$5$$28) {\n  MapTreeModule$$$tryFind: while (true) {\n    const comparer$$2 = $comparer$$2$$26,\n          k$$4 = $k$$4$$27,\n          m$$5 = $m$$5$$28;\n\n    switch (m$$5.tag) {\n      case 1:\n        {\n          const c$$4 = comparer$$2.Compare(k$$4, m$$5.fields[0]) | 0;\n\n          if (c$$4 === 0) {\n            return some(m$$5.fields[1]);\n          } else {\n            return null;\n          }\n        }\n\n      case 2:\n        {\n          const c$$5 = comparer$$2.Compare(k$$4, m$$5.fields[0]) | 0;\n\n          if (c$$5 < 0) {\n            $comparer$$2$$26 = comparer$$2;\n            $k$$4$$27 = k$$4;\n            $m$$5$$28 = m$$5.fields[2];\n            continue MapTreeModule$$$tryFind;\n          } else if (c$$5 === 0) {\n            return some(m$$5.fields[1]);\n          } else {\n            $comparer$$2$$26 = comparer$$2;\n            $k$$4$$27 = k$$4;\n            $m$$5$$28 = m$$5.fields[3];\n            continue MapTreeModule$$$tryFind;\n          }\n        }\n\n      default:\n        {\n          return null;\n        }\n    }\n\n    break;\n  }\n}\nexport function MapTreeModule$$$partition1(comparer$$3, f, k$$5, v$$3, acc1, acc2) {\n  if (f(k$$5, v$$3)) {\n    return [MapTreeModule$$$add(comparer$$3, k$$5, v$$3, acc1), acc2];\n  } else {\n    return [acc1, MapTreeModule$$$add(comparer$$3, k$$5, v$$3, acc2)];\n  }\n}\nexport function MapTreeModule$$$partitionAux($comparer$$4$$35, $f$$1$$36, $s$$37, $acc_0$$38, $acc_1$$39) {\n  MapTreeModule$$$partitionAux: while (true) {\n    const comparer$$4 = $comparer$$4$$35,\n          f$$1 = $f$$1$$36,\n          s = $s$$37,\n          acc_0 = $acc_0$$38,\n          acc_1 = $acc_1$$39;\n\n    switch (s.tag) {\n      case 1:\n        {\n          return MapTreeModule$$$partition1(comparer$$4, f$$1, s.fields[0], s.fields[1], acc_0, acc_1);\n        }\n\n      case 2:\n        {\n          const acc$$2 = MapTreeModule$$$partitionAux(comparer$$4, f$$1, s.fields[3], acc_0, acc_1);\n          const acc$$3 = MapTreeModule$$$partition1(comparer$$4, f$$1, s.fields[0], s.fields[1], acc$$2[0], acc$$2[1]);\n          $comparer$$4$$35 = comparer$$4;\n          $f$$1$$36 = f$$1;\n          $s$$37 = s.fields[2];\n          $acc_0$$38 = acc$$3[0];\n          $acc_1$$39 = acc$$3[1];\n          continue MapTreeModule$$$partitionAux;\n        }\n\n      default:\n        {\n          return [acc_0, acc_1];\n        }\n    }\n\n    break;\n  }\n}\nexport function MapTreeModule$$$partition(comparer$$5, f$$2, s$$1) {\n  return MapTreeModule$$$partitionAux(comparer$$5, f$$2, s$$1, MapTreeModule$$$empty(), MapTreeModule$$$empty());\n}\nexport function MapTreeModule$$$filter1(comparer$$6, f$$3, k$$8, v$$6, acc$$4) {\n  if (f$$3(k$$8, v$$6)) {\n    return MapTreeModule$$$add(comparer$$6, k$$8, v$$6, acc$$4);\n  } else {\n    return acc$$4;\n  }\n}\nexport function MapTreeModule$$$filterAux($comparer$$7$$48, $f$$4$$49, $s$$2$$50, $acc$$5$$51) {\n  MapTreeModule$$$filterAux: while (true) {\n    const comparer$$7 = $comparer$$7$$48,\n          f$$4 = $f$$4$$49,\n          s$$2 = $s$$2$$50,\n          acc$$5 = $acc$$5$$51;\n\n    switch (s$$2.tag) {\n      case 1:\n        {\n          return MapTreeModule$$$filter1(comparer$$7, f$$4, s$$2.fields[0], s$$2.fields[1], acc$$5);\n        }\n\n      case 2:\n        {\n          const acc$$6 = MapTreeModule$$$filterAux(comparer$$7, f$$4, s$$2.fields[2], acc$$5);\n          const acc$$7 = MapTreeModule$$$filter1(comparer$$7, f$$4, s$$2.fields[0], s$$2.fields[1], acc$$6);\n          $comparer$$7$$48 = comparer$$7;\n          $f$$4$$49 = f$$4;\n          $s$$2$$50 = s$$2.fields[3];\n          $acc$$5$$51 = acc$$7;\n          continue MapTreeModule$$$filterAux;\n        }\n\n      default:\n        {\n          return acc$$5;\n        }\n    }\n\n    break;\n  }\n}\nexport function MapTreeModule$$$filter(comparer$$8, f$$5, s$$3) {\n  return MapTreeModule$$$filterAux(comparer$$8, f$$5, s$$3, MapTreeModule$$$empty());\n}\nexport function MapTreeModule$$$spliceOutSuccessor(m$$6) {\n  switch (m$$6.tag) {\n    case 1:\n      {\n        return [m$$6.fields[0], m$$6.fields[1], new MapTree$00602(0, \"MapEmpty\")];\n      }\n\n    case 2:\n      {\n        if (m$$6.fields[2].tag === 0) {\n          return [m$$6.fields[0], m$$6.fields[1], m$$6.fields[3]];\n        } else {\n          const patternInput = MapTreeModule$$$spliceOutSuccessor(m$$6.fields[2]);\n          return [patternInput[0], patternInput[1], MapTreeModule$$$mk(patternInput[2], m$$6.fields[0], m$$6.fields[1], m$$6.fields[3])];\n        }\n      }\n\n    default:\n      {\n        throw new Error(\"internal error: Map.spliceOutSuccessor\");\n      }\n  }\n}\nexport function MapTreeModule$$$remove(comparer$$9, k$$11, m$$7) {\n  switch (m$$7.tag) {\n    case 1:\n      {\n        const c$$6 = comparer$$9.Compare(k$$11, m$$7.fields[0]) | 0;\n\n        if (c$$6 === 0) {\n          return new MapTree$00602(0, \"MapEmpty\");\n        } else {\n          return m$$7;\n        }\n      }\n\n    case 2:\n      {\n        const c$$7 = comparer$$9.Compare(k$$11, m$$7.fields[0]) | 0;\n\n        if (c$$7 < 0) {\n          return MapTreeModule$$$rebalance(MapTreeModule$$$remove(comparer$$9, k$$11, m$$7.fields[2]), m$$7.fields[0], m$$7.fields[1], m$$7.fields[3]);\n        } else if (c$$7 === 0) {\n          if (m$$7.fields[2].tag === 0) {\n            return m$$7.fields[3];\n          } else if (m$$7.fields[3].tag === 0) {\n            return m$$7.fields[2];\n          } else {\n            const patternInput$$1 = MapTreeModule$$$spliceOutSuccessor(m$$7.fields[3]);\n            return MapTreeModule$$$mk(m$$7.fields[2], patternInput$$1[0], patternInput$$1[1], patternInput$$1[2]);\n          }\n        } else {\n          return MapTreeModule$$$rebalance(m$$7.fields[2], m$$7.fields[0], m$$7.fields[1], MapTreeModule$$$remove(comparer$$9, k$$11, m$$7.fields[3]));\n        }\n      }\n\n    default:\n      {\n        return MapTreeModule$$$empty();\n      }\n  }\n}\nexport function MapTreeModule$$$mem($comparer$$10$$59, $k$$12$$60, $m$$8$$61) {\n  MapTreeModule$$$mem: while (true) {\n    const comparer$$10 = $comparer$$10$$59,\n          k$$12 = $k$$12$$60,\n          m$$8 = $m$$8$$61;\n\n    switch (m$$8.tag) {\n      case 1:\n        {\n          return comparer$$10.Compare(k$$12, m$$8.fields[0]) === 0;\n        }\n\n      case 2:\n        {\n          const c$$8 = comparer$$10.Compare(k$$12, m$$8.fields[0]) | 0;\n\n          if (c$$8 < 0) {\n            $comparer$$10$$59 = comparer$$10;\n            $k$$12$$60 = k$$12;\n            $m$$8$$61 = m$$8.fields[2];\n            continue MapTreeModule$$$mem;\n          } else if (c$$8 === 0) {\n            return true;\n          } else {\n            $comparer$$10$$59 = comparer$$10;\n            $k$$12$$60 = k$$12;\n            $m$$8$$61 = m$$8.fields[3];\n            continue MapTreeModule$$$mem;\n          }\n        }\n\n      default:\n        {\n          return false;\n        }\n    }\n\n    break;\n  }\n}\nexport function MapTreeModule$$$iter($f$$6$$62, $m$$9$$63) {\n  MapTreeModule$$$iter: while (true) {\n    const f$$6 = $f$$6$$62,\n          m$$9 = $m$$9$$63;\n\n    switch (m$$9.tag) {\n      case 1:\n        {\n          f$$6(m$$9.fields[0], m$$9.fields[1]);\n          break;\n        }\n\n      case 2:\n        {\n          MapTreeModule$$$iter(f$$6, m$$9.fields[2]);\n          f$$6(m$$9.fields[0], m$$9.fields[1]);\n          $f$$6$$62 = f$$6;\n          $m$$9$$63 = m$$9.fields[3];\n          continue MapTreeModule$$$iter;\n          break;\n        }\n\n      default:\n        {}\n    }\n\n    break;\n  }\n}\nexport function MapTreeModule$$$tryPick($f$$7$$64, $m$$10$$65) {\n  MapTreeModule$$$tryPick: while (true) {\n    const f$$7 = $f$$7$$64,\n          m$$10 = $m$$10$$65;\n\n    switch (m$$10.tag) {\n      case 1:\n        {\n          return f$$7(m$$10.fields[0], m$$10.fields[1]);\n        }\n\n      case 2:\n        {\n          const matchValue$$2 = MapTreeModule$$$tryPick(f$$7, m$$10.fields[2]);\n\n          if (matchValue$$2 == null) {\n            const matchValue$$3 = f$$7(m$$10.fields[0], m$$10.fields[1]);\n\n            if (matchValue$$3 == null) {\n              $f$$7$$64 = f$$7;\n              $m$$10$$65 = m$$10.fields[3];\n              continue MapTreeModule$$$tryPick;\n            } else {\n              return matchValue$$3;\n            }\n          } else {\n            return matchValue$$2;\n          }\n        }\n\n      default:\n        {\n          return null;\n        }\n    }\n\n    break;\n  }\n}\nexport function MapTreeModule$$$exists($f$$8$$66, $m$$11$$67) {\n  MapTreeModule$$$exists: while (true) {\n    const f$$8 = $f$$8$$66,\n          m$$11 = $m$$11$$67;\n\n    switch (m$$11.tag) {\n      case 1:\n        {\n          return f$$8(m$$11.fields[0], m$$11.fields[1]);\n        }\n\n      case 2:\n        {\n          if (MapTreeModule$$$exists(f$$8, m$$11.fields[2]) ? true : f$$8(m$$11.fields[0], m$$11.fields[1])) {\n            return true;\n          } else {\n            $f$$8$$66 = f$$8;\n            $m$$11$$67 = m$$11.fields[3];\n            continue MapTreeModule$$$exists;\n          }\n        }\n\n      default:\n        {\n          return false;\n        }\n    }\n\n    break;\n  }\n}\nexport function MapTreeModule$$$forall($f$$9$$68, $m$$12$$69) {\n  MapTreeModule$$$forall: while (true) {\n    const f$$9 = $f$$9$$68,\n          m$$12 = $m$$12$$69;\n\n    switch (m$$12.tag) {\n      case 1:\n        {\n          return f$$9(m$$12.fields[0], m$$12.fields[1]);\n        }\n\n      case 2:\n        {\n          if (MapTreeModule$$$forall(f$$9, m$$12.fields[2]) ? f$$9(m$$12.fields[0], m$$12.fields[1]) : false) {\n            $f$$9$$68 = f$$9;\n            $m$$12$$69 = m$$12.fields[3];\n            continue MapTreeModule$$$forall;\n          } else {\n            return false;\n          }\n        }\n\n      default:\n        {\n          return true;\n        }\n    }\n\n    break;\n  }\n}\nexport function MapTreeModule$$$map(f$$10, m$$13) {\n  switch (m$$13.tag) {\n    case 1:\n      {\n        return new MapTree$00602(1, \"MapOne\", m$$13.fields[0], f$$10(m$$13.fields[1]));\n      }\n\n    case 2:\n      {\n        const l2 = MapTreeModule$$$map(f$$10, m$$13.fields[2]);\n        const v2$$16 = f$$10(m$$13.fields[1]);\n        const r2 = MapTreeModule$$$map(f$$10, m$$13.fields[3]);\n        return new MapTree$00602(2, \"MapNode\", m$$13.fields[0], v2$$16, l2, r2, m$$13.fields[4]);\n      }\n\n    default:\n      {\n        return MapTreeModule$$$empty();\n      }\n  }\n}\nexport function MapTreeModule$$$mapi(f$$11, m$$14) {\n  switch (m$$14.tag) {\n    case 1:\n      {\n        return new MapTree$00602(1, \"MapOne\", m$$14.fields[0], f$$11(m$$14.fields[0], m$$14.fields[1]));\n      }\n\n    case 2:\n      {\n        const l2$$1 = MapTreeModule$$$mapi(f$$11, m$$14.fields[2]);\n        const v2$$17 = f$$11(m$$14.fields[0], m$$14.fields[1]);\n        const r2$$1 = MapTreeModule$$$mapi(f$$11, m$$14.fields[3]);\n        return new MapTree$00602(2, \"MapNode\", m$$14.fields[0], v2$$17, l2$$1, r2$$1, m$$14.fields[4]);\n      }\n\n    default:\n      {\n        return MapTreeModule$$$empty();\n      }\n  }\n}\nexport function MapTreeModule$$$foldBack($f$$12$$74, $m$$15$$75, $x$$1$$76) {\n  MapTreeModule$$$foldBack: while (true) {\n    const f$$12 = $f$$12$$74,\n          m$$15 = $m$$15$$75,\n          x$$1 = $x$$1$$76;\n\n    switch (m$$15.tag) {\n      case 1:\n        {\n          return f$$12(m$$15.fields[0], m$$15.fields[1], x$$1);\n        }\n\n      case 2:\n        {\n          const x$$2 = MapTreeModule$$$foldBack(f$$12, m$$15.fields[3], x$$1);\n          const x$$3 = f$$12(m$$15.fields[0], m$$15.fields[1], x$$2);\n          $f$$12$$74 = f$$12;\n          $m$$15$$75 = m$$15.fields[2];\n          $x$$1$$76 = x$$3;\n          continue MapTreeModule$$$foldBack;\n        }\n\n      default:\n        {\n          return x$$1;\n        }\n    }\n\n    break;\n  }\n}\nexport function MapTreeModule$$$fold($f$$13$$77, $x$$4$$78, $m$$16$$79) {\n  MapTreeModule$$$fold: while (true) {\n    const f$$13 = $f$$13$$77,\n          x$$4 = $x$$4$$78,\n          m$$16 = $m$$16$$79;\n\n    switch (m$$16.tag) {\n      case 1:\n        {\n          return f$$13(x$$4, m$$16.fields[0], m$$16.fields[1]);\n        }\n\n      case 2:\n        {\n          const x$$5 = MapTreeModule$$$fold(f$$13, x$$4, m$$16.fields[2]);\n          const x$$6 = f$$13(x$$5, m$$16.fields[0], m$$16.fields[1]);\n          $f$$13$$77 = f$$13;\n          $x$$4$$78 = x$$6;\n          $m$$16$$79 = m$$16.fields[3];\n          continue MapTreeModule$$$fold;\n        }\n\n      default:\n        {\n          return x$$4;\n        }\n    }\n\n    break;\n  }\n}\nexport function MapTreeModule$$$foldFromTo(comparer$$11, lo, hi, f$$14, m$$17, x$$7) {\n  switch (m$$17.tag) {\n    case 1:\n      {\n        const cLoKey = comparer$$11.Compare(lo, m$$17.fields[0]) | 0;\n        const cKeyHi = comparer$$11.Compare(m$$17.fields[0], hi) | 0;\n        const x$$8 = (cLoKey <= 0 ? cKeyHi <= 0 : false) ? f$$14(m$$17.fields[0], m$$17.fields[1], x$$7) : x$$7;\n        return x$$8;\n      }\n\n    case 2:\n      {\n        const cLoKey$$1 = comparer$$11.Compare(lo, m$$17.fields[0]) | 0;\n        const cKeyHi$$1 = comparer$$11.Compare(m$$17.fields[0], hi) | 0;\n        const x$$9 = cLoKey$$1 < 0 ? MapTreeModule$$$foldFromTo(comparer$$11, lo, hi, f$$14, m$$17.fields[2], x$$7) : x$$7;\n        const x$$10 = (cLoKey$$1 <= 0 ? cKeyHi$$1 <= 0 : false) ? f$$14(m$$17.fields[0], m$$17.fields[1], x$$9) : x$$9;\n        const x$$11 = cKeyHi$$1 < 0 ? MapTreeModule$$$foldFromTo(comparer$$11, lo, hi, f$$14, m$$17.fields[3], x$$10) : x$$10;\n        return x$$11;\n      }\n\n    default:\n      {\n        return x$$7;\n      }\n  }\n}\nexport function MapTreeModule$$$foldSection(comparer$$12, lo$$1, hi$$1, f$$15, m$$18, x$$12) {\n  if (comparer$$12.Compare(lo$$1, hi$$1) === 1) {\n    return x$$12;\n  } else {\n    return MapTreeModule$$$foldFromTo(comparer$$12, lo$$1, hi$$1, f$$15, m$$18, x$$12);\n  }\n}\nexport function MapTreeModule$$$loop($m$$19$$92, $acc$$8$$93) {\n  MapTreeModule$$$loop: while (true) {\n    const m$$19 = $m$$19$$92,\n          acc$$8 = $acc$$8$$93;\n\n    switch (m$$19.tag) {\n      case 1:\n        {\n          return new List([m$$19.fields[0], m$$19.fields[1]], acc$$8);\n        }\n\n      case 2:\n        {\n          $m$$19$$92 = m$$19.fields[2];\n          $acc$$8$$93 = new List([m$$19.fields[0], m$$19.fields[1]], MapTreeModule$$$loop(m$$19.fields[3], acc$$8));\n          continue MapTreeModule$$$loop;\n        }\n\n      default:\n        {\n          return acc$$8;\n        }\n    }\n\n    break;\n  }\n}\nexport function MapTreeModule$$$toList(m$$20) {\n  return MapTreeModule$$$loop(m$$20, new List());\n}\nexport function MapTreeModule$$$ofList(comparer$$13, l$$20) {\n  return fold$$1(function (acc$$9, tupledArg) {\n    return MapTreeModule$$$add(comparer$$13, tupledArg[0], tupledArg[1], acc$$9);\n  }, MapTreeModule$$$empty(), l$$20);\n}\nexport function MapTreeModule$$$mkFromEnumerator($comparer$$14$$97, $acc$$10$$98, $e$$99) {\n  MapTreeModule$$$mkFromEnumerator: while (true) {\n    const comparer$$14 = $comparer$$14$$97,\n          acc$$10 = $acc$$10$$98,\n          e = $e$$99;\n\n    if (e.MoveNext()) {\n      const patternInput$$2 = e.Current;\n      $comparer$$14$$97 = comparer$$14;\n      $acc$$10$$98 = MapTreeModule$$$add(comparer$$14, patternInput$$2[0], patternInput$$2[1], acc$$10);\n      $e$$99 = e;\n      continue MapTreeModule$$$mkFromEnumerator;\n    } else {\n      return acc$$10;\n    }\n\n    break;\n  }\n}\nexport function MapTreeModule$$$ofArray(comparer$$15, arr) {\n  let res$$2 = MapTreeModule$$$empty();\n\n  for (let i = 0; i <= arr.length - 1; i++) {\n    const patternInput$$3 = arr[i];\n    res$$2 = MapTreeModule$$$add(comparer$$15, patternInput$$3[0], patternInput$$3[1], res$$2);\n  }\n\n  return res$$2;\n}\nexport function MapTreeModule$$$ofSeq(comparer$$16, c$$9) {\n  const ie = getEnumerator(c$$9);\n\n  try {\n    return MapTreeModule$$$mkFromEnumerator(comparer$$16, MapTreeModule$$$empty(), ie);\n  } finally {\n    if (isDisposable(ie)) {\n      ie.Dispose();\n    }\n  }\n}\nexport function MapTreeModule$$$copyToArray(s$$4, arr$$1, i$$1) {\n  let j = i$$1 | 0;\n  MapTreeModule$$$iter(function f$$16(x$$15, y$$2) {\n    arr$$1[j] = [x$$15, y$$2];\n    j = j + 1;\n  }, s$$4);\n}\nexport const MapTreeModule$002EMapIterator$00602 = declare(function Map_MapTreeModule_MapIterator(arg1, arg2) {\n  this.stack = arg1;\n  this.started = arg2;\n}, Record);\nexport function MapTreeModule$002EMapIterator$00602$reflection($gen$$109, $gen$$110) {\n  return record(\"Map.MapTreeModule.MapIterator`2\", [$gen$$109, $gen$$110], MapTreeModule$002EMapIterator$00602, () => [[\"stack\", list(MapTree$00602$reflection($gen$$109, $gen$$110))], [\"started\", bool]]);\n}\nexport function MapTreeModule$$$collapseLHS($stack$$111) {\n  MapTreeModule$$$collapseLHS: while (true) {\n    const stack = $stack$$111;\n\n    if (stack.tail != null) {\n      if (stack.head.tag === 1) {\n        return stack;\n      } else if (stack.head.tag === 2) {\n        $stack$$111 = new List(stack.head.fields[2], new List(new MapTree$00602(1, \"MapOne\", stack.head.fields[0], stack.head.fields[1]), new List(stack.head.fields[3], stack.tail)));\n        continue MapTreeModule$$$collapseLHS;\n      } else {\n        $stack$$111 = stack.tail;\n        continue MapTreeModule$$$collapseLHS;\n      }\n    } else {\n      return new List();\n    }\n\n    break;\n  }\n}\nexport function MapTreeModule$$$mkIterator(s$$5) {\n  return new MapTreeModule$002EMapIterator$00602(MapTreeModule$$$collapseLHS(new List(s$$5, new List())), false);\n}\nexport function MapTreeModule$$$notStarted() {\n  throw new Error(\"enumeration not started\");\n}\nexport function MapTreeModule$$$alreadyFinished() {\n  throw new Error(\"enumeration already finished\");\n}\nexport function MapTreeModule$$$current(i$$2) {\n  if (i$$2.started) {\n    const matchValue$$4 = i$$2.stack;\n\n    if (matchValue$$4.tail == null) {\n      return MapTreeModule$$$alreadyFinished();\n    } else if (matchValue$$4.head.tag === 1) {\n      return [matchValue$$4.head.fields[0], matchValue$$4.head.fields[1]];\n    } else {\n      throw new Error(\"Please report error: Map iterator, unexpected stack for current\");\n    }\n  } else {\n    return MapTreeModule$$$notStarted();\n  }\n}\nexport function MapTreeModule$$$moveNext(i$$3) {\n  if (i$$3.started) {\n    const matchValue$$5 = i$$3.stack;\n\n    if (matchValue$$5.tail == null) {\n      return false;\n    } else if (matchValue$$5.head.tag === 1) {\n      i$$3.stack = MapTreeModule$$$collapseLHS(matchValue$$5.tail);\n      return !(i$$3.stack.tail == null);\n    } else {\n      throw new Error(\"Please report error: Map iterator, unexpected stack for moveNext\");\n    }\n  } else {\n    i$$3.started = true;\n    return !(i$$3.stack.tail == null);\n  }\n}\nexport const MapTreeModule$002EmkIEnumerator$0027$00602 = declare(function Map_MapTreeModule_mkIEnumerator_(s$$6) {\n  const $this$$1 = this;\n  $this$$1.s = s$$6;\n  $this$$1.i = MapTreeModule$$$mkIterator($this$$1.s);\n});\nexport function MapTreeModule$002EmkIEnumerator$0027$00602$reflection($gen$$115, $gen$$116) {\n  return type(\"Map.MapTreeModule.mkIEnumerator'`2\", [$gen$$115, $gen$$116]);\n}\nexport function MapTreeModule$002EmkIEnumerator$0027$00602$$$$002Ector$$Z26BC498C(s$$6) {\n  return this instanceof MapTreeModule$002EmkIEnumerator$0027$00602 ? MapTreeModule$002EmkIEnumerator$0027$00602.call(this, s$$6) : new MapTreeModule$002EmkIEnumerator$0027$00602(s$$6);\n}\nObject.defineProperty(MapTreeModule$002EmkIEnumerator$0027$00602.prototype, \"Current\", {\n  \"get\": function () {\n    const __ = this;\n    return MapTreeModule$$$current(__.i);\n  }\n});\n\nMapTreeModule$002EmkIEnumerator$0027$00602.prototype.MoveNext = function () {\n  const __$$1 = this;\n  return MapTreeModule$$$moveNext(__$$1.i);\n};\n\nMapTreeModule$002EmkIEnumerator$0027$00602.prototype.Reset = function () {\n  const __$$2 = this;\n  __$$2.i = MapTreeModule$$$mkIterator(__$$2.s);\n};\n\nMapTreeModule$002EmkIEnumerator$0027$00602.prototype.Dispose = function () {};\n\nexport function MapTreeModule$$$mkIEnumerator(s$$7) {\n  return MapTreeModule$002EmkIEnumerator$0027$00602$$$$002Ector$$Z26BC498C(s$$7);\n}\nexport function MapTreeModule$$$toSeq(s$$8) {\n  const en = MapTreeModule$$$mkIEnumerator(s$$8);\n  return unfold(function generator(en$$1) {\n    if (en$$1.MoveNext()) {\n      return [en$$1.Current, en$$1];\n    } else {\n      return null;\n    }\n  }, en);\n}\nexport const FSharpMap = declare(function Map_Map(comparer$$17, tree) {\n  const $this$$2 = this;\n  $this$$2.comparer = comparer$$17;\n  $this$$2.tree = tree;\n});\nexport function FSharpMap$reflection($gen$$120, $gen$$121) {\n  return type(\"Map.FSharpMap\", [$gen$$120, $gen$$121]);\n}\nexport function FSharpMap$$$$002Ector$$58ADD115(comparer$$17, tree) {\n  return this instanceof FSharpMap ? FSharpMap.call(this, comparer$$17, tree) : new FSharpMap(comparer$$17, tree);\n}\nexport function FSharpMap$$get_Comparer(__$$4) {\n  return __$$4.comparer;\n}\nexport function FSharpMap$$get_Tree(__$$5) {\n  return __$$5.tree;\n}\nexport function FSharpMap$$Add$$5BDDA1(__$$6, k$$28, v$$24) {\n  return FSharpMap$$$$002Ector$$58ADD115(__$$6.comparer, MapTreeModule$$$add(__$$6.comparer, k$$28, v$$24, __$$6.tree));\n}\nexport function FSharpMap$$get_IsEmpty(__$$7) {\n  return MapTreeModule$$$isEmpty(__$$7.tree);\n}\nexport function FSharpMap$$get_Item$$2B595(__$$8, k$$29) {\n  return MapTreeModule$$$find(__$$8.comparer, k$$29, __$$8.tree);\n}\nexport function FSharpMap$$TryGetValue$$5BDDA1(__$$9, k$$30, defValue) {\n  const matchValue$$6 = MapTreeModule$$$tryFind(__$$9.comparer, k$$30, __$$9.tree);\n\n  if (matchValue$$6 == null) {\n    return [false, defValue];\n  } else {\n    const v$$25 = value$$3(matchValue$$6);\n    return [true, v$$25];\n  }\n}\nexport function FSharpMap$$TryPick$$72321DD7(__$$10, f$$17) {\n  return MapTreeModule$$$tryPick(f$$17, __$$10.tree);\n}\nexport function FSharpMap$$Exists$$Z395DDC35(__$$11, f$$18) {\n  return MapTreeModule$$$exists(f$$18, __$$11.tree);\n}\nexport function FSharpMap$$Filter$$Z395DDC35(__$$12, f$$19) {\n  return FSharpMap$$$$002Ector$$58ADD115(__$$12.comparer, MapTreeModule$$$filter(__$$12.comparer, f$$19, __$$12.tree));\n}\nexport function FSharpMap$$ForAll$$Z395DDC35(__$$13, f$$20) {\n  return MapTreeModule$$$forall(f$$20, __$$13.tree);\n}\nexport function FSharpMap$$Fold(__$$14, f$$21, acc$$11) {\n  return MapTreeModule$$$foldBack(f$$21, __$$14.tree, acc$$11);\n}\nexport function FSharpMap$$FoldSection(__$$15, lo$$2, hi$$2, f$$22, acc$$12) {\n  return MapTreeModule$$$foldSection(__$$15.comparer, lo$$2, hi$$2, f$$22, __$$15.tree, acc$$12);\n}\nexport function FSharpMap$$Iterate$$1DCFB91D(__$$16, f$$23) {\n  MapTreeModule$$$iter(f$$23, __$$16.tree);\n}\nexport function FSharpMap$$MapRange$$6DC7247(__$$17, f$$24) {\n  return FSharpMap$$$$002Ector$$58ADD115(__$$17.comparer, MapTreeModule$$$map(f$$24, __$$17.tree));\n}\nexport function FSharpMap$$Map$$Z6F6B671C(__$$18, f$$25) {\n  return FSharpMap$$$$002Ector$$58ADD115(__$$18.comparer, MapTreeModule$$$mapi(f$$25, __$$18.tree));\n}\nexport function FSharpMap$$Partition$$Z395DDC35(__$$19, f$$26) {\n  const patternInput$$4 = MapTreeModule$$$partition(__$$19.comparer, f$$26, __$$19.tree);\n  return [FSharpMap$$$$002Ector$$58ADD115(__$$19.comparer, patternInput$$4[0]), FSharpMap$$$$002Ector$$58ADD115(__$$19.comparer, patternInput$$4[1])];\n}\nexport function FSharpMap$$get_Count(__$$20) {\n  return MapTreeModule$$$size(__$$20.tree);\n}\nexport function FSharpMap$$ContainsKey$$2B595(__$$21, k$$31) {\n  return MapTreeModule$$$mem(__$$21.comparer, k$$31, __$$21.tree);\n}\nexport function FSharpMap$$Remove$$2B595(__$$22, k$$32) {\n  return FSharpMap$$$$002Ector$$58ADD115(__$$22.comparer, MapTreeModule$$$remove(__$$22.comparer, k$$32, __$$22.tree));\n}\nexport function FSharpMap$$TryFind$$2B595(__$$23, k$$33) {\n  return MapTreeModule$$$tryFind(__$$23.comparer, k$$33, __$$23.tree);\n}\nexport function FSharpMap$$ToList(__$$24) {\n  return MapTreeModule$$$toList(__$$24.tree);\n}\n\nFSharpMap.prototype.toString = function () {\n  const this$ = this;\n  let str;\n  let strings;\n  strings = map$$2(function toStr(kv) {\n    return format(\"({0}, {1})\", kv[0], kv[1]);\n  }, this$);\n  str = join(\"; \", strings);\n  return \"map [\" + str + \"]\";\n};\n\nFSharpMap.prototype.GetHashCode = function () {\n  const this$$$1 = this;\n\n  const combineHash = function combineHash(x$$16, y$$3) {\n    return (x$$16 << 1) + y$$3 + 631;\n  };\n\n  let res$$3 = 0;\n  const e$$1 = MapTreeModule$$$mkIEnumerator(FSharpMap$$get_Tree(this$$$1));\n\n  while (e$$1.MoveNext()) {\n    const patternInput$$5 = e$$1.Current;\n    const activePatternResult3692 = patternInput$$5;\n    res$$3 = combineHash(res$$3, structuralHash(activePatternResult3692[0]));\n    res$$3 = combineHash(res$$3, structuralHash(activePatternResult3692[1]));\n  }\n\n  return Math.abs(res$$3) | 0;\n};\n\nFSharpMap.prototype.Equals = function (that) {\n  const this$$$2 = this;\n  return this$$$2.CompareTo(that) === 0;\n};\n\nFSharpMap.prototype[Symbol.iterator] = function () {\n  const __$$25 = this;\n  return toIterator(MapTreeModule$$$mkIEnumerator(__$$25.tree));\n};\n\nFSharpMap.prototype.CompareTo = function (obj) {\n  const m$$22 = this;\n  let res$$4 = 0;\n  let finished = false;\n  const e1 = MapTreeModule$$$mkIEnumerator(FSharpMap$$get_Tree(m$$22));\n\n  try {\n    const e2 = MapTreeModule$$$mkIEnumerator(FSharpMap$$get_Tree(obj));\n\n    try {\n      while (!finished ? res$$4 === 0 : false) {\n        const matchValue$$7 = [e1.MoveNext(), e2.MoveNext()];\n\n        if (matchValue$$7[0]) {\n          if (matchValue$$7[1]) {\n            const kvp1 = e1.Current;\n            const kvp2 = e2.Current;\n            const c$$10 = m$$22.comparer.Compare(kvp1[0], kvp2[0]) | 0;\n            res$$4 = c$$10 !== 0 ? c$$10 : compare(kvp1[1], kvp2[1]);\n          } else {\n            res$$4 = 1;\n          }\n        } else if (matchValue$$7[1]) {\n          res$$4 = -1;\n        } else {\n          finished = true;\n        }\n      }\n\n      return res$$4 | 0;\n    } finally {\n      if (isDisposable(e2)) {\n        e2.Dispose();\n      }\n    }\n  } finally {\n    if (isDisposable(e1)) {\n      e1.Dispose();\n    }\n  }\n};\n\nObject.defineProperty(FSharpMap.prototype, \"size\", {\n  \"get\": function () {\n    const this$$$3 = this;\n    return FSharpMap$$get_Count(this$$$3) | 0;\n  }\n});\n\nFSharpMap.prototype.clear = function () {\n  throw new Error(\"Map cannot be mutated\");\n};\n\nFSharpMap.prototype.delete = function (_arg1$$1) {\n  throw new Error(\"Map cannot be mutated\");\n};\n\nFSharpMap.prototype.entries = function () {\n  const this$$$4 = this;\n  return MapTreeModule$$$toSeq(FSharpMap$$get_Tree(this$$$4));\n};\n\nFSharpMap.prototype.get = function (k$$34) {\n  const this$$$5 = this;\n  return FSharpMap$$get_Item$$2B595(this$$$5, k$$34);\n};\n\nFSharpMap.prototype.has = function (k$$35) {\n  const this$$$6 = this;\n  return FSharpMap$$ContainsKey$$2B595(this$$$6, k$$35);\n};\n\nFSharpMap.prototype.keys = function () {\n  const this$$$7 = this;\n  const source$$1 = MapTreeModule$$$toSeq(FSharpMap$$get_Tree(this$$$7));\n  return map$$2(function mapping(kv$$1) {\n    return kv$$1[0];\n  }, source$$1);\n};\n\nFSharpMap.prototype.set = function (k$$36, v$$26) {\n  throw new Error(\"Map cannot be mutated\");\n};\n\nFSharpMap.prototype.values = function () {\n  const this$$$8 = this;\n  const source$$2 = MapTreeModule$$$toSeq(FSharpMap$$get_Tree(this$$$8));\n  return map$$2(function mapping$$1(kv$$2) {\n    return kv$$2[1];\n  }, source$$2);\n};\n\nexport function isEmpty(m$$23) {\n  return FSharpMap$$get_IsEmpty(m$$23);\n}\nexport function add(k$$37, v$$27, m$$24) {\n  return FSharpMap$$Add$$5BDDA1(m$$24, k$$37, v$$27);\n}\nexport function find(k$$38, m$$25) {\n  return FSharpMap$$get_Item$$2B595(m$$25, k$$38);\n}\nexport function tryFind(k$$39, m$$26) {\n  return FSharpMap$$TryFind$$2B595(m$$26, k$$39);\n}\nexport function remove(k$$40, m$$27) {\n  return FSharpMap$$Remove$$2B595(m$$27, k$$40);\n}\nexport function containsKey(k$$41, m$$28) {\n  return FSharpMap$$ContainsKey$$2B595(m$$28, k$$41);\n}\nexport function iterate(f$$27, m$$29) {\n  FSharpMap$$Iterate$$1DCFB91D(m$$29, f$$27);\n}\nexport function tryPick(f$$28, m$$30) {\n  return FSharpMap$$TryPick$$72321DD7(m$$30, f$$28);\n}\nexport function pick(f$$29, m$$31) {\n  const matchValue$$8 = tryPick(f$$29, m$$31);\n\n  if (matchValue$$8 != null) {\n    const res$$5 = value$$3(matchValue$$8);\n    return res$$5;\n  } else {\n    throw new Error(\"key not found\");\n  }\n}\nexport function exists(f$$30, m$$32) {\n  return FSharpMap$$Exists$$Z395DDC35(m$$32, f$$30);\n}\nexport function filter(f$$31, m$$33) {\n  return FSharpMap$$Filter$$Z395DDC35(m$$33, f$$31);\n}\nexport function partition(f$$32, m$$34) {\n  return FSharpMap$$Partition$$Z395DDC35(m$$34, f$$32);\n}\nexport function forAll(f$$33, m$$35) {\n  return FSharpMap$$ForAll$$Z395DDC35(m$$35, f$$33);\n}\nexport function mapRange(f$$34, m$$36) {\n  return FSharpMap$$MapRange$$6DC7247(m$$36, f$$34);\n}\nexport function map(f$$35, m$$37) {\n  return FSharpMap$$Map$$Z6F6B671C(m$$37, f$$35);\n}\nexport function fold(f$$36, z, m$$38) {\n  return MapTreeModule$$$fold(f$$36, z, FSharpMap$$get_Tree(m$$38));\n}\nexport function foldBack(f$$37, m$$39, z$$1) {\n  return MapTreeModule$$$foldBack(f$$37, FSharpMap$$get_Tree(m$$39), z$$1);\n}\nexport function toSeq(m$$40) {\n  return MapTreeModule$$$toSeq(FSharpMap$$get_Tree(m$$40));\n}\nexport function findKey(f$$38, m$$41) {\n  let _arg1$$2;\n\n  const m$$42 = FSharpMap$$get_Tree(m$$41);\n  _arg1$$2 = MapTreeModule$$$tryPick(function f$$39(k$$42, v$$28) {\n    if (f$$38(k$$42, v$$28)) {\n      return some(k$$42);\n    } else {\n      return null;\n    }\n  }, m$$42);\n\n  if (_arg1$$2 == null) {\n    throw new Error(\"Key not found\");\n  } else {\n    const k$$43 = value$$3(_arg1$$2);\n    return k$$43;\n  }\n}\nexport function tryFindKey(f$$40, m$$43) {\n  const m$$44 = FSharpMap$$get_Tree(m$$43);\n  return MapTreeModule$$$tryPick(function f$$41(k$$44, v$$29) {\n    if (f$$40(k$$44, v$$29)) {\n      return some(k$$44);\n    } else {\n      return null;\n    }\n  }, m$$44);\n}\nexport function ofList(l$$22, comparer$$18) {\n  return FSharpMap$$$$002Ector$$58ADD115(comparer$$18, MapTreeModule$$$ofList(comparer$$18, l$$22));\n}\nexport function ofSeq(l$$23, comparer$$19) {\n  return FSharpMap$$$$002Ector$$58ADD115(comparer$$19, MapTreeModule$$$ofSeq(comparer$$19, l$$23));\n}\nexport function ofArray(array, comparer$$20) {\n  return FSharpMap$$$$002Ector$$58ADD115(comparer$$20, MapTreeModule$$$ofArray(comparer$$20, array));\n}\nexport function toList(m$$45) {\n  return FSharpMap$$ToList(m$$45);\n}\nexport function toArray(m$$46) {\n  let res$$6;\n  const len = FSharpMap$$get_Count(m$$46) | 0;\n  res$$6 = new Array(len);\n  MapTreeModule$$$copyToArray(FSharpMap$$get_Tree(m$$46), res$$6, 0);\n  return res$$6;\n}\nexport function empty(comparer$$21) {\n  return FSharpMap$$$$002Ector$$58ADD115(comparer$$21, new MapTree$00602(0, \"MapEmpty\"));\n}\n\nfunction createMutablePrivate(comparer$$22, tree$0027) {\n  let tree$$1 = tree$0027;\n  return {\n    get size() {\n      return MapTreeModule$$$size(tree$$1);\n    },\n\n    clear() {\n      tree$$1 = new MapTree$00602(0, \"MapEmpty\");\n    },\n\n    delete(x$$18) {\n      if (MapTreeModule$$$mem(comparer$$22, x$$18, tree$$1)) {\n        tree$$1 = MapTreeModule$$$remove(comparer$$22, x$$18, tree$$1);\n        return true;\n      } else {\n        return false;\n      }\n    },\n\n    entries() {\n      return MapTreeModule$$$toSeq(tree$$1);\n    },\n\n    get(k$$45) {\n      return MapTreeModule$$$find(comparer$$22, k$$45, tree$$1);\n    },\n\n    has(x$$19) {\n      return MapTreeModule$$$mem(comparer$$22, x$$19, tree$$1);\n    },\n\n    keys() {\n      const source$$3 = MapTreeModule$$$toSeq(tree$$1);\n      return map$$2(function mapping$$2(kv$$3) {\n        return kv$$3[0];\n      }, source$$3);\n    },\n\n    set(k$$46, v$$30) {\n      const this$$$9 = this;\n      tree$$1 = MapTreeModule$$$add(comparer$$22, k$$46, v$$30, tree$$1);\n      return this$$$9;\n    },\n\n    values() {\n      const source$$4 = MapTreeModule$$$toSeq(tree$$1);\n      return map$$2(function mapping$$3(kv$$4) {\n        return kv$$4[1];\n      }, source$$4);\n    },\n\n    [Symbol.iterator]() {\n      return toIterator(MapTreeModule$$$mkIEnumerator(tree$$1));\n    },\n\n    GetEnumerator() {\n      return MapTreeModule$$$mkIEnumerator(tree$$1);\n    }\n\n  };\n}\n\nexport function createMutable(source$$5, comparer$$23) {\n  const map$$1 = MutableMap$002400602$0024$0024$0024$0024002Ector$0024$00246623D9B3(source$$5, comparer$$23);\n  return map$$1;\n}\nexport function groupBy(projection, xs, comparer$$24) {\n  const dict = createMutable(empty$$1(), comparer$$24);\n  iterate$$1(function (v$$31) {\n    const key = projection(v$$31);\n\n    if (dict.has(key)) {\n      addInPlace(v$$31, dict.get(key));\n    } else {\n      const value = dict.set(key, [v$$31]);\n      void value;\n    }\n  }, xs);\n  return map$$2(function mapping$$4(kv$$5) {\n    return [kv$$5[0], kv$$5[1]];\n  }, dict);\n}\nexport function countBy(projection$$1, xs$$1, comparer$$25) {\n  const dict$$1 = createMutable(empty$$1(), comparer$$25);\n  iterate$$1(function (value$$1) {\n    const key$$1 = projection$$1(value$$1);\n    const value$$2 = dict$$1.has(key$$1) ? dict$$1.set(key$$1, dict$$1.get(key$$1) + 1) : dict$$1.set(key$$1, 1);\n    void value$$2;\n  }, xs$$1);\n  return map$$2(function mapping$$5(kv$$6) {\n    return [kv$$6[0], kv$$6[1]];\n  }, dict$$1);\n}\nexport function count(m$$47) {\n  return FSharpMap$$get_Count(m$$47);\n}","import { declare, FSharpRef } from \"./Types.js\";\nimport { iterateIndexed, toIterator, getEnumerator, delay, collect, map, sumBy, iterate } from \"./Seq.js\";\nimport { type } from \"./Reflection.js\";\nimport { getItemFromDict, tryGetValue } from \"./Util.js\";\nimport { some } from \"./Option.js\";\nimport { addInPlace } from \"./Array.js\";\nexport const MutableSet$00601 = declare(function Fable_Collections_MutableSet(items, comparer) {\n  const $this$$1 = this;\n  const this$ = new FSharpRef(null);\n  $this$$1.comparer = comparer;\n  this$.contents = $this$$1;\n  $this$$1.hashMap = new Map([]);\n  $this$$1[\"init@21-2\"] = 1;\n  iterate(function (item) {\n    const value = MutableSet$00601$$Add$$2B595(this$.contents, item);\n    void value;\n  }, items);\n});\nexport function MutableSet$00601$reflection($gen$$4) {\n  return type(\"Fable.Collections.MutableSet`1\", [$gen$$4]);\n}\nexport function MutableSet$00601$$$$002Ector$$Z6150332D(items, comparer) {\n  return this instanceof MutableSet$00601 ? MutableSet$00601.call(this, items, comparer) : new MutableSet$00601(items, comparer);\n}\n\nfunction MutableSet$00601$$TryFindIndex$$2B595(this$$$1, k) {\n  const h = this$$$1.comparer.GetHashCode(k) | 0;\n  const matchValue = tryGetValue(this$$$1.hashMap, h, null);\n\n  if (matchValue[0]) {\n    return [true, h, matchValue[1].findIndex(function (v) {\n      return this$$$1.comparer.Equals(k, v);\n    })];\n  } else {\n    return [false, h, -1];\n  }\n}\n\nfunction MutableSet$00601$$TryFind$$2B595(this$$$2, k$$1) {\n  const matchValue$$1 = MutableSet$00601$$TryFindIndex$$2B595(this$$$2, k$$1);\n  var $target$$9;\n\n  if (matchValue$$1[0]) {\n    if (matchValue$$1[2] > -1) {\n      $target$$9 = 0;\n    } else {\n      $target$$9 = 1;\n    }\n  } else {\n    $target$$9 = 1;\n  }\n\n  switch ($target$$9) {\n    case 0:\n      {\n        return some(getItemFromDict(this$$$2.hashMap, matchValue$$1[1])[matchValue$$1[2]]);\n      }\n\n    case 1:\n      {\n        return null;\n      }\n  }\n}\n\nexport function MutableSet$00601$$get_Comparer(this$$$3) {\n  return this$$$3.comparer;\n}\nexport function MutableSet$00601$$Clear(this$$$4) {\n  this$$$4.hashMap.clear();\n}\nexport function MutableSet$00601$$get_Count(this$$$5) {\n  const source = this$$$5.hashMap.values();\n  return sumBy(function projection(pairs) {\n    return pairs.length;\n  }, source, {\n    GetZero() {\n      return 0;\n    },\n\n    Add($x$$2, $y$$3) {\n      return $x$$2 + $y$$3;\n    }\n\n  }) | 0;\n}\nexport function MutableSet$00601$$Add$$2B595(this$$$6, k$$2) {\n  const matchValue$$2 = MutableSet$00601$$TryFindIndex$$2B595(this$$$6, k$$2);\n  var $target$$16;\n\n  if (matchValue$$2[0]) {\n    if (matchValue$$2[2] > -1) {\n      $target$$16 = 0;\n    } else {\n      $target$$16 = 1;\n    }\n  } else {\n    $target$$16 = 1;\n  }\n\n  switch ($target$$16) {\n    case 0:\n      {\n        return false;\n      }\n\n    case 1:\n      {\n        if (matchValue$$2[0]) {\n          const value$$1 = addInPlace(k$$2, getItemFromDict(this$$$6.hashMap, matchValue$$2[1]));\n          void null;\n          return true;\n        } else {\n          this$$$6.hashMap.set(matchValue$$2[1], [k$$2]);\n          return true;\n        }\n      }\n  }\n}\nexport function MutableSet$00601$$Contains$$2B595(this$$$7, k$$3) {\n  const matchValue$$3 = MutableSet$00601$$TryFindIndex$$2B595(this$$$7, k$$3);\n  var $target$$19;\n\n  if (matchValue$$3[0]) {\n    if (matchValue$$3[2] > -1) {\n      $target$$19 = 0;\n    } else {\n      $target$$19 = 1;\n    }\n  } else {\n    $target$$19 = 1;\n  }\n\n  switch ($target$$19) {\n    case 0:\n      {\n        return true;\n      }\n\n    case 1:\n      {\n        return false;\n      }\n  }\n}\nexport function MutableSet$00601$$Remove$$2B595(this$$$8, k$$4) {\n  const matchValue$$4 = MutableSet$00601$$TryFindIndex$$2B595(this$$$8, k$$4);\n  var $target$$22;\n\n  if (matchValue$$4[0]) {\n    if (matchValue$$4[2] > -1) {\n      $target$$22 = 0;\n    } else {\n      $target$$22 = 1;\n    }\n  } else {\n    $target$$22 = 1;\n  }\n\n  switch ($target$$22) {\n    case 0:\n      {\n        getItemFromDict(this$$$8.hashMap, matchValue$$4[1]).splice(matchValue$$4[2], 1);\n        return true;\n      }\n\n    case 1:\n      {\n        return false;\n      }\n  }\n}\n\nMutableSet$00601.prototype[Symbol.iterator] = function () {\n  var elems;\n  const this$$$9 = this;\n  return toIterator((elems = delay(function () {\n    return collect(function (values$$1) {\n      return map(function (value$$2) {\n        return value$$2;\n      }, values$$1);\n    }, this$$$9.hashMap.values());\n  }), getEnumerator(elems)));\n};\n\nMutableSet$00601.prototype.Add = function (item$$1) {\n  const this$$$10 = this;\n  const value$$3 = MutableSet$00601$$Add$$2B595(this$$$10, item$$1);\n  void value$$3;\n};\n\nMutableSet$00601.prototype.Clear = function () {\n  const this$$$11 = this;\n  MutableSet$00601$$Clear(this$$$11);\n};\n\nMutableSet$00601.prototype.Contains = function (item$$2) {\n  const this$$$12 = this;\n  return MutableSet$00601$$Contains$$2B595(this$$$12, item$$2);\n};\n\nMutableSet$00601.prototype.CopyTo = function (array, arrayIndex) {\n  const this$$$13 = this;\n  iterateIndexed(function action(i$$8, e) {\n    array[arrayIndex + i$$8] = e;\n  }, this$$$13);\n};\n\nObject.defineProperty(MutableSet$00601.prototype, \"Count\", {\n  \"get\": function () {\n    const this$$$14 = this;\n    return MutableSet$00601$$get_Count(this$$$14) | 0;\n  }\n});\nObject.defineProperty(MutableSet$00601.prototype, \"IsReadOnly\", {\n  \"get\": function () {\n    return false;\n  }\n});\n\nMutableSet$00601.prototype.Remove = function (item$$3) {\n  const this$$$16 = this;\n  return MutableSet$00601$$Remove$$2B595(this$$$16, item$$3);\n};\n\nObject.defineProperty(MutableSet$00601.prototype, \"size\", {\n  \"get\": function () {\n    const this$$$17 = this;\n    return MutableSet$00601$$get_Count(this$$$17) | 0;\n  }\n});\n\nMutableSet$00601.prototype.add = function (k$$5) {\n  const this$$$18 = this;\n  const value$$4 = MutableSet$00601$$Add$$2B595(this$$$18, k$$5);\n  void value$$4;\n  return this$$$18;\n};\n\nMutableSet$00601.prototype.add_ = function (k$$6) {\n  const this$$$19 = this;\n  return MutableSet$00601$$Add$$2B595(this$$$19, k$$6);\n};\n\nMutableSet$00601.prototype.clear = function () {\n  const this$$$20 = this;\n  MutableSet$00601$$Clear(this$$$20);\n};\n\nMutableSet$00601.prototype.delete = function (k$$7) {\n  const this$$$21 = this;\n  return MutableSet$00601$$Remove$$2B595(this$$$21, k$$7);\n};\n\nMutableSet$00601.prototype.has = function (k$$8) {\n  const this$$$22 = this;\n  return MutableSet$00601$$Contains$$2B595(this$$$22, k$$8);\n};\n\nMutableSet$00601.prototype.keys = function () {\n  const this$$$23 = this;\n  return map(function mapping(x) {\n    return x;\n  }, this$$$23);\n};\n\nMutableSet$00601.prototype.values = function () {\n  const this$$$24 = this;\n  return map(function mapping$$1(x$$1) {\n    return x$$1;\n  }, this$$$24);\n};\n\nMutableSet$00601.prototype.entries = function () {\n  const this$$$25 = this;\n  return map(function mapping$$2(v$$1) {\n    return [v$$1, v$$1];\n  }, this$$$25);\n};","import { List, Record, declare, Union } from \"./Types.js\";\nimport { type, record, bool, list, union as union$$1, int32 } from \"./Reflection.js\";\nimport { value as value$$2, some, Choice } from \"./Option.js\";\nimport { iterate as iterate$$1, delay, collect, singleton as singleton$$1, empty as empty$$1, fold as fold$$1, toIterator, map as map$$1, reduce, getEnumerator, unfold } from \"./Seq.js\";\nimport { structuralHash, isDisposable } from \"./Util.js\";\nimport { join } from \"./String.js\";\nimport { MutableSet$00601$$Add$$2B595 as MutableSet$002400601$0024$0024Add$0024$00242B595, MutableSet$00601$$$$002Ector$$Z6150332D as MutableSet$002400601$0024$0024$0024$0024002Ector$0024$0024Z6150332D } from \"./MutableSet\";\nexport const SetTree$00601 = declare(function Set_SetTree(tag, name, ...fields) {\n  Union.call(this, tag, name, ...fields);\n}, Union);\nexport function SetTree$00601$reflection($gen$$3) {\n  return union$$1(\"Set.SetTree`1\", [$gen$$3], SetTree$00601, () => [\"SetEmpty\", [\"SetNode\", [$gen$$3, SetTree$00601$reflection($gen$$3), SetTree$00601$reflection($gen$$3), int32]], [\"SetOne\", [$gen$$3]]]);\n}\nexport function SetTreeModule$$$countAux($s$$4, $acc$$5) {\n  SetTreeModule$$$countAux: while (true) {\n    const s = $s$$4,\n          acc = $acc$$5;\n\n    switch (s.tag) {\n      case 2:\n        {\n          return acc + 1 | 0;\n        }\n\n      case 0:\n        {\n          return acc | 0;\n        }\n\n      default:\n        {\n          $s$$4 = s.fields[1];\n          $acc$$5 = SetTreeModule$$$countAux(s.fields[2], acc + 1);\n          continue SetTreeModule$$$countAux;\n        }\n    }\n\n    break;\n  }\n}\nexport function SetTreeModule$$$count(s$$1) {\n  return SetTreeModule$$$countAux(s$$1, 0);\n}\nexport function SetTreeModule$$$SetOne(n) {\n  return new SetTree$00601(2, \"SetOne\", n);\n}\nexport function SetTreeModule$$$SetNode(x, l$$1, r$$1, h) {\n  return new SetTree$00601(1, \"SetNode\", x, l$$1, r$$1, h);\n}\nexport function SetTreeModule$$$height(t) {\n  switch (t.tag) {\n    case 2:\n      {\n        return 1;\n      }\n\n    case 1:\n      {\n        return t.fields[3] | 0;\n      }\n\n    default:\n      {\n        return 0;\n      }\n  }\n}\nexport const SetTreeModule$$$tolerance = 2;\nexport function SetTreeModule$$$mk(l$$2, k, r$$2) {\n  var $target$$16;\n\n  if (l$$2.tag === 0) {\n    if (r$$2.tag === 0) {\n      $target$$16 = 0;\n    } else {\n      $target$$16 = 1;\n    }\n  } else {\n    $target$$16 = 1;\n  }\n\n  switch ($target$$16) {\n    case 0:\n      {\n        return SetTreeModule$$$SetOne(k);\n      }\n\n    case 1:\n      {\n        const hl = SetTreeModule$$$height(l$$2) | 0;\n        const hr = SetTreeModule$$$height(r$$2) | 0;\n        const m = (hl < hr ? hr : hl) | 0;\n        return SetTreeModule$$$SetNode(k, l$$2, r$$2, m + 1);\n      }\n  }\n}\nexport function SetTreeModule$$$rebalance(t1, k$$1, t2) {\n  const t1h = SetTreeModule$$$height(t1) | 0;\n  const t2h = SetTreeModule$$$height(t2) | 0;\n\n  if (t2h > t1h + SetTreeModule$$$tolerance) {\n    if (t2.tag === 1) {\n      if (SetTreeModule$$$height(t2.fields[1]) > t1h + 1) {\n        if (t2.fields[1].tag === 1) {\n          return SetTreeModule$$$mk(SetTreeModule$$$mk(t1, k$$1, t2.fields[1].fields[1]), t2.fields[1].fields[0], SetTreeModule$$$mk(t2.fields[1].fields[2], t2.fields[0], t2.fields[2]));\n        } else {\n          throw new Error(\"rebalance\");\n        }\n      } else {\n        return SetTreeModule$$$mk(SetTreeModule$$$mk(t1, k$$1, t2.fields[1]), t2.fields[0], t2.fields[2]);\n      }\n    } else {\n      throw new Error(\"rebalance\");\n    }\n  } else if (t1h > t2h + SetTreeModule$$$tolerance) {\n    if (t1.tag === 1) {\n      if (SetTreeModule$$$height(t1.fields[2]) > t2h + 1) {\n        if (t1.fields[2].tag === 1) {\n          return SetTreeModule$$$mk(SetTreeModule$$$mk(t1.fields[1], t1.fields[0], t1.fields[2].fields[1]), t1.fields[2].fields[0], SetTreeModule$$$mk(t1.fields[2].fields[2], k$$1, t2));\n        } else {\n          throw new Error(\"rebalance\");\n        }\n      } else {\n        return SetTreeModule$$$mk(t1.fields[1], t1.fields[0], SetTreeModule$$$mk(t1.fields[2], k$$1, t2));\n      }\n    } else {\n      throw new Error(\"rebalance\");\n    }\n  } else {\n    return SetTreeModule$$$mk(t1, k$$1, t2);\n  }\n}\nexport function SetTreeModule$$$add(comparer, k$$2, t$$1) {\n  switch (t$$1.tag) {\n    case 2:\n      {\n        const c$$1 = comparer.Compare(k$$2, t$$1.fields[0]) | 0;\n\n        if (c$$1 < 0) {\n          return SetTreeModule$$$SetNode(k$$2, new SetTree$00601(0, \"SetEmpty\"), t$$1, 2);\n        } else if (c$$1 === 0) {\n          return t$$1;\n        } else {\n          return SetTreeModule$$$SetNode(k$$2, t$$1, new SetTree$00601(0, \"SetEmpty\"), 2);\n        }\n      }\n\n    case 0:\n      {\n        return SetTreeModule$$$SetOne(k$$2);\n      }\n\n    default:\n      {\n        const c = comparer.Compare(k$$2, t$$1.fields[0]) | 0;\n\n        if (c < 0) {\n          return SetTreeModule$$$rebalance(SetTreeModule$$$add(comparer, k$$2, t$$1.fields[1]), t$$1.fields[0], t$$1.fields[2]);\n        } else if (c === 0) {\n          return t$$1;\n        } else {\n          return SetTreeModule$$$rebalance(t$$1.fields[1], t$$1.fields[0], SetTreeModule$$$add(comparer, k$$2, t$$1.fields[2]));\n        }\n      }\n  }\n}\nexport function SetTreeModule$$$balance(comparer$$1, t1$$1, k$$3, t2$$1) {\n  var $target$$27, t2$$2, t1$$2, k1, t2$$3, k2$$2, t1$$3, h1, h2, k1$$1, k2$$3, t11, t12, t21, t22;\n\n  if (t1$$1.tag === 2) {\n    if (t2$$1.tag === 0) {\n      $target$$27 = 1;\n      t1$$2 = t1$$1;\n    } else if (t2$$1.tag === 2) {\n      $target$$27 = 2;\n      k1 = t1$$1.fields[0];\n      t2$$3 = t2$$1;\n    } else {\n      $target$$27 = 2;\n      k1 = t1$$1.fields[0];\n      t2$$3 = t2$$1;\n    }\n  } else if (t1$$1.tag === 1) {\n    if (t2$$1.tag === 2) {\n      $target$$27 = 3;\n      k2$$2 = t2$$1.fields[0];\n      t1$$3 = t1$$1;\n    } else if (t2$$1.tag === 1) {\n      $target$$27 = 4;\n      h1 = t1$$1.fields[3];\n      h2 = t2$$1.fields[3];\n      k1$$1 = t1$$1.fields[0];\n      k2$$3 = t2$$1.fields[0];\n      t11 = t1$$1.fields[1];\n      t12 = t1$$1.fields[2];\n      t21 = t2$$1.fields[1];\n      t22 = t2$$1.fields[2];\n    } else {\n      $target$$27 = 1;\n      t1$$2 = t1$$1;\n    }\n  } else {\n    $target$$27 = 0;\n    t2$$2 = t2$$1;\n  }\n\n  switch ($target$$27) {\n    case 0:\n      {\n        return SetTreeModule$$$add(comparer$$1, k$$3, t2$$2);\n      }\n\n    case 1:\n      {\n        return SetTreeModule$$$add(comparer$$1, k$$3, t1$$2);\n      }\n\n    case 2:\n      {\n        return SetTreeModule$$$add(comparer$$1, k$$3, SetTreeModule$$$add(comparer$$1, k1, t2$$3));\n      }\n\n    case 3:\n      {\n        return SetTreeModule$$$add(comparer$$1, k$$3, SetTreeModule$$$add(comparer$$1, k2$$2, t1$$3));\n      }\n\n    case 4:\n      {\n        if (h1 + SetTreeModule$$$tolerance < h2) {\n          return SetTreeModule$$$rebalance(SetTreeModule$$$balance(comparer$$1, t1$$1, k$$3, t21), k2$$3, t22);\n        } else if (h2 + SetTreeModule$$$tolerance < h1) {\n          return SetTreeModule$$$rebalance(t11, k1$$1, SetTreeModule$$$balance(comparer$$1, t12, k$$3, t2$$1));\n        } else {\n          return SetTreeModule$$$mk(t1$$1, k$$3, t2$$1);\n        }\n      }\n  }\n}\nexport function SetTreeModule$$$split(comparer$$2, pivot, t$$2) {\n  switch (t$$2.tag) {\n    case 2:\n      {\n        const c$$3 = comparer$$2.Compare(t$$2.fields[0], pivot) | 0;\n\n        if (c$$3 < 0) {\n          return [t$$2, false, new SetTree$00601(0, \"SetEmpty\")];\n        } else if (c$$3 === 0) {\n          return [new SetTree$00601(0, \"SetEmpty\"), true, new SetTree$00601(0, \"SetEmpty\")];\n        } else {\n          return [new SetTree$00601(0, \"SetEmpty\"), false, t$$2];\n        }\n      }\n\n    case 0:\n      {\n        return [new SetTree$00601(0, \"SetEmpty\"), false, new SetTree$00601(0, \"SetEmpty\")];\n      }\n\n    default:\n      {\n        const c$$2 = comparer$$2.Compare(pivot, t$$2.fields[0]) | 0;\n\n        if (c$$2 < 0) {\n          const patternInput = SetTreeModule$$$split(comparer$$2, pivot, t$$2.fields[1]);\n          return [patternInput[0], patternInput[1], SetTreeModule$$$balance(comparer$$2, patternInput[2], t$$2.fields[0], t$$2.fields[2])];\n        } else if (c$$2 === 0) {\n          return [t$$2.fields[1], true, t$$2.fields[2]];\n        } else {\n          const patternInput$$1 = SetTreeModule$$$split(comparer$$2, pivot, t$$2.fields[2]);\n          return [SetTreeModule$$$balance(comparer$$2, t$$2.fields[1], t$$2.fields[0], patternInput$$1[0]), patternInput$$1[1], patternInput$$1[2]];\n        }\n      }\n  }\n}\nexport function SetTreeModule$$$spliceOutSuccessor(t$$3) {\n  switch (t$$3.tag) {\n    case 2:\n      {\n        return [t$$3.fields[0], new SetTree$00601(0, \"SetEmpty\")];\n      }\n\n    case 1:\n      {\n        if (t$$3.fields[1].tag === 0) {\n          return [t$$3.fields[0], t$$3.fields[2]];\n        } else {\n          const patternInput$$2 = SetTreeModule$$$spliceOutSuccessor(t$$3.fields[1]);\n          return [patternInput$$2[0], SetTreeModule$$$mk(patternInput$$2[1], t$$3.fields[0], t$$3.fields[2])];\n        }\n      }\n\n    default:\n      {\n        throw new Error(\"internal error: Set.spliceOutSuccessor\");\n      }\n  }\n}\nexport function SetTreeModule$$$remove(comparer$$3, k$$4, t$$4) {\n  switch (t$$4.tag) {\n    case 2:\n      {\n        const c$$4 = comparer$$3.Compare(k$$4, t$$4.fields[0]) | 0;\n\n        if (c$$4 === 0) {\n          return new SetTree$00601(0, \"SetEmpty\");\n        } else {\n          return t$$4;\n        }\n      }\n\n    case 1:\n      {\n        const c$$5 = comparer$$3.Compare(k$$4, t$$4.fields[0]) | 0;\n\n        if (c$$5 < 0) {\n          return SetTreeModule$$$rebalance(SetTreeModule$$$remove(comparer$$3, k$$4, t$$4.fields[1]), t$$4.fields[0], t$$4.fields[2]);\n        } else if (c$$5 === 0) {\n          if (t$$4.fields[1].tag === 0) {\n            return t$$4.fields[2];\n          } else if (t$$4.fields[2].tag === 0) {\n            return t$$4.fields[1];\n          } else {\n            const patternInput$$3 = SetTreeModule$$$spliceOutSuccessor(t$$4.fields[2]);\n            return SetTreeModule$$$mk(t$$4.fields[1], patternInput$$3[0], patternInput$$3[1]);\n          }\n        } else {\n          return SetTreeModule$$$rebalance(t$$4.fields[1], t$$4.fields[0], SetTreeModule$$$remove(comparer$$3, k$$4, t$$4.fields[2]));\n        }\n      }\n\n    default:\n      {\n        return t$$4;\n      }\n  }\n}\nexport function SetTreeModule$$$mem($comparer$$4$$35, $k$$5$$36, $t$$5$$37) {\n  SetTreeModule$$$mem: while (true) {\n    const comparer$$4 = $comparer$$4$$35,\n          k$$5 = $k$$5$$36,\n          t$$5 = $t$$5$$37;\n\n    switch (t$$5.tag) {\n      case 2:\n        {\n          return comparer$$4.Compare(k$$5, t$$5.fields[0]) === 0;\n        }\n\n      case 0:\n        {\n          return false;\n        }\n\n      default:\n        {\n          const c$$6 = comparer$$4.Compare(k$$5, t$$5.fields[0]) | 0;\n\n          if (c$$6 < 0) {\n            $comparer$$4$$35 = comparer$$4;\n            $k$$5$$36 = k$$5;\n            $t$$5$$37 = t$$5.fields[1];\n            continue SetTreeModule$$$mem;\n          } else if (c$$6 === 0) {\n            return true;\n          } else {\n            $comparer$$4$$35 = comparer$$4;\n            $k$$5$$36 = k$$5;\n            $t$$5$$37 = t$$5.fields[2];\n            continue SetTreeModule$$$mem;\n          }\n        }\n    }\n\n    break;\n  }\n}\nexport function SetTreeModule$$$iter($f$$38, $t$$6$$39) {\n  SetTreeModule$$$iter: while (true) {\n    const f = $f$$38,\n          t$$6 = $t$$6$$39;\n\n    switch (t$$6.tag) {\n      case 2:\n        {\n          f(t$$6.fields[0]);\n          break;\n        }\n\n      case 0:\n        {\n          break;\n        }\n\n      default:\n        {\n          SetTreeModule$$$iter(f, t$$6.fields[1]);\n          f(t$$6.fields[0]);\n          $f$$38 = f;\n          $t$$6$$39 = t$$6.fields[2];\n          continue SetTreeModule$$$iter;\n        }\n    }\n\n    break;\n  }\n}\nexport function SetTreeModule$$$foldBack($f$$1$$40, $m$$1$$41, $x$$1$$42) {\n  SetTreeModule$$$foldBack: while (true) {\n    const f$$1 = $f$$1$$40,\n          m$$1 = $m$$1$$41,\n          x$$1 = $x$$1$$42;\n\n    switch (m$$1.tag) {\n      case 2:\n        {\n          return f$$1(m$$1.fields[0], x$$1);\n        }\n\n      case 0:\n        {\n          return x$$1;\n        }\n\n      default:\n        {\n          $f$$1$$40 = f$$1;\n          $m$$1$$41 = m$$1.fields[1];\n          $x$$1$$42 = f$$1(m$$1.fields[0], SetTreeModule$$$foldBack(f$$1, m$$1.fields[2], x$$1));\n          continue SetTreeModule$$$foldBack;\n        }\n    }\n\n    break;\n  }\n}\nexport function SetTreeModule$$$fold($f$$2$$43, $x$$2$$44, $m$$2$$45) {\n  SetTreeModule$$$fold: while (true) {\n    const f$$2 = $f$$2$$43,\n          x$$2 = $x$$2$$44,\n          m$$2 = $m$$2$$45;\n\n    switch (m$$2.tag) {\n      case 2:\n        {\n          return f$$2(x$$2, m$$2.fields[0]);\n        }\n\n      case 0:\n        {\n          return x$$2;\n        }\n\n      default:\n        {\n          const x$$3 = SetTreeModule$$$fold(f$$2, x$$2, m$$2.fields[1]);\n          const x$$4 = f$$2(x$$3, m$$2.fields[0]);\n          $f$$2$$43 = f$$2;\n          $x$$2$$44 = x$$4;\n          $m$$2$$45 = m$$2.fields[2];\n          continue SetTreeModule$$$fold;\n        }\n    }\n\n    break;\n  }\n}\nexport function SetTreeModule$$$forall($f$$3$$46, $m$$3$$47) {\n  SetTreeModule$$$forall: while (true) {\n    const f$$3 = $f$$3$$46,\n          m$$3 = $m$$3$$47;\n\n    switch (m$$3.tag) {\n      case 2:\n        {\n          return f$$3(m$$3.fields[0]);\n        }\n\n      case 0:\n        {\n          return true;\n        }\n\n      default:\n        {\n          if (f$$3(m$$3.fields[0]) ? SetTreeModule$$$forall(f$$3, m$$3.fields[1]) : false) {\n            $f$$3$$46 = f$$3;\n            $m$$3$$47 = m$$3.fields[2];\n            continue SetTreeModule$$$forall;\n          } else {\n            return false;\n          }\n        }\n    }\n\n    break;\n  }\n}\nexport function SetTreeModule$$$exists($f$$4$$48, $m$$4$$49) {\n  SetTreeModule$$$exists: while (true) {\n    const f$$4 = $f$$4$$48,\n          m$$4 = $m$$4$$49;\n\n    switch (m$$4.tag) {\n      case 2:\n        {\n          return f$$4(m$$4.fields[0]);\n        }\n\n      case 0:\n        {\n          return false;\n        }\n\n      default:\n        {\n          if (f$$4(m$$4.fields[0]) ? true : SetTreeModule$$$exists(f$$4, m$$4.fields[1])) {\n            return true;\n          } else {\n            $f$$4$$48 = f$$4;\n            $m$$4$$49 = m$$4.fields[2];\n            continue SetTreeModule$$$exists;\n          }\n        }\n    }\n\n    break;\n  }\n}\nexport function SetTreeModule$$$isEmpty(m$$5) {\n  if (m$$5.tag === 0) {\n    return true;\n  } else {\n    return false;\n  }\n}\nexport function SetTreeModule$$$subset(comparer$$5, a, b) {\n  return SetTreeModule$$$forall(function (x$$5) {\n    return SetTreeModule$$$mem(comparer$$5, x$$5, b);\n  }, a);\n}\nexport function SetTreeModule$$$psubset(comparer$$6, a$$1, b$$1) {\n  if (SetTreeModule$$$forall(function (x$$6) {\n    return SetTreeModule$$$mem(comparer$$6, x$$6, b$$1);\n  }, a$$1)) {\n    return SetTreeModule$$$exists(function (x$$7) {\n      return !SetTreeModule$$$mem(comparer$$6, x$$7, a$$1);\n    }, b$$1);\n  } else {\n    return false;\n  }\n}\nexport function SetTreeModule$$$filterAux($comparer$$7$$57, $f$$5$$58, $s$$2$$59, $acc$$1$$60) {\n  SetTreeModule$$$filterAux: while (true) {\n    const comparer$$7 = $comparer$$7$$57,\n          f$$5 = $f$$5$$58,\n          s$$2 = $s$$2$$59,\n          acc$$1 = $acc$$1$$60;\n\n    switch (s$$2.tag) {\n      case 2:\n        {\n          if (f$$5(s$$2.fields[0])) {\n            return SetTreeModule$$$add(comparer$$7, s$$2.fields[0], acc$$1);\n          } else {\n            return acc$$1;\n          }\n        }\n\n      case 0:\n        {\n          return acc$$1;\n        }\n\n      default:\n        {\n          const acc$$2 = f$$5(s$$2.fields[0]) ? SetTreeModule$$$add(comparer$$7, s$$2.fields[0], acc$$1) : acc$$1;\n          $comparer$$7$$57 = comparer$$7;\n          $f$$5$$58 = f$$5;\n          $s$$2$$59 = s$$2.fields[1];\n          $acc$$1$$60 = SetTreeModule$$$filterAux(comparer$$7, f$$5, s$$2.fields[2], acc$$2);\n          continue SetTreeModule$$$filterAux;\n        }\n    }\n\n    break;\n  }\n}\nexport function SetTreeModule$$$filter(comparer$$8, f$$6, s$$3) {\n  return SetTreeModule$$$filterAux(comparer$$8, f$$6, s$$3, new SetTree$00601(0, \"SetEmpty\"));\n}\nexport function SetTreeModule$$$diffAux($comparer$$9$$64, $m$$6$$65, $acc$$3$$66) {\n  SetTreeModule$$$diffAux: while (true) {\n    const comparer$$9 = $comparer$$9$$64,\n          m$$6 = $m$$6$$65,\n          acc$$3 = $acc$$3$$66;\n\n    switch (m$$6.tag) {\n      case 2:\n        {\n          return SetTreeModule$$$remove(comparer$$9, m$$6.fields[0], acc$$3);\n        }\n\n      case 0:\n        {\n          return acc$$3;\n        }\n\n      default:\n        {\n          $comparer$$9$$64 = comparer$$9;\n          $m$$6$$65 = m$$6.fields[1];\n          $acc$$3$$66 = SetTreeModule$$$diffAux(comparer$$9, m$$6.fields[2], SetTreeModule$$$remove(comparer$$9, m$$6.fields[0], acc$$3));\n          continue SetTreeModule$$$diffAux;\n        }\n    }\n\n    break;\n  }\n}\nexport function SetTreeModule$$$diff(comparer$$10, a$$2, b$$2) {\n  return SetTreeModule$$$diffAux(comparer$$10, b$$2, a$$2);\n}\nexport function SetTreeModule$$$union(comparer$$11, t1$$4, t2$$4) {\n  var $target$$73, h1$$1, h2$$1, k1$$4, k2$$16, t11$$2, t12$$2, t21$$1, t22$$1, t$$7, t$$8, k1$$5, t2$$5, k2$$17, t1$$5;\n\n  if (t1$$4.tag === 0) {\n    $target$$73 = 1;\n    t$$7 = t2$$4;\n  } else if (t1$$4.tag === 2) {\n    if (t2$$4.tag === 0) {\n      $target$$73 = 2;\n      t$$8 = t1$$4;\n    } else if (t2$$4.tag === 2) {\n      $target$$73 = 3;\n      k1$$5 = t1$$4.fields[0];\n      t2$$5 = t2$$4;\n    } else {\n      $target$$73 = 3;\n      k1$$5 = t1$$4.fields[0];\n      t2$$5 = t2$$4;\n    }\n  } else if (t2$$4.tag === 0) {\n    $target$$73 = 2;\n    t$$8 = t1$$4;\n  } else if (t2$$4.tag === 2) {\n    $target$$73 = 4;\n    k2$$17 = t2$$4.fields[0];\n    t1$$5 = t1$$4;\n  } else {\n    $target$$73 = 0;\n    h1$$1 = t1$$4.fields[3];\n    h2$$1 = t2$$4.fields[3];\n    k1$$4 = t1$$4.fields[0];\n    k2$$16 = t2$$4.fields[0];\n    t11$$2 = t1$$4.fields[1];\n    t12$$2 = t1$$4.fields[2];\n    t21$$1 = t2$$4.fields[1];\n    t22$$1 = t2$$4.fields[2];\n  }\n\n  switch ($target$$73) {\n    case 0:\n      {\n        if (h1$$1 > h2$$1) {\n          const patternInput$$4 = SetTreeModule$$$split(comparer$$11, k1$$4, t2$$4);\n          return SetTreeModule$$$balance(comparer$$11, SetTreeModule$$$union(comparer$$11, t11$$2, patternInput$$4[0]), k1$$4, SetTreeModule$$$union(comparer$$11, t12$$2, patternInput$$4[2]));\n        } else {\n          const patternInput$$5 = SetTreeModule$$$split(comparer$$11, k2$$16, t1$$4);\n          return SetTreeModule$$$balance(comparer$$11, SetTreeModule$$$union(comparer$$11, t21$$1, patternInput$$5[0]), k2$$16, SetTreeModule$$$union(comparer$$11, t22$$1, patternInput$$5[2]));\n        }\n      }\n\n    case 1:\n      {\n        return t$$7;\n      }\n\n    case 2:\n      {\n        return t$$8;\n      }\n\n    case 3:\n      {\n        return SetTreeModule$$$add(comparer$$11, k1$$5, t2$$5);\n      }\n\n    case 4:\n      {\n        return SetTreeModule$$$add(comparer$$11, k2$$17, t1$$5);\n      }\n  }\n}\nexport function SetTreeModule$$$intersectionAux($comparer$$12$$74, $b$$3$$75, $m$$7$$76, $acc$$4$$77) {\n  SetTreeModule$$$intersectionAux: while (true) {\n    const comparer$$12 = $comparer$$12$$74,\n          b$$3 = $b$$3$$75,\n          m$$7 = $m$$7$$76,\n          acc$$4 = $acc$$4$$77;\n\n    switch (m$$7.tag) {\n      case 2:\n        {\n          if (SetTreeModule$$$mem(comparer$$12, m$$7.fields[0], b$$3)) {\n            return SetTreeModule$$$add(comparer$$12, m$$7.fields[0], acc$$4);\n          } else {\n            return acc$$4;\n          }\n        }\n\n      case 0:\n        {\n          return acc$$4;\n        }\n\n      default:\n        {\n          const acc$$5 = SetTreeModule$$$intersectionAux(comparer$$12, b$$3, m$$7.fields[2], acc$$4);\n          const acc$$6 = SetTreeModule$$$mem(comparer$$12, m$$7.fields[0], b$$3) ? SetTreeModule$$$add(comparer$$12, m$$7.fields[0], acc$$5) : acc$$5;\n          $comparer$$12$$74 = comparer$$12;\n          $b$$3$$75 = b$$3;\n          $m$$7$$76 = m$$7.fields[1];\n          $acc$$4$$77 = acc$$6;\n          continue SetTreeModule$$$intersectionAux;\n        }\n    }\n\n    break;\n  }\n}\nexport function SetTreeModule$$$intersection(comparer$$13, a$$3, b$$4) {\n  return SetTreeModule$$$intersectionAux(comparer$$13, b$$4, a$$3, new SetTree$00601(0, \"SetEmpty\"));\n}\nexport function SetTreeModule$$$partition1(comparer$$14, f$$7, k$$16, acc1, acc2) {\n  if (f$$7(k$$16)) {\n    return [SetTreeModule$$$add(comparer$$14, k$$16, acc1), acc2];\n  } else {\n    return [acc1, SetTreeModule$$$add(comparer$$14, k$$16, acc2)];\n  }\n}\nexport function SetTreeModule$$$partitionAux($comparer$$15$$86, $f$$8$$87, $s$$4$$88, $acc_0$$89, $acc_1$$90) {\n  SetTreeModule$$$partitionAux: while (true) {\n    const comparer$$15 = $comparer$$15$$86,\n          f$$8 = $f$$8$$87,\n          s$$4 = $s$$4$$88,\n          acc_0 = $acc_0$$89,\n          acc_1 = $acc_1$$90;\n\n    switch (s$$4.tag) {\n      case 2:\n        {\n          return SetTreeModule$$$partition1(comparer$$15, f$$8, s$$4.fields[0], acc_0, acc_1);\n        }\n\n      case 0:\n        {\n          return [acc_0, acc_1];\n        }\n\n      default:\n        {\n          const acc$$8 = SetTreeModule$$$partitionAux(comparer$$15, f$$8, s$$4.fields[2], acc_0, acc_1);\n          const acc$$9 = SetTreeModule$$$partition1(comparer$$15, f$$8, s$$4.fields[0], acc$$8[0], acc$$8[1]);\n          $comparer$$15$$86 = comparer$$15;\n          $f$$8$$87 = f$$8;\n          $s$$4$$88 = s$$4.fields[1];\n          $acc_0$$89 = acc$$9[0];\n          $acc_1$$90 = acc$$9[1];\n          continue SetTreeModule$$$partitionAux;\n        }\n    }\n\n    break;\n  }\n}\nexport function SetTreeModule$$$partition(comparer$$16, f$$9, s$$5) {\n  const seed = [new SetTree$00601(0, \"SetEmpty\"), new SetTree$00601(0, \"SetEmpty\")];\n  return SetTreeModule$$$partitionAux(comparer$$16, f$$9, s$$5, seed[0], seed[1]);\n}\nexport function SetTreeModule$$$$007CMatchSetNode$007CMatchSetEmpty$007C(s$$6) {\n  switch (s$$6.tag) {\n    case 2:\n      {\n        return new Choice(0, \"Choice1Of2\", [s$$6.fields[0], new SetTree$00601(0, \"SetEmpty\"), new SetTree$00601(0, \"SetEmpty\")]);\n      }\n\n    case 0:\n      {\n        return new Choice(1, \"Choice2Of2\", null);\n      }\n\n    default:\n      {\n        return new Choice(0, \"Choice1Of2\", [s$$6.fields[0], s$$6.fields[1], s$$6.fields[2]]);\n      }\n  }\n}\nexport function SetTreeModule$$$minimumElementAux($s$$7$$95, $n$$1$$96) {\n  SetTreeModule$$$minimumElementAux: while (true) {\n    const s$$7 = $s$$7$$95,\n          n$$1 = $n$$1$$96;\n\n    switch (s$$7.tag) {\n      case 2:\n        {\n          return s$$7.fields[0];\n        }\n\n      case 0:\n        {\n          return n$$1;\n        }\n\n      default:\n        {\n          $s$$7$$95 = s$$7.fields[1];\n          $n$$1$$96 = s$$7.fields[0];\n          continue SetTreeModule$$$minimumElementAux;\n        }\n    }\n\n    break;\n  }\n}\nexport function SetTreeModule$$$minimumElementOpt(s$$8) {\n  switch (s$$8.tag) {\n    case 2:\n      {\n        return some(s$$8.fields[0]);\n      }\n\n    case 0:\n      {\n        return null;\n      }\n\n    default:\n      {\n        return some(SetTreeModule$$$minimumElementAux(s$$8.fields[1], s$$8.fields[0]));\n      }\n  }\n}\nexport function SetTreeModule$$$maximumElementAux($s$$9$$98, $n$$2$$99) {\n  SetTreeModule$$$maximumElementAux: while (true) {\n    const s$$9 = $s$$9$$98,\n          n$$2 = $n$$2$$99;\n\n    switch (s$$9.tag) {\n      case 2:\n        {\n          return s$$9.fields[0];\n        }\n\n      case 0:\n        {\n          return n$$2;\n        }\n\n      default:\n        {\n          $s$$9$$98 = s$$9.fields[2];\n          $n$$2$$99 = s$$9.fields[0];\n          continue SetTreeModule$$$maximumElementAux;\n        }\n    }\n\n    break;\n  }\n}\nexport function SetTreeModule$$$maximumElementOpt(s$$10) {\n  switch (s$$10.tag) {\n    case 2:\n      {\n        return some(s$$10.fields[0]);\n      }\n\n    case 0:\n      {\n        return null;\n      }\n\n    default:\n      {\n        return some(SetTreeModule$$$maximumElementAux(s$$10.fields[2], s$$10.fields[0]));\n      }\n  }\n}\nexport function SetTreeModule$$$minimumElement(s$$11) {\n  const matchValue$$4 = SetTreeModule$$$minimumElementOpt(s$$11);\n\n  if (matchValue$$4 == null) {\n    throw new Error(\"Set contains no elements\");\n  } else {\n    const k$$27 = value$$2(matchValue$$4);\n    return k$$27;\n  }\n}\nexport function SetTreeModule$$$maximumElement(s$$12) {\n  const matchValue$$5 = SetTreeModule$$$maximumElementOpt(s$$12);\n\n  if (matchValue$$5 == null) {\n    throw new Error(\"Set contains no elements\");\n  } else {\n    const k$$28 = value$$2(matchValue$$5);\n    return k$$28;\n  }\n}\nexport const SetTreeModule$002ESetIterator$00601 = declare(function Set_SetTreeModule_SetIterator(arg1, arg2) {\n  this.stack = arg1;\n  this.started = arg2;\n}, Record);\nexport function SetTreeModule$002ESetIterator$00601$reflection($gen$$103) {\n  return record(\"Set.SetTreeModule.SetIterator`1\", [$gen$$103], SetTreeModule$002ESetIterator$00601, () => [[\"stack\", list(SetTree$00601$reflection($gen$$103))], [\"started\", bool]]);\n}\nexport function SetTreeModule$$$collapseLHS($stack$$104) {\n  SetTreeModule$$$collapseLHS: while (true) {\n    const stack = $stack$$104;\n\n    if (stack.tail != null) {\n      if (stack.head.tag === 2) {\n        return stack;\n      } else if (stack.head.tag === 1) {\n        $stack$$104 = new List(stack.head.fields[1], new List(SetTreeModule$$$SetOne(stack.head.fields[0]), new List(stack.head.fields[2], stack.tail)));\n        continue SetTreeModule$$$collapseLHS;\n      } else {\n        $stack$$104 = stack.tail;\n        continue SetTreeModule$$$collapseLHS;\n      }\n    } else {\n      return new List();\n    }\n\n    break;\n  }\n}\nexport function SetTreeModule$$$mkIterator(s$$13) {\n  return new SetTreeModule$002ESetIterator$00601(SetTreeModule$$$collapseLHS(new List(s$$13, new List())), false);\n}\nexport function SetTreeModule$$$notStarted() {\n  throw new Error(\"Enumeration not started\");\n}\nexport function SetTreeModule$$$alreadyFinished() {\n  throw new Error(\"Enumeration already started\");\n}\nexport function SetTreeModule$$$current(i) {\n  if (i.started) {\n    const matchValue$$6 = i.stack;\n\n    if (matchValue$$6.tail == null) {\n      return SetTreeModule$$$alreadyFinished();\n    } else if (matchValue$$6.head.tag === 2) {\n      return matchValue$$6.head.fields[0];\n    } else {\n      throw new Error(\"Please report error: Set iterator, unexpected stack for current\");\n    }\n  } else {\n    return SetTreeModule$$$notStarted();\n  }\n}\nexport function SetTreeModule$$$moveNext(i$$1) {\n  if (i$$1.started) {\n    const matchValue$$7 = i$$1.stack;\n\n    if (matchValue$$7.tail == null) {\n      return false;\n    } else if (matchValue$$7.head.tag === 2) {\n      i$$1.stack = SetTreeModule$$$collapseLHS(matchValue$$7.tail);\n      return !(i$$1.stack.tail == null);\n    } else {\n      throw new Error(\"Please report error: Set iterator, unexpected stack for moveNext\");\n    }\n  } else {\n    i$$1.started = true;\n    return !(i$$1.stack.tail == null);\n  }\n}\nexport const SetTreeModule$002EmkIEnumerator$00601 = declare(function Set_SetTreeModule_mkIEnumerator(s$$14) {\n  const $this$$1 = this;\n  $this$$1.s = s$$14;\n  $this$$1.i = SetTreeModule$$$mkIterator($this$$1.s);\n});\nexport function SetTreeModule$002EmkIEnumerator$00601$reflection($gen$$108) {\n  return type(\"Set.SetTreeModule.mkIEnumerator`1\", [$gen$$108]);\n}\nexport function SetTreeModule$002EmkIEnumerator$00601$$$$002Ector$$Z5B395D56(s$$14) {\n  return this instanceof SetTreeModule$002EmkIEnumerator$00601 ? SetTreeModule$002EmkIEnumerator$00601.call(this, s$$14) : new SetTreeModule$002EmkIEnumerator$00601(s$$14);\n}\nObject.defineProperty(SetTreeModule$002EmkIEnumerator$00601.prototype, \"Current\", {\n  \"get\": function () {\n    const __ = this;\n    return SetTreeModule$$$current(__.i);\n  }\n});\n\nSetTreeModule$002EmkIEnumerator$00601.prototype.MoveNext = function () {\n  const __$$1 = this;\n  return SetTreeModule$$$moveNext(__$$1.i);\n};\n\nSetTreeModule$002EmkIEnumerator$00601.prototype.Reset = function () {\n  const __$$2 = this;\n  __$$2.i = SetTreeModule$$$mkIterator(__$$2.s);\n};\n\nSetTreeModule$002EmkIEnumerator$00601.prototype.Dispose = function () {};\n\nexport function SetTreeModule$$$mkIEnumerator(s$$15) {\n  return SetTreeModule$002EmkIEnumerator$00601$$$$002Ector$$Z5B395D56(s$$15);\n}\nexport function SetTreeModule$$$toSeq(s$$16) {\n  const en = SetTreeModule$$$mkIEnumerator(s$$16);\n  return unfold(function generator(en$$1) {\n    if (en$$1.MoveNext()) {\n      return [en$$1.Current, en$$1];\n    } else {\n      return null;\n    }\n  }, en);\n}\nexport function SetTreeModule$$$compareStacks($comparer$$17$$112, $l1$$113, $l2$$114) {\n  SetTreeModule$$$compareStacks: while (true) {\n    const comparer$$17 = $comparer$$17$$112,\n          l1 = $l1$$113,\n          l2 = $l2$$114;\n    var $target$$115, t1$$6, t2$$6, n1k, n2k, t1$$7, t2$$7, n1k$$1, n2k$$1, n2r, t1$$8, t2$$8, emp, n1k$$2, n1r, n2k$$2, t1$$9, t2$$9, n1k$$3, n1r$$1, n2k$$3, n2r$$1, t1$$10, t2$$10, n1k$$4, t1$$11, n1k$$5, n1l, n1r$$2, t1$$12, n2k$$4, t2$$11, n2k$$5, n2l, n2r$$2, t2$$12;\n\n    if (l1.tail != null) {\n      if (l2.tail != null) {\n        if (l2.head.tag === 2) {\n          if (l1.head.tag === 2) {\n            $target$$115 = 4;\n            n1k = l1.head.fields[0];\n            n2k = l2.head.fields[0];\n            t1$$7 = l1.tail;\n            t2$$7 = l2.tail;\n          } else if (l1.head.tag === 1) {\n            if (l1.head.fields[1].tag === 0) {\n              $target$$115 = 6;\n              emp = l1.head.fields[1];\n              n1k$$2 = l1.head.fields[0];\n              n1r = l1.head.fields[2];\n              n2k$$2 = l2.head.fields[0];\n              t1$$9 = l1.tail;\n              t2$$9 = l2.tail;\n            } else {\n              $target$$115 = 9;\n              n1k$$5 = l1.head.fields[0];\n              n1l = l1.head.fields[1];\n              n1r$$2 = l1.head.fields[2];\n              t1$$12 = l1.tail;\n            }\n          } else {\n            $target$$115 = 10;\n            n2k$$4 = l2.head.fields[0];\n            t2$$11 = l2.tail;\n          }\n        } else if (l2.head.tag === 1) {\n          if (l2.head.fields[1].tag === 0) {\n            if (l1.head.tag === 2) {\n              $target$$115 = 5;\n              n1k$$1 = l1.head.fields[0];\n              n2k$$1 = l2.head.fields[0];\n              n2r = l2.head.fields[2];\n              t1$$8 = l1.tail;\n              t2$$8 = l2.tail;\n            } else if (l1.head.tag === 1) {\n              if (l1.head.fields[1].tag === 0) {\n                $target$$115 = 7;\n                n1k$$3 = l1.head.fields[0];\n                n1r$$1 = l1.head.fields[2];\n                n2k$$3 = l2.head.fields[0];\n                n2r$$1 = l2.head.fields[2];\n                t1$$10 = l1.tail;\n                t2$$10 = l2.tail;\n              } else {\n                $target$$115 = 9;\n                n1k$$5 = l1.head.fields[0];\n                n1l = l1.head.fields[1];\n                n1r$$2 = l1.head.fields[2];\n                t1$$12 = l1.tail;\n              }\n            } else {\n              $target$$115 = 11;\n              n2k$$5 = l2.head.fields[0];\n              n2l = l2.head.fields[1];\n              n2r$$2 = l2.head.fields[2];\n              t2$$12 = l2.tail;\n            }\n          } else if (l1.head.tag === 2) {\n            $target$$115 = 8;\n            n1k$$4 = l1.head.fields[0];\n            t1$$11 = l1.tail;\n          } else if (l1.head.tag === 1) {\n            $target$$115 = 9;\n            n1k$$5 = l1.head.fields[0];\n            n1l = l1.head.fields[1];\n            n1r$$2 = l1.head.fields[2];\n            t1$$12 = l1.tail;\n          } else {\n            $target$$115 = 11;\n            n2k$$5 = l2.head.fields[0];\n            n2l = l2.head.fields[1];\n            n2r$$2 = l2.head.fields[2];\n            t2$$12 = l2.tail;\n          }\n        } else if (l1.head.tag === 2) {\n          $target$$115 = 8;\n          n1k$$4 = l1.head.fields[0];\n          t1$$11 = l1.tail;\n        } else if (l1.head.tag === 1) {\n          $target$$115 = 9;\n          n1k$$5 = l1.head.fields[0];\n          n1l = l1.head.fields[1];\n          n1r$$2 = l1.head.fields[2];\n          t1$$12 = l1.tail;\n        } else {\n          $target$$115 = 3;\n          t1$$6 = l1.tail;\n          t2$$6 = l2.tail;\n        }\n      } else {\n        $target$$115 = 2;\n      }\n    } else if (l2.tail != null) {\n      $target$$115 = 1;\n    } else {\n      $target$$115 = 0;\n    }\n\n    switch ($target$$115) {\n      case 0:\n        {\n          return 0;\n        }\n\n      case 1:\n        {\n          return -1 | 0;\n        }\n\n      case 2:\n        {\n          return 1;\n        }\n\n      case 3:\n        {\n          $comparer$$17$$112 = comparer$$17;\n          $l1$$113 = t1$$6;\n          $l2$$114 = t2$$6;\n          continue SetTreeModule$$$compareStacks;\n        }\n\n      case 4:\n        {\n          const c$$7 = comparer$$17.Compare(n1k, n2k) | 0;\n\n          if (c$$7 !== 0) {\n            return c$$7 | 0;\n          } else {\n            $comparer$$17$$112 = comparer$$17;\n            $l1$$113 = t1$$7;\n            $l2$$114 = t2$$7;\n            continue SetTreeModule$$$compareStacks;\n          }\n        }\n\n      case 5:\n        {\n          const c$$8 = comparer$$17.Compare(n1k$$1, n2k$$1) | 0;\n\n          if (c$$8 !== 0) {\n            return c$$8 | 0;\n          } else {\n            $comparer$$17$$112 = comparer$$17;\n            $l1$$113 = new List(new SetTree$00601(0, \"SetEmpty\"), t1$$8);\n            $l2$$114 = new List(n2r, t2$$8);\n            continue SetTreeModule$$$compareStacks;\n          }\n        }\n\n      case 6:\n        {\n          const c$$9 = comparer$$17.Compare(n1k$$2, n2k$$2) | 0;\n\n          if (c$$9 !== 0) {\n            return c$$9 | 0;\n          } else {\n            $comparer$$17$$112 = comparer$$17;\n            $l1$$113 = new List(n1r, t1$$9);\n            $l2$$114 = new List(emp, t2$$9);\n            continue SetTreeModule$$$compareStacks;\n          }\n        }\n\n      case 7:\n        {\n          const c$$10 = comparer$$17.Compare(n1k$$3, n2k$$3) | 0;\n\n          if (c$$10 !== 0) {\n            return c$$10 | 0;\n          } else {\n            $comparer$$17$$112 = comparer$$17;\n            $l1$$113 = new List(n1r$$1, t1$$10);\n            $l2$$114 = new List(n2r$$1, t2$$10);\n            continue SetTreeModule$$$compareStacks;\n          }\n        }\n\n      case 8:\n        {\n          $comparer$$17$$112 = comparer$$17;\n          $l1$$113 = new List(new SetTree$00601(0, \"SetEmpty\"), new List(SetTreeModule$$$SetOne(n1k$$4), t1$$11));\n          $l2$$114 = l2;\n          continue SetTreeModule$$$compareStacks;\n        }\n\n      case 9:\n        {\n          $comparer$$17$$112 = comparer$$17;\n          $l1$$113 = new List(n1l, new List(SetTreeModule$$$SetNode(n1k$$5, new SetTree$00601(0, \"SetEmpty\"), n1r$$2, 0), t1$$12));\n          $l2$$114 = l2;\n          continue SetTreeModule$$$compareStacks;\n        }\n\n      case 10:\n        {\n          $comparer$$17$$112 = comparer$$17;\n          $l1$$113 = l1;\n          $l2$$114 = new List(new SetTree$00601(0, \"SetEmpty\"), new List(SetTreeModule$$$SetOne(n2k$$4), t2$$11));\n          continue SetTreeModule$$$compareStacks;\n        }\n\n      case 11:\n        {\n          $comparer$$17$$112 = comparer$$17;\n          $l1$$113 = l1;\n          $l2$$114 = new List(n2l, new List(SetTreeModule$$$SetNode(n2k$$5, new SetTree$00601(0, \"SetEmpty\"), n2r$$2, 0), t2$$12));\n          continue SetTreeModule$$$compareStacks;\n        }\n    }\n\n    break;\n  }\n}\nexport function SetTreeModule$$$compare(comparer$$18, s1, s2) {\n  if (s1.tag === 0) {\n    if (s2.tag === 0) {\n      return 0;\n    } else {\n      return -1 | 0;\n    }\n  } else if (s2.tag === 0) {\n    return 1;\n  } else {\n    return SetTreeModule$$$compareStacks(comparer$$18, new List(s1, new List()), new List(s2, new List())) | 0;\n  }\n}\nexport function SetTreeModule$$$choose(s$$17) {\n  return SetTreeModule$$$minimumElement(s$$17);\n}\nexport function SetTreeModule$$$loop($m$$8$$120, $acc$$10$$121) {\n  SetTreeModule$$$loop: while (true) {\n    const m$$8 = $m$$8$$120,\n          acc$$10 = $acc$$10$$121;\n\n    switch (m$$8.tag) {\n      case 2:\n        {\n          return new List(m$$8.fields[0], acc$$10);\n        }\n\n      case 0:\n        {\n          return acc$$10;\n        }\n\n      default:\n        {\n          $m$$8$$120 = m$$8.fields[1];\n          $acc$$10$$121 = new List(m$$8.fields[0], SetTreeModule$$$loop(m$$8.fields[2], acc$$10));\n          continue SetTreeModule$$$loop;\n        }\n    }\n\n    break;\n  }\n}\nexport function SetTreeModule$$$toList(s$$18) {\n  return SetTreeModule$$$loop(s$$18, new List());\n}\nexport function SetTreeModule$$$copyToArray(s$$19, arr, i$$2) {\n  let j = i$$2 | 0;\n  SetTreeModule$$$iter(function (x$$8) {\n    arr[j] = x$$8;\n    j = j + 1;\n  }, s$$19);\n}\nexport function SetTreeModule$$$mkFromEnumerator($comparer$$19$$126, $acc$$11$$127, $e$$128) {\n  SetTreeModule$$$mkFromEnumerator: while (true) {\n    const comparer$$19 = $comparer$$19$$126,\n          acc$$11 = $acc$$11$$127,\n          e = $e$$128;\n\n    if (e.MoveNext()) {\n      $comparer$$19$$126 = comparer$$19;\n      $acc$$11$$127 = SetTreeModule$$$add(comparer$$19, e.Current, acc$$11);\n      $e$$128 = e;\n      continue SetTreeModule$$$mkFromEnumerator;\n    } else {\n      return acc$$11;\n    }\n\n    break;\n  }\n}\nexport function SetTreeModule$$$ofSeq(comparer$$20, c$$11) {\n  const ie = getEnumerator(c$$11);\n\n  try {\n    return SetTreeModule$$$mkFromEnumerator(comparer$$20, new SetTree$00601(0, \"SetEmpty\"), ie);\n  } finally {\n    if (isDisposable(ie)) {\n      ie.Dispose();\n    }\n  }\n}\nexport function SetTreeModule$$$ofArray(comparer$$21, arr$$1) {\n  let acc$$12 = new SetTree$00601(0, \"SetEmpty\");\n\n  for (let i$$3 = 0; i$$3 <= arr$$1.length - 1; i$$3++) {\n    acc$$12 = SetTreeModule$$$add(comparer$$21, arr$$1[i$$3], acc$$12);\n  }\n\n  return acc$$12;\n}\nexport const FSharpSet = declare(function Set_Set(comparer$$22, tree) {\n  const $this$$2 = this;\n  $this$$2.comparer = comparer$$22;\n  $this$$2.tree = tree;\n});\nexport function FSharpSet$reflection($gen$$133) {\n  return type(\"Set.FSharpSet\", [$gen$$133]);\n}\nexport function FSharpSet$$$$002Ector$$2528C5CB(comparer$$22, tree) {\n  return this instanceof FSharpSet ? FSharpSet.call(this, comparer$$22, tree) : new FSharpSet(comparer$$22, tree);\n}\nexport function FSharpSet$$get_Comparer(__$$4) {\n  return __$$4.comparer;\n}\nexport function FSharpSet$$get_Tree(__$$5) {\n  return __$$5.tree;\n}\nexport function FSharpSet$$Add$$2B595(s$$20, x$$9) {\n  return FSharpSet$$$$002Ector$$2528C5CB(FSharpSet$$get_Comparer(s$$20), SetTreeModule$$$add(FSharpSet$$get_Comparer(s$$20), x$$9, FSharpSet$$get_Tree(s$$20)));\n}\nexport function FSharpSet$$Remove$$2B595(s$$21, x$$10) {\n  return FSharpSet$$$$002Ector$$2528C5CB(FSharpSet$$get_Comparer(s$$21), SetTreeModule$$$remove(FSharpSet$$get_Comparer(s$$21), x$$10, FSharpSet$$get_Tree(s$$21)));\n}\nexport function FSharpSet$$get_Count(s$$22) {\n  return SetTreeModule$$$count(FSharpSet$$get_Tree(s$$22));\n}\nexport function FSharpSet$$Contains$$2B595(s$$23, x$$11) {\n  return SetTreeModule$$$mem(FSharpSet$$get_Comparer(s$$23), x$$11, FSharpSet$$get_Tree(s$$23));\n}\nexport function FSharpSet$$Iterate$$5028453F(s$$24, x$$12) {\n  SetTreeModule$$$iter(x$$12, FSharpSet$$get_Tree(s$$24));\n}\nexport function FSharpSet$$Fold(s$$25, f$$10, z) {\n  return SetTreeModule$$$fold(function (x$$13, z$$1) {\n    return f$$10(z$$1, x$$13);\n  }, z, FSharpSet$$get_Tree(s$$25));\n}\nexport function FSharpSet$$get_IsEmpty(s$$26) {\n  return SetTreeModule$$$isEmpty(FSharpSet$$get_Tree(s$$26));\n}\nexport function FSharpSet$$Partition$$Z1D55A0D7(s$$27, f$$11) {\n  const matchValue$$10 = FSharpSet$$get_Tree(s$$27);\n\n  if (matchValue$$10.tag === 0) {\n    return [s$$27, s$$27];\n  } else {\n    const patternInput$$6 = SetTreeModule$$$partition(FSharpSet$$get_Comparer(s$$27), f$$11, FSharpSet$$get_Tree(s$$27));\n    return [FSharpSet$$$$002Ector$$2528C5CB(FSharpSet$$get_Comparer(s$$27), patternInput$$6[0]), FSharpSet$$$$002Ector$$2528C5CB(FSharpSet$$get_Comparer(s$$27), patternInput$$6[1])];\n  }\n}\nexport function FSharpSet$$Filter$$Z1D55A0D7(s$$28, f$$12) {\n  const matchValue$$11 = FSharpSet$$get_Tree(s$$28);\n\n  if (matchValue$$11.tag === 0) {\n    return s$$28;\n  } else {\n    return FSharpSet$$$$002Ector$$2528C5CB(FSharpSet$$get_Comparer(s$$28), SetTreeModule$$$filter(FSharpSet$$get_Comparer(s$$28), f$$12, FSharpSet$$get_Tree(s$$28)));\n  }\n}\nexport function FSharpSet$$Map$$7597B8F7(s$$29, f$$13, comparer$$23) {\n  return FSharpSet$$$$002Ector$$2528C5CB(comparer$$23, SetTreeModule$$$fold(function (acc$$13, k$$33) {\n    return SetTreeModule$$$add(comparer$$23, f$$13(k$$33), acc$$13);\n  }, new SetTree$00601(0, \"SetEmpty\"), FSharpSet$$get_Tree(s$$29)));\n}\nexport function FSharpSet$$Exists$$Z1D55A0D7(s$$30, f$$14) {\n  return SetTreeModule$$$exists(f$$14, FSharpSet$$get_Tree(s$$30));\n}\nexport function FSharpSet$$ForAll$$Z1D55A0D7(s$$31, f$$15) {\n  return SetTreeModule$$$forall(f$$15, FSharpSet$$get_Tree(s$$31));\n}\nexport function FSharpSet$$$op_Subtraction(a$$4, b$$5) {\n  const matchValue$$12 = FSharpSet$$get_Tree(a$$4);\n\n  if (matchValue$$12.tag === 0) {\n    return a$$4;\n  } else {\n    const matchValue$$13 = FSharpSet$$get_Tree(b$$5);\n\n    if (matchValue$$13.tag === 0) {\n      return a$$4;\n    } else {\n      return FSharpSet$$$$002Ector$$2528C5CB(FSharpSet$$get_Comparer(a$$4), SetTreeModule$$$diff(FSharpSet$$get_Comparer(a$$4), FSharpSet$$get_Tree(a$$4), FSharpSet$$get_Tree(b$$5)));\n    }\n  }\n}\nexport function FSharpSet$$$op_Addition(a$$5, b$$6) {\n  const matchValue$$14 = FSharpSet$$get_Tree(b$$6);\n\n  if (matchValue$$14.tag === 0) {\n    return a$$5;\n  } else {\n    const matchValue$$15 = FSharpSet$$get_Tree(a$$5);\n\n    if (matchValue$$15.tag === 0) {\n      return b$$6;\n    } else {\n      return FSharpSet$$$$002Ector$$2528C5CB(FSharpSet$$get_Comparer(a$$5), SetTreeModule$$$union(FSharpSet$$get_Comparer(a$$5), FSharpSet$$get_Tree(a$$5), FSharpSet$$get_Tree(b$$6)));\n    }\n  }\n}\nexport function FSharpSet$$$Intersection$$Z3BE9BFE0(a$$6, b$$7) {\n  const matchValue$$16 = FSharpSet$$get_Tree(b$$7);\n\n  if (matchValue$$16.tag === 0) {\n    return b$$7;\n  } else {\n    const matchValue$$17 = FSharpSet$$get_Tree(a$$6);\n\n    if (matchValue$$17.tag === 0) {\n      return a$$6;\n    } else {\n      return FSharpSet$$$$002Ector$$2528C5CB(FSharpSet$$get_Comparer(a$$6), SetTreeModule$$$intersection(FSharpSet$$get_Comparer(a$$6), FSharpSet$$get_Tree(a$$6), FSharpSet$$get_Tree(b$$7)));\n    }\n  }\n}\nexport function FSharpSet$$$IntersectionMany$$Z15B59630(sets) {\n  return reduce(FSharpSet$$$Intersection$$Z3BE9BFE0, sets);\n}\nexport function FSharpSet$$$Equality$$Z3BE9BFE0(a$$7, b$$8) {\n  return SetTreeModule$$$compare(FSharpSet$$get_Comparer(a$$7), FSharpSet$$get_Tree(a$$7), FSharpSet$$get_Tree(b$$8)) === 0;\n}\nexport function FSharpSet$$$Compare$$Z3BE9BFE0(a$$8, b$$9) {\n  return SetTreeModule$$$compare(FSharpSet$$get_Comparer(a$$8), FSharpSet$$get_Tree(a$$8), FSharpSet$$get_Tree(b$$9));\n}\nexport function FSharpSet$$get_Choose(x$$14) {\n  return SetTreeModule$$$choose(FSharpSet$$get_Tree(x$$14));\n}\nexport function FSharpSet$$get_MinimumElement(x$$15) {\n  return SetTreeModule$$$minimumElement(FSharpSet$$get_Tree(x$$15));\n}\nexport function FSharpSet$$get_MaximumElement(x$$16) {\n  return SetTreeModule$$$maximumElement(FSharpSet$$get_Tree(x$$16));\n}\nexport function FSharpSet$$IsSubsetOf$$6A20B1FF(x$$17, y) {\n  return SetTreeModule$$$subset(FSharpSet$$get_Comparer(x$$17), FSharpSet$$get_Tree(x$$17), FSharpSet$$get_Tree(y));\n}\nexport function FSharpSet$$IsSupersetOf$$6A20B1FF(x$$18, y$$1) {\n  return SetTreeModule$$$subset(FSharpSet$$get_Comparer(x$$18), FSharpSet$$get_Tree(y$$1), FSharpSet$$get_Tree(x$$18));\n}\nexport function FSharpSet$$IsProperSubsetOf$$6A20B1FF(x$$19, y$$2) {\n  return SetTreeModule$$$psubset(FSharpSet$$get_Comparer(x$$19), FSharpSet$$get_Tree(x$$19), FSharpSet$$get_Tree(y$$2));\n}\nexport function FSharpSet$$IsProperSupersetOf$$6A20B1FF(x$$20, y$$3) {\n  return SetTreeModule$$$psubset(FSharpSet$$get_Comparer(x$$20), FSharpSet$$get_Tree(y$$3), FSharpSet$$get_Tree(x$$20));\n}\n\nFSharpSet.prototype.toString = function () {\n  var strings;\n  const this$ = this;\n  return \"set [\" + (strings = map$$1(function (x$$21) {\n    let copyOfStruct = x$$21;\n    return String(copyOfStruct);\n  }, this$), (join(\"; \", strings))) + \"]\";\n};\n\nFSharpSet.prototype.GetHashCode = function () {\n  const this$$$1 = this;\n  let res = 0;\n  const e$$1 = SetTreeModule$$$mkIEnumerator(FSharpSet$$get_Tree(this$$$1));\n\n  while (e$$1.MoveNext()) {\n    const x$$22 = res | 0;\n    const y$$4 = structuralHash(e$$1.Current) | 0;\n    res = (x$$22 << 1) + y$$4 + 631;\n  }\n\n  return Math.abs(res) | 0;\n};\n\nFSharpSet.prototype.Equals = function (that) {\n  const this$$$2 = this;\n  return SetTreeModule$$$compare(FSharpSet$$get_Comparer(this$$$2), FSharpSet$$get_Tree(this$$$2), FSharpSet$$get_Tree(that)) === 0;\n};\n\nFSharpSet.prototype.CompareTo = function (that$$1) {\n  const this$$$3 = this;\n  return SetTreeModule$$$compare(FSharpSet$$get_Comparer(this$$$3), FSharpSet$$get_Tree(this$$$3), FSharpSet$$get_Tree(that$$1)) | 0;\n};\n\nFSharpSet.prototype[Symbol.iterator] = function () {\n  const s$$32 = this;\n  return toIterator(SetTreeModule$$$mkIEnumerator(FSharpSet$$get_Tree(s$$32)));\n};\n\nexport function isEmpty(s$$33) {\n  return FSharpSet$$get_IsEmpty(s$$33);\n}\nexport function contains(x$$23, s$$34) {\n  return FSharpSet$$Contains$$2B595(s$$34, x$$23);\n}\nexport function add(x$$24, s$$35) {\n  return FSharpSet$$Add$$2B595(s$$35, x$$24);\n}\nexport function singleton(x$$25, comparer$$24) {\n  return FSharpSet$$$$002Ector$$2528C5CB(comparer$$24, new SetTree$00601(2, \"SetOne\", x$$25));\n}\nexport function remove(x$$26, s$$36) {\n  return FSharpSet$$Remove$$2B595(s$$36, x$$26);\n}\nexport function union(s1$$2, s2$$2) {\n  return FSharpSet$$$op_Addition(s1$$2, s2$$2);\n}\nexport function unionMany(sets$$1, comparer$$25) {\n  return fold$$1(FSharpSet$$$op_Addition, FSharpSet$$$$002Ector$$2528C5CB(comparer$$25, new SetTree$00601(0, \"SetEmpty\")), sets$$1);\n}\nexport function intersect(s1$$3, s2$$3) {\n  return FSharpSet$$$Intersection$$Z3BE9BFE0(s1$$3, s2$$3);\n}\nexport function intersectMany(sets$$2) {\n  return FSharpSet$$$IntersectionMany$$Z15B59630(sets$$2);\n}\nexport function iterate(f$$16, s$$37) {\n  FSharpSet$$Iterate$$5028453F(s$$37, f$$16);\n}\nexport function empty(comparer$$26) {\n  return FSharpSet$$$$002Ector$$2528C5CB(comparer$$26, new SetTree$00601(0, \"SetEmpty\"));\n}\nexport function forAll(f$$17, s$$38) {\n  return FSharpSet$$ForAll$$Z1D55A0D7(s$$38, f$$17);\n}\nexport function exists(f$$18, s$$39) {\n  return FSharpSet$$Exists$$Z1D55A0D7(s$$39, f$$18);\n}\nexport function filter(f$$19, s$$40) {\n  return FSharpSet$$Filter$$Z1D55A0D7(s$$40, f$$19);\n}\nexport function partition(f$$20, s$$41) {\n  return FSharpSet$$Partition$$Z1D55A0D7(s$$41, f$$20);\n}\nexport function fold(f$$21, z$$2, s$$42) {\n  return SetTreeModule$$$fold(f$$21, z$$2, FSharpSet$$get_Tree(s$$42));\n}\nexport function foldBack(f$$22, s$$43, z$$3) {\n  return SetTreeModule$$$foldBack(f$$22, FSharpSet$$get_Tree(s$$43), z$$3);\n}\nexport function map(f$$23, s$$44, comparer$$27) {\n  return FSharpSet$$Map$$7597B8F7(s$$44, f$$23, comparer$$27);\n}\nexport function count(s$$45) {\n  return FSharpSet$$get_Count(s$$45);\n}\nexport function minimumElement(s$$46) {\n  return FSharpSet$$get_MinimumElement(s$$46);\n}\nexport function maximumElement(s$$47) {\n  return FSharpSet$$get_MaximumElement(s$$47);\n}\nexport function ofList(li, comparer$$28) {\n  return FSharpSet$$$$002Ector$$2528C5CB(comparer$$28, SetTreeModule$$$ofSeq(comparer$$28, li));\n}\nexport function ofArray(arr$$2, comparer$$29) {\n  return FSharpSet$$$$002Ector$$2528C5CB(comparer$$29, SetTreeModule$$$ofArray(comparer$$29, arr$$2));\n}\nexport function toList(s$$48) {\n  return SetTreeModule$$$toList(FSharpSet$$get_Tree(s$$48));\n}\nexport function toArray(s$$49, cons) {\n  const n$$3 = count(s$$49) | 0;\n  const res$$1 = new cons(n$$3);\n  SetTreeModule$$$copyToArray(FSharpSet$$get_Tree(s$$49), res$$1, 0);\n  return res$$1;\n}\nexport function toSeq(s$$50) {\n  return SetTreeModule$$$toSeq(FSharpSet$$get_Tree(s$$50));\n}\nexport function ofSeq(elements, comparer$$30) {\n  return FSharpSet$$$$002Ector$$2528C5CB(comparer$$30, SetTreeModule$$$ofSeq(comparer$$30, elements));\n}\nexport function difference(x$$28, y$$6) {\n  return FSharpSet$$$op_Subtraction(x$$28, y$$6);\n}\nexport function isSubset(x$$29, y$$7) {\n  return FSharpSet$$IsSubsetOf$$6A20B1FF(x$$29, y$$7);\n}\nexport function isSuperset(x$$30, y$$8) {\n  return FSharpSet$$IsSupersetOf$$6A20B1FF(x$$30, y$$8);\n}\nexport function isProperSubset(x$$31, y$$9) {\n  return FSharpSet$$IsProperSubsetOf$$6A20B1FF(x$$31, y$$9);\n}\nexport function isProperSuperset(x$$32, y$$10) {\n  return FSharpSet$$IsProperSupersetOf$$6A20B1FF(x$$32, y$$10);\n}\nexport function minElement(s$$51) {\n  return FSharpSet$$get_MinimumElement(s$$51);\n}\nexport function maxElement(s$$52) {\n  return FSharpSet$$get_MaximumElement(s$$52);\n}\n\nfunction createMutablePrivate(comparer$$31, tree$0027) {\n  let tree$$1 = tree$0027;\n  return {\n    get size() {\n      return SetTreeModule$$$count(tree$$1);\n    },\n\n    add(x$$33) {\n      const this$$$4 = this;\n      tree$$1 = SetTreeModule$$$add(comparer$$31, x$$33, tree$$1);\n      return this$$$4;\n    },\n\n    add_(x$$34) {\n      if (SetTreeModule$$$mem(comparer$$31, x$$34, tree$$1)) {\n        return false;\n      } else {\n        tree$$1 = SetTreeModule$$$add(comparer$$31, x$$34, tree$$1);\n        return true;\n      }\n    },\n\n    clear() {\n      tree$$1 = new SetTree$00601(0, \"SetEmpty\");\n    },\n\n    delete(x$$35) {\n      if (SetTreeModule$$$mem(comparer$$31, x$$35, tree$$1)) {\n        tree$$1 = SetTreeModule$$$remove(comparer$$31, x$$35, tree$$1);\n        return true;\n      } else {\n        return false;\n      }\n    },\n\n    has(x$$36) {\n      return SetTreeModule$$$mem(comparer$$31, x$$36, tree$$1);\n    },\n\n    keys() {\n      return SetTreeModule$$$toSeq(tree$$1);\n    },\n\n    values() {\n      return SetTreeModule$$$toSeq(tree$$1);\n    },\n\n    entries() {\n      const source = SetTreeModule$$$toSeq(tree$$1);\n      return map$$1(function mapping(v) {\n        return [v, v];\n      }, source);\n    },\n\n    [Symbol.iterator]() {\n      return toIterator(SetTreeModule$$$mkIEnumerator(tree$$1));\n    },\n\n    GetEnumerator() {\n      return SetTreeModule$$$mkIEnumerator(tree$$1);\n    }\n\n  };\n}\n\nexport function createMutable(source$$1, comparer$$32) {\n  const set = MutableSet$002400601$0024$0024$0024$0024002Ector$0024$0024Z6150332D(source$$1, comparer$$32);\n  return set;\n}\nexport function distinct(xs, comparer$$33) {\n  return delay(function () {\n    const set$$1 = MutableSet$002400601$0024$0024$0024$0024002Ector$0024$0024Z6150332D(empty$$1(), comparer$$33);\n    return collect(function (x$$37) {\n      return MutableSet$002400601$0024$0024Add$0024$00242B595(set$$1, x$$37) ? singleton$$1(x$$37) : empty$$1();\n    }, xs);\n  });\n}\nexport function distinctBy(projection, xs$$1, comparer$$34) {\n  return delay(function () {\n    const set$$2 = MutableSet$002400601$0024$0024$0024$0024002Ector$0024$0024Z6150332D(empty$$1(), comparer$$34);\n    return collect(function (x$$38) {\n      return MutableSet$002400601$0024$0024Add$0024$00242B595(set$$2, projection(x$$38)) ? singleton$$1(x$$38) : empty$$1();\n    }, xs$$1);\n  });\n}\nexport function unionWith(s1$$4, s2$$4) {\n  return fold$$1(function folder(acc$$14, x$$39) {\n    return acc$$14.add(x$$39);\n  }, s1$$4, s2$$4);\n}\nexport function intersectWith(s1$$5, s2$$5, comparer$$35) {\n  const s2$$6 = ofSeq(s2$$5, comparer$$35);\n  iterate$$1(function (x$$40) {\n    if (!FSharpSet$$Contains$$2B595(s2$$6, x$$40)) {\n      const value = s1$$5.delete(x$$40);\n      void value;\n    }\n  }, s1$$5);\n}\nexport function exceptWith(s1$$6, s2$$7) {\n  iterate$$1(function (x$$41) {\n    const value$$1 = s1$$6.delete(x$$41);\n    void value$$1;\n  }, s2$$7);\n}\nexport function isSubsetOf(s1$$7, s2$$8, comparer$$36) {\n  return isSubset(ofSeq(s1$$7, comparer$$36), ofSeq(s2$$8, comparer$$36));\n}\nexport function isSupersetOf(s1$$8, s2$$9, comparer$$37) {\n  return isSuperset(ofSeq(s1$$8, comparer$$37), ofSeq(s2$$9, comparer$$37));\n}\nexport function isProperSubsetOf(s1$$9, s2$$10, comparer$$38) {\n  return isProperSubset(ofSeq(s1$$9, comparer$$38), ofSeq(s2$$10, comparer$$38));\n}\nexport function isProperSupersetOf(s1$$10, s2$$11, comparer$$39) {\n  return isProperSuperset(ofSeq(s1$$10, comparer$$39), ofSeq(s2$$11, comparer$$39));\n}","import { defaultArg, value as value$$15, some } from \"./Option.js\";\nimport { min as min$$1, compare, addToDict, addToSet, getItemFromDict, tryGetValue, max as max$$1, comparePrimitives } from \"./Util.js\";\nimport { createMutable } from \"./Map.js\";\nimport { createMutable as createMutable$$1 } from \"./Set.js\";\nimport { List } from \"./Types.js\";\nimport { iterate as iterate$$1 } from \"./Seq.js\";\nconst indexNotFoundMsg = \"An index satisfying the predicate was not found in the collection.\";\nexport function append(array1, array2, cons) {\n  if (ArrayBuffer.isView(array1)) {\n    const len1 = array1.length | 0;\n    const len2 = array2.length | 0;\n    const newArray = new cons(len1 + len2);\n\n    for (let i = 0; i <= len1 - 1; i++) {\n      newArray[i] = array1[i];\n    }\n\n    for (let i$$1 = 0; i$$1 <= len2 - 1; i$$1++) {\n      newArray[i$$1 + len1] = array2[i$$1];\n    }\n\n    return newArray;\n  } else {\n    return array1.concat(array2);\n  }\n}\nexport function filter(predicate, array) {\n  return array.filter(predicate);\n}\nexport function fill(target, targetIndex, count, value) {\n  target.fill(value, targetIndex, targetIndex + count);\n  return target;\n}\nexport function getSubArray(array$$3, start$$1, count$$2) {\n  return array$$3.slice(start$$1, start$$1 + count$$2);\n}\nexport function last(array$$5) {\n  if (array$$5.length === 0) {\n    throw new Error(\"The input array was empty\\\\nParameter name: array\");\n  }\n\n  return array$$5[array$$5.length - 1];\n}\nexport function tryLast(array$$6) {\n  if (array$$6.length === 0) {\n    return null;\n  } else {\n    return some(array$$6[array$$6.length - 1]);\n  }\n}\nexport function mapIndexed(f, source, cons$$1) {\n  if (ArrayBuffer.isView(source)) {\n    const len = source.length | 0;\n    const target$$1 = new cons$$1(len);\n\n    for (let i$$2 = 0; i$$2 <= len - 1; i$$2++) {\n      target$$1[i$$2] = f(i$$2, source[i$$2]);\n    }\n\n    return target$$1;\n  } else {\n    return source.map(function (delegateArg0, delegateArg1) {\n      return f(delegateArg1, delegateArg0);\n    });\n  }\n}\nexport function map(f$$1, source$$1, cons$$2) {\n  if (ArrayBuffer.isView(source$$1)) {\n    const len$$1 = source$$1.length | 0;\n    const target$$2 = new cons$$2(len$$1);\n\n    for (let i$$4 = 0; i$$4 <= len$$1 - 1; i$$4++) {\n      target$$2[i$$4] = f$$1(source$$1[i$$4]);\n    }\n\n    return target$$2;\n  } else {\n    return source$$1.map(function mapping$$1(x$$1) {\n      return f$$1(x$$1);\n    });\n  }\n}\nexport function mapIndexed2(f$$2, source1, source2, cons$$3) {\n  if (source1.length !== source2.length) {\n    throw new Error(\"Arrays had different lengths\");\n  }\n\n  const result = new cons$$3(source1.length);\n\n  for (let i$$5 = 0; i$$5 <= source1.length - 1; i$$5++) {\n    result[i$$5] = f$$2(i$$5, source1[i$$5], source2[i$$5]);\n  }\n\n  return result;\n}\nexport function map2(f$$3, source1$$1, source2$$1, cons$$4) {\n  if (source1$$1.length !== source2$$1.length) {\n    throw new Error(\"Arrays had different lengths\");\n  }\n\n  const result$$1 = new cons$$4(source1$$1.length);\n\n  for (let i$$6 = 0; i$$6 <= source1$$1.length - 1; i$$6++) {\n    result$$1[i$$6] = f$$3(source1$$1[i$$6], source2$$1[i$$6]);\n  }\n\n  return result$$1;\n}\nexport function mapIndexed3(f$$4, source1$$2, source2$$2, source3, cons$$5) {\n  if (source1$$2.length !== source2$$2.length ? true : source2$$2.length !== source3.length) {\n    throw new Error(\"Arrays had different lengths\");\n  }\n\n  const result$$2 = new cons$$5(source1$$2.length);\n\n  for (let i$$7 = 0; i$$7 <= source1$$2.length - 1; i$$7++) {\n    result$$2[i$$7] = f$$4(i$$7, source1$$2[i$$7], source2$$2[i$$7], source3[i$$7]);\n  }\n\n  return result$$2;\n}\nexport function map3(f$$5, source1$$3, source2$$3, source3$$1, cons$$6) {\n  if (source1$$3.length !== source2$$3.length ? true : source2$$3.length !== source3$$1.length) {\n    throw new Error(\"Arrays had different lengths\");\n  }\n\n  const result$$3 = new cons$$6(source1$$3.length);\n\n  for (let i$$8 = 0; i$$8 <= source1$$3.length - 1; i$$8++) {\n    result$$3[i$$8] = f$$5(source1$$3[i$$8], source2$$3[i$$8], source3$$1[i$$8]);\n  }\n\n  return result$$3;\n}\nexport function mapFold(mapping$$2, state, array$$9, cons$$7) {\n  const matchValue = array$$9.length | 0;\n\n  if (matchValue === 0) {\n    return [[], state];\n  } else {\n    let acc = state;\n    const res = new cons$$7(matchValue);\n\n    for (let i$$9 = 0; i$$9 <= array$$9.length - 1; i$$9++) {\n      const patternInput = mapping$$2(acc, array$$9[i$$9]);\n      res[i$$9] = patternInput[0];\n      acc = patternInput[1];\n    }\n\n    return [res, acc];\n  }\n}\nexport function mapFoldBack(mapping$$3, array$$10, state$$1, cons$$8) {\n  const matchValue$$1 = array$$10.length | 0;\n\n  if (matchValue$$1 === 0) {\n    return [[], state$$1];\n  } else {\n    let acc$$1 = state$$1;\n    const res$$1 = new cons$$8(matchValue$$1);\n\n    for (let i$$10 = array$$10.length - 1; i$$10 >= 0; i$$10--) {\n      const patternInput$$1 = mapping$$3(array$$10[i$$10], acc$$1);\n      res$$1[i$$10] = patternInput$$1[0];\n      acc$$1 = patternInput$$1[1];\n    }\n\n    return [res$$1, acc$$1];\n  }\n}\nexport function indexed(source$$2) {\n  const len$$4 = source$$2.length | 0;\n  const target$$3 = new Array(len$$4);\n\n  for (let i$$11 = 0; i$$11 <= len$$4 - 1; i$$11++) {\n    target$$3[i$$11] = [i$$11, source$$2[i$$11]];\n  }\n\n  return target$$3;\n}\nexport function truncate(count$$4, array$$11) {\n  const count$$5 = max$$1(comparePrimitives, 0, count$$4) | 0;\n  return array$$11.slice(0, 0 + count$$5);\n}\nexport function concat(arrays, cons$$9) {\n  var arr$$4;\n  const arrays$$1 = Array.isArray(arrays) ? arrays : Array.from(arrays);\n  const matchValue$$2 = arrays$$1.length | 0;\n\n  switch (matchValue$$2) {\n    case 0:\n      {\n        return new cons$$9(0);\n      }\n\n    case 1:\n      {\n        return arrays$$1[0];\n      }\n\n    default:\n      {\n        if (arr$$4 = arrays$$1[0], ArrayBuffer.isView(arr$$4)) {\n          let totalIdx = 0;\n          let totalLength = 0;\n\n          for (let idx = 0; idx <= arrays$$1.length - 1; idx++) {\n            const arr$$5 = arrays$$1[idx];\n            totalLength = totalLength + arr$$5.length;\n          }\n\n          const result$$4 = new cons$$9(totalLength);\n\n          for (let idx$$1 = 0; idx$$1 <= arrays$$1.length - 1; idx$$1++) {\n            const arr$$6 = arrays$$1[idx$$1];\n\n            for (let j = 0; j <= arr$$6.length - 1; j++) {\n              result$$4[totalIdx] = arr$$6[j];\n              totalIdx = totalIdx + 1;\n            }\n          }\n\n          return result$$4;\n        } else {\n          return arrays$$1[0].concat(...arrays$$1.slice(1));\n        }\n      }\n  }\n}\nexport function collect(mapping$$4, array$$14, cons$$10) {\n  const mapped = map(mapping$$4, array$$14, Array);\n  return concat(mapped, cons$$10);\n}\nexport function countBy(projection, array$$15, eq) {\n  const dict = createMutable([], eq);\n  const keys = [];\n\n  for (let idx$$2 = 0; idx$$2 <= array$$15.length - 1; idx$$2++) {\n    const value$$2 = array$$15[idx$$2];\n    const key = projection(value$$2);\n    const matchValue$$3 = tryGetValue(dict, key, 0);\n\n    if (matchValue$$3[0]) {\n      dict.set(key, matchValue$$3[1] + 1);\n    } else {\n      dict.set(key, 1);\n      const value$$3 = keys.push(key);\n      void value$$3;\n    }\n  }\n\n  const result$$5 = map(function (key$$1) {\n    return [key$$1, getItemFromDict(dict, key$$1)];\n  }, keys, Array);\n  return result$$5;\n}\nexport function distinctBy(projection$$1, array$$17, eq$$1) {\n  const hashSet = createMutable$$1([], eq$$1);\n  return filter(function predicate$$2($arg$$3) {\n    const arg00 = projection$$1($arg$$3);\n    return addToSet(arg00, hashSet);\n  }, array$$17);\n}\nexport function distinct(array$$19, eq$$2) {\n  return distinctBy(function (x$$2) {\n    return x$$2;\n  }, array$$19, eq$$2);\n}\nexport function where(predicate$$3, array$$20) {\n  return array$$20.filter(predicate$$3);\n}\nexport function contains(value$$4, array$$22, eq$$3) {\n  const loop = function loop($i$$12$$79) {\n    loop: while (true) {\n      const i$$12 = $i$$12$$79;\n\n      if (i$$12 >= array$$22.length) {\n        return false;\n      } else if (eq$$3.Equals(value$$4, array$$22[i$$12])) {\n        return true;\n      } else {\n        $i$$12$$79 = i$$12 + 1;\n        continue loop;\n      }\n\n      break;\n    }\n  };\n\n  return loop(0);\n}\nexport function except(itemsToExclude, array$$23, eq$$4) {\n  if (array$$23.length === 0) {\n    return array$$23;\n  } else {\n    const cached = createMutable$$1(itemsToExclude, eq$$4);\n    return array$$23.filter(function predicate$$5(arg00$$1) {\n      return addToSet(arg00$$1, cached);\n    });\n  }\n}\nexport function groupBy(projection$$2, array$$26, cons$$11, eq$$5) {\n  const dict$$1 = createMutable([], eq$$5);\n  const keys$$1 = [];\n\n  for (let idx$$3 = 0; idx$$3 <= array$$26.length - 1; idx$$3++) {\n    const v = array$$26[idx$$3];\n    const key$$2 = projection$$2(v);\n    const matchValue$$4 = tryGetValue(dict$$1, key$$2, null);\n\n    if (matchValue$$4[0]) {\n      dict$$1.set(key$$2, new List(v, matchValue$$4[1]));\n    } else {\n      addToDict(dict$$1, key$$2, new List(v, new List()));\n      const value$$5 = keys$$1.push(key$$2);\n      void value$$5;\n    }\n  }\n\n  const result$$6 = map(function (key$$3) {\n    var array$$28;\n    return [key$$3, (array$$28 = cons$$11.from(getItemFromDict(dict$$1, key$$3)), (array$$28.reverse()))];\n  }, keys$$1, Array);\n  return result$$6;\n}\nexport function empty(cons$$12) {\n  return new cons$$12(0);\n}\nexport function singleton(value$$6, cons$$14) {\n  const ar = new cons$$14(1);\n  ar[0] = value$$6;\n  return ar;\n}\nexport function initialize(count$$8, initializer, cons$$15) {\n  if (count$$8 < 0) {\n    throw new Error(\"The input must be non-negative\\\\nParameter name: count\");\n  }\n\n  const result$$7 = new cons$$15(count$$8);\n\n  for (let i$$13 = 0; i$$13 <= count$$8 - 1; i$$13++) {\n    result$$7[i$$13] = initializer(i$$13);\n  }\n\n  return result$$7;\n}\nexport function pairwise(array$$30) {\n  if (array$$30.length < 2) {\n    return [];\n  } else {\n    const count$$9 = array$$30.length - 1 | 0;\n    const result$$8 = new Array(count$$9);\n\n    for (let i$$14 = 0; i$$14 <= count$$9 - 1; i$$14++) {\n      result$$8[i$$14] = [array$$30[i$$14], array$$30[i$$14 + 1]];\n    }\n\n    return result$$8;\n  }\n}\nexport function replicate(count$$10, initial, cons$$16) {\n  if (count$$10 < 0) {\n    throw new Error(\"The input must be non-negative\\\\nParameter name: count\");\n  }\n\n  const result$$9 = new cons$$16(count$$10);\n\n  for (let i$$15 = 0; i$$15 <= result$$9.length - 1; i$$15++) {\n    result$$9[i$$15] = initial;\n  }\n\n  return result$$9;\n}\nexport function copy(array$$31, cons$$17) {\n  return array$$31.slice();\n}\nexport function reverse(array$$33, cons$$18) {\n  const array$$35 = array$$33.slice();\n  return array$$35.reverse();\n}\nexport function scan(folder, state$$2, array$$37, cons$$19) {\n  const res$$2 = new cons$$19(array$$37.length + 1);\n  res$$2[0] = state$$2;\n\n  for (let i$$16 = 0; i$$16 <= array$$37.length - 1; i$$16++) {\n    res$$2[i$$16 + 1] = folder(res$$2[i$$16], array$$37[i$$16]);\n  }\n\n  return res$$2;\n}\nexport function scanBack(folder$$1, array$$38, state$$3, cons$$20) {\n  const res$$3 = new cons$$20(array$$38.length + 1);\n  res$$3[array$$38.length] = state$$3;\n\n  for (let i$$17 = array$$38.length - 1; i$$17 >= 0; i$$17--) {\n    res$$3[i$$17] = folder$$1(array$$38[i$$17], res$$3[i$$17 + 1]);\n  }\n\n  return res$$3;\n}\nexport function skip(count$$11, array$$39, cons$$21) {\n  if (count$$11 > array$$39.length) {\n    throw new Error(\"count is greater than array length\\\\nParameter name: count\");\n  }\n\n  if (count$$11 === array$$39.length) {\n    return new cons$$21(0);\n  } else {\n    const count$$12 = (count$$11 < 0 ? 0 : count$$11) | 0;\n    return array$$39.slice(count$$12);\n  }\n}\nexport function skipWhile(predicate$$7, array$$41, cons$$23) {\n  let count$$14 = 0;\n\n  while (count$$14 < array$$41.length ? predicate$$7(array$$41[count$$14]) : false) {\n    count$$14 = count$$14 + 1;\n  }\n\n  if (count$$14 === array$$41.length) {\n    return new cons$$23(0);\n  } else {\n    const count$$15 = count$$14 | 0;\n    return array$$41.slice(count$$15);\n  }\n}\nexport function take(count$$16, array$$43, cons$$25) {\n  if (count$$16 < 0) {\n    throw new Error(\"The input must be non-negative\\\\nParameter name: count\");\n  }\n\n  if (count$$16 > array$$43.length) {\n    throw new Error(\"count is greater than array length\\\\nParameter name: count\");\n  }\n\n  if (count$$16 === 0) {\n    return new cons$$25(0);\n  } else {\n    return array$$43.slice(0, 0 + count$$16);\n  }\n}\nexport function takeWhile(predicate$$8, array$$45, cons$$27) {\n  let count$$18 = 0;\n\n  while (count$$18 < array$$45.length ? predicate$$8(array$$45[count$$18]) : false) {\n    count$$18 = count$$18 + 1;\n  }\n\n  if (count$$18 === 0) {\n    return new cons$$27(0);\n  } else {\n    const count$$19 = count$$18 | 0;\n    return array$$45.slice(0, 0 + count$$19);\n  }\n}\nexport function addInPlace(x$$3, array$$47) {\n  const value$$7 = array$$47.push(x$$3);\n  void value$$7;\n}\nexport function addRangeInPlace(range, array$$49) {\n  iterate$$1(function (x$$4) {\n    const value$$8 = array$$49.push(x$$4);\n    void value$$8;\n  }, range);\n}\nexport function removeInPlace(item$$5, array$$51) {\n  const i$$18 = array$$51.indexOf(item$$5);\n\n  if (i$$18 > -1) {\n    const value$$9 = array$$51.splice(i$$18, 1);\n    void value$$9;\n    return true;\n  } else {\n    return false;\n  }\n}\nexport function removeAllInPlace(predicate$$9, array$$54) {\n  const countRemoveAll = function countRemoveAll(count$$20) {\n    const i$$19 = array$$54.findIndex(predicate$$9);\n\n    if (i$$19 > -1) {\n      const value$$10 = array$$54.splice(i$$19, 1);\n      void value$$10;\n      return countRemoveAll(count$$20) + 1 | 0;\n    } else {\n      return count$$20 | 0;\n    }\n  };\n\n  return countRemoveAll(0) | 0;\n}\nexport function copyTo(source$$3, sourceIndex, target$$4, targetIndex$$1, count$$21) {\n  const diff = targetIndex$$1 - sourceIndex | 0;\n\n  for (let i$$20 = sourceIndex; i$$20 <= sourceIndex + count$$21 - 1; i$$20++) {\n    target$$4[i$$20 + diff] = source$$3[i$$20];\n  }\n}\nexport function partition(f$$6, source$$4, cons$$29) {\n  const len$$7 = source$$4.length | 0;\n  const res1 = new cons$$29(len$$7);\n  const res2 = new cons$$29(len$$7);\n  let iTrue = 0;\n  let iFalse = 0;\n\n  for (let i$$21 = 0; i$$21 <= len$$7 - 1; i$$21++) {\n    if (f$$6(source$$4[i$$21])) {\n      res1[iTrue] = source$$4[i$$21];\n      iTrue = iTrue + 1;\n    } else {\n      res2[iFalse] = source$$4[i$$21];\n      iFalse = iFalse + 1;\n    }\n  }\n\n  return [(truncate(iTrue, res1)), (truncate(iFalse, res2))];\n}\nexport function find(predicate$$11, array$$59) {\n  const matchValue$$5 = array$$59.find(predicate$$11);\n\n  if (matchValue$$5 == null) {\n    throw new Error(indexNotFoundMsg);\n  } else {\n    const res$$4 = value$$15(matchValue$$5);\n    return res$$4;\n  }\n}\nexport function tryFind(predicate$$13, array$$61) {\n  return array$$61.find(predicate$$13);\n}\nexport function findIndex(predicate$$15, array$$63) {\n  const matchValue$$6 = array$$63.findIndex(predicate$$15);\n\n  if (matchValue$$6 > -1) {\n    return matchValue$$6 | 0;\n  } else {\n    throw new Error(indexNotFoundMsg);\n  }\n}\nexport function tryFindIndex(predicate$$17, array$$65) {\n  const matchValue$$7 = array$$65.findIndex(predicate$$17);\n\n  if (matchValue$$7 > -1) {\n    return matchValue$$7;\n  } else {\n    return null;\n  }\n}\nexport function pick(chooser, array$$67) {\n  const loop$$1 = function loop$$1($i$$22$$149) {\n    loop$$1: while (true) {\n      const i$$22 = $i$$22$$149;\n\n      if (i$$22 >= array$$67.length) {\n        throw new Error(indexNotFoundMsg);\n      } else {\n        const matchValue$$8 = chooser(array$$67[i$$22]);\n\n        if (matchValue$$8 != null) {\n          const res$$5 = value$$15(matchValue$$8);\n          return res$$5;\n        } else {\n          $i$$22$$149 = i$$22 + 1;\n          continue loop$$1;\n        }\n      }\n\n      break;\n    }\n  };\n\n  return loop$$1(0);\n}\nexport function tryPick(chooser$$1, array$$68) {\n  const loop$$2 = function loop$$2($i$$23$$152) {\n    loop$$2: while (true) {\n      const i$$23 = $i$$23$$152;\n\n      if (i$$23 >= array$$68.length) {\n        return null;\n      } else {\n        const matchValue$$9 = chooser$$1(array$$68[i$$23]);\n\n        if (matchValue$$9 == null) {\n          $i$$23$$152 = i$$23 + 1;\n          continue loop$$2;\n        } else {\n          return matchValue$$9;\n        }\n      }\n\n      break;\n    }\n  };\n\n  return loop$$2(0);\n}\nexport function findBack(predicate$$19, array$$69) {\n  const loop$$3 = function loop$$3($i$$24$$155) {\n    loop$$3: while (true) {\n      const i$$24 = $i$$24$$155;\n\n      if (i$$24 < 0) {\n        throw new Error(indexNotFoundMsg);\n      } else if (predicate$$19(array$$69[i$$24])) {\n        return array$$69[i$$24];\n      } else {\n        $i$$24$$155 = i$$24 - 1;\n        continue loop$$3;\n      }\n\n      break;\n    }\n  };\n\n  return loop$$3(array$$69.length - 1);\n}\nexport function tryFindBack(predicate$$20, array$$70) {\n  const loop$$4 = function loop$$4($i$$25$$158) {\n    loop$$4: while (true) {\n      const i$$25 = $i$$25$$158;\n\n      if (i$$25 < 0) {\n        return null;\n      } else if (predicate$$20(array$$70[i$$25])) {\n        return some(array$$70[i$$25]);\n      } else {\n        $i$$25$$158 = i$$25 - 1;\n        continue loop$$4;\n      }\n\n      break;\n    }\n  };\n\n  return loop$$4(array$$70.length - 1);\n}\nexport function findLastIndex(predicate$$21, array$$71) {\n  const loop$$5 = function loop$$5($i$$26$$161) {\n    loop$$5: while (true) {\n      const i$$26 = $i$$26$$161;\n\n      if (i$$26 < 0) {\n        return -1 | 0;\n      } else if (predicate$$21(array$$71[i$$26])) {\n        return i$$26 | 0;\n      } else {\n        $i$$26$$161 = i$$26 - 1;\n        continue loop$$5;\n      }\n\n      break;\n    }\n  };\n\n  return loop$$5(array$$71.length - 1) | 0;\n}\nexport function findIndexBack(predicate$$22, array$$72) {\n  const loop$$6 = function loop$$6($i$$27$$164) {\n    loop$$6: while (true) {\n      const i$$27 = $i$$27$$164;\n\n      if (i$$27 < 0) {\n        throw new Error(indexNotFoundMsg);\n      } else if (predicate$$22(array$$72[i$$27])) {\n        return i$$27 | 0;\n      } else {\n        $i$$27$$164 = i$$27 - 1;\n        continue loop$$6;\n      }\n\n      break;\n    }\n  };\n\n  return loop$$6(array$$72.length - 1) | 0;\n}\nexport function tryFindIndexBack(predicate$$23, array$$73) {\n  const loop$$7 = function loop$$7($i$$28$$167) {\n    loop$$7: while (true) {\n      const i$$28 = $i$$28$$167;\n\n      if (i$$28 < 0) {\n        return null;\n      } else if (predicate$$23(array$$73[i$$28])) {\n        return i$$28;\n      } else {\n        $i$$28$$167 = i$$28 - 1;\n        continue loop$$7;\n      }\n\n      break;\n    }\n  };\n\n  return loop$$7(array$$73.length - 1);\n}\nexport function choose(chooser$$2, array$$74, cons$$30) {\n  const arr$$7 = array$$74.filter(function f$$7(x$$5) {\n    const option = chooser$$2(x$$5);\n    return option != null;\n  });\n  return map(function g(x$$6) {\n    const option$$1 = chooser$$2(x$$6);\n    return value$$15(option$$1);\n  }, arr$$7, cons$$30);\n}\nexport function foldIndexed(folder$$2, state$$4, array$$76) {\n  return array$$76.reduce(function (delegateArg0$$1, delegateArg1$$1, delegateArg2) {\n    return folder$$2(delegateArg2, delegateArg0$$1, delegateArg1$$1);\n  }, state$$4);\n}\nexport function fold(folder$$4, state$$6, array$$78) {\n  return array$$78.reduce(function (delegateArg0$$2, delegateArg1$$2) {\n    return folder$$4(delegateArg0$$2, delegateArg1$$2);\n  }, state$$6);\n}\nexport function iterate(action, array$$80) {\n  for (let i$$30 = 0; i$$30 <= array$$80.length - 1; i$$30++) {\n    action(array$$80[i$$30]);\n  }\n}\nexport function iterateIndexed(action$$1, array$$81) {\n  for (let i$$31 = 0; i$$31 <= array$$81.length - 1; i$$31++) {\n    action$$1(i$$31, array$$81[i$$31]);\n  }\n}\nexport function iterate2(action$$2, array1$$2, array2$$2) {\n  if (array1$$2.length !== array2$$2.length) {\n    throw new Error(\"Arrays had different lengths\");\n  }\n\n  for (let i$$32 = 0; i$$32 <= array1$$2.length - 1; i$$32++) {\n    action$$2(array1$$2[i$$32], array2$$2[i$$32]);\n  }\n}\nexport function iterateIndexed2(action$$3, array1$$3, array2$$3) {\n  if (array1$$3.length !== array2$$3.length) {\n    throw new Error(\"Arrays had different lengths\");\n  }\n\n  for (let i$$33 = 0; i$$33 <= array1$$3.length - 1; i$$33++) {\n    action$$3(i$$33, array1$$3[i$$33], array2$$3[i$$33]);\n  }\n}\nexport function isEmpty(array$$82) {\n  return array$$82.length === 0;\n}\nexport function forAll(predicate$$25, array$$83) {\n  return array$$83.every(predicate$$25);\n}\nexport function permute(f$$8, array$$85) {\n  const size = array$$85.length | 0;\n  const res$$7 = array$$85.slice();\n  const checkFlags = new Int32Array(size);\n  iterateIndexed(function (i$$34, x$$9) {\n    const j$$1 = f$$8(i$$34) | 0;\n\n    if (j$$1 < 0 ? true : j$$1 >= size) {\n      throw new Error(\"Not a valid permutation\");\n    }\n\n    res$$7[j$$1] = x$$9;\n    checkFlags[j$$1] = 1;\n  }, array$$85);\n  let isValid;\n  isValid = checkFlags.every(function predicate$$27(y) {\n    return 1 === y;\n  });\n\n  if (!isValid) {\n    throw new Error(\"Not a valid permutation\");\n  }\n\n  return res$$7;\n}\nexport function setSlice(target$$5, lower, upper, source$$5) {\n  const lower$$1 = defaultArg(lower, 0) | 0;\n  const upper$$1 = defaultArg(upper, 0) | 0;\n  const length = (upper$$1 > 0 ? upper$$1 : target$$5.length - 1) - lower$$1 | 0;\n\n  for (let i$$35 = 0; i$$35 <= length; i$$35++) {\n    target$$5[i$$35 + lower$$1] = source$$5[i$$35];\n  }\n}\nexport function sortInPlaceBy(projection$$3, xs, comparer) {\n  xs.sort(function (x$$11, y$$1) {\n    return comparer.Compare(projection$$3(x$$11), projection$$3(y$$1));\n  });\n}\nexport function sortInPlace(xs$$1, comparer$$1) {\n  xs$$1.sort(function (x$$12, y$$2) {\n    return comparer$$1.Compare(x$$12, y$$2);\n  });\n}\nexport function sort(xs$$2, comparer$$2) {\n  const xs$$3 = xs$$2.slice();\n  xs$$3.sort(function comparer$$3(x$$13, y$$3) {\n    return comparer$$2.Compare(x$$13, y$$3);\n  });\n  return xs$$3;\n}\nexport function sortBy(projection$$4, xs$$4, comparer$$4) {\n  const xs$$5 = xs$$4.slice();\n  xs$$5.sort(function comparer$$5(x$$14, y$$4) {\n    return comparer$$4.Compare(projection$$4(x$$14), projection$$4(y$$4));\n  });\n  return xs$$5;\n}\nexport function sortDescending(xs$$6, comparer$$6) {\n  const xs$$7 = xs$$6.slice();\n  xs$$7.sort(function comparer$$7(x$$15, y$$5) {\n    return comparer$$6.Compare(x$$15, y$$5) * -1;\n  });\n  return xs$$7;\n}\nexport function sortByDescending(projection$$5, xs$$8, comparer$$8) {\n  const xs$$9 = xs$$8.slice();\n  xs$$9.sort(function comparer$$9(x$$16, y$$6) {\n    return comparer$$8.Compare(projection$$5(x$$16), projection$$5(y$$6)) * -1;\n  });\n  return xs$$9;\n}\nexport function sortWith(comparer$$10, xs$$10) {\n  const xs$$11 = xs$$10.slice();\n  xs$$11.sort(comparer$$10);\n  return xs$$11;\n}\nexport function unfold(generator, state$$8) {\n  const res$$8 = [];\n\n  const loop$$8 = function loop$$8($state$$9$$226) {\n    loop$$8: while (true) {\n      const state$$9 = $state$$9$$226;\n      const matchValue$$10 = generator(state$$9);\n\n      if (matchValue$$10 != null) {\n        const x$$17 = matchValue$$10[0];\n        const s$$2 = matchValue$$10[1];\n        const value$$11 = res$$8.push(x$$17);\n        void value$$11;\n        $state$$9$$226 = s$$2;\n        continue loop$$8;\n      }\n\n      break;\n    }\n  };\n\n  loop$$8(state$$8);\n  return res$$8;\n}\nexport function unzip(array$$95) {\n  const len$$8 = array$$95.length | 0;\n  const res1$$1 = new Array(len$$8);\n  const res2$$1 = new Array(len$$8);\n  iterateIndexed(function (i$$36, tupledArg) {\n    res1$$1[i$$36] = tupledArg[0];\n    res2$$1[i$$36] = tupledArg[1];\n  }, array$$95);\n  return [res1$$1, res2$$1];\n}\nexport function unzip3(array$$96) {\n  const len$$11 = array$$96.length | 0;\n  const res1$$2 = new Array(len$$11);\n  const res2$$2 = new Array(len$$11);\n  const res3 = new Array(len$$11);\n  iterateIndexed(function (i$$37, tupledArg$$1) {\n    res1$$2[i$$37] = tupledArg$$1[0];\n    res2$$2[i$$37] = tupledArg$$1[1];\n    res3[i$$37] = tupledArg$$1[2];\n  }, array$$96);\n  return [res1$$2, res2$$2, res3];\n}\nexport function zip(array1$$4, array2$$4) {\n  if (array1$$4.length !== array2$$4.length) {\n    throw new Error(\"Arrays had different lengths\");\n  }\n\n  let result$$10;\n  const len$$15 = array1$$4.length | 0;\n  result$$10 = new Array(len$$15);\n\n  for (let i$$38 = 0; i$$38 <= array1$$4.length - 1; i$$38++) {\n    result$$10[i$$38] = [array1$$4[i$$38], array2$$4[i$$38]];\n  }\n\n  return result$$10;\n}\nexport function zip3(array1$$5, array2$$5, array3) {\n  if (array1$$5.length !== array2$$5.length ? true : array2$$5.length !== array3.length) {\n    throw new Error(\"Arrays had different lengths\");\n  }\n\n  let result$$11;\n  const len$$16 = array1$$5.length | 0;\n  result$$11 = new Array(len$$16);\n\n  for (let i$$39 = 0; i$$39 <= array1$$5.length - 1; i$$39++) {\n    result$$11[i$$39] = [array1$$5[i$$39], array2$$5[i$$39], array3[i$$39]];\n  }\n\n  return result$$11;\n}\nexport function chunkBySize(chunkSize, array$$97) {\n  if (chunkSize < 1) {\n    throw new Error(\"The input must be positive.\\\\nParameter name: size\");\n  }\n\n  if (array$$97.length === 0) {\n    return [[]];\n  } else {\n    const result$$12 = [];\n\n    for (let x$$18 = 0; x$$18 <= ~~Math.ceil(array$$97.length / chunkSize) - 1; x$$18++) {\n      const start$$8 = x$$18 * chunkSize | 0;\n      const slice = array$$97.slice(start$$8, start$$8 + chunkSize);\n      const value$$12 = result$$12.push(slice);\n      void value$$12;\n    }\n\n    return result$$12;\n  }\n}\nexport function splitAt(index$$4, array$$100) {\n  if (index$$4 < 0) {\n    throw new Error(\"The input must be non-negative\\\\nParameter name: index\");\n  }\n\n  if (index$$4 > array$$100.length) {\n    throw new Error(\"The input sequence has an insufficient number of elements.\\\\nParameter name: index\");\n  }\n\n  return [array$$100.slice(0, 0 + index$$4), array$$100.slice(index$$4)];\n}\nexport function compareWith(comparer$$12, array1$$6, array2$$6) {\n  if (array1$$6 == null) {\n    if (array2$$6 == null) {\n      return 0;\n    } else {\n      return -1 | 0;\n    }\n  } else if (array2$$6 == null) {\n    return 1;\n  } else {\n    let i$$40 = 0;\n    let result$$13 = 0;\n    const length1 = array1$$6.length | 0;\n    const length2 = array2$$6.length | 0;\n\n    if (length1 > length2) {\n      return 1;\n    } else if (length1 < length2) {\n      return -1 | 0;\n    } else {\n      while (i$$40 < length1 ? result$$13 === 0 : false) {\n        result$$13 = comparer$$12(array1$$6[i$$40], array2$$6[i$$40]);\n        i$$40 = i$$40 + 1;\n      }\n\n      return result$$13 | 0;\n    }\n  }\n}\nexport function equalsWith(comparer$$13, array1$$7, array2$$7) {\n  return compareWith(compare, array1$$7, array2$$7) === 0;\n}\nexport function exactlyOne(array$$103) {\n  if (array$$103.length === 1) {\n    return array$$103[0];\n  } else if (array$$103.length === 0) {\n    throw new Error(\"The input sequence was empty\\\\nParameter name: array\");\n  } else {\n    throw new Error(\"Input array too long\\\\nParameter name: array\");\n  }\n}\nexport function head(array$$104) {\n  if (array$$104.length === 0) {\n    throw new Error(\"The input array was empty\\\\nParameter name: array\");\n  } else {\n    return array$$104[0];\n  }\n}\nexport function tryHead(array$$105) {\n  if (array$$105.length === 0) {\n    return null;\n  } else {\n    return some(array$$105[0]);\n  }\n}\nexport function tail(array$$106) {\n  if (array$$106.length === 0) {\n    throw new Error(\"Not enough elements\\\\nParameter name: array\");\n  }\n\n  return array$$106.slice(1);\n}\nexport function item(index$$5, array$$108) {\n  return array$$108[index$$5];\n}\nexport function tryItem(index$$6, array$$109) {\n  if (index$$6 < 0 ? true : index$$6 >= array$$109.length) {\n    return null;\n  } else {\n    return some(array$$109[index$$6]);\n  }\n}\nexport function foldBackIndexed(folder$$6, array$$110, state$$10) {\n  return array$$110.reduceRight(function (delegateArg0$$3, delegateArg1$$3, delegateArg2$$1) {\n    return folder$$6(delegateArg2$$1, delegateArg1$$3, delegateArg0$$3);\n  }, state$$10);\n}\nexport function foldBack(folder$$8, array$$112, state$$12) {\n  return array$$112.reduceRight(function (delegateArg0$$4, delegateArg1$$4) {\n    return folder$$8(delegateArg1$$4, delegateArg0$$4);\n  }, state$$12);\n}\nexport function foldIndexed2(folder$$10, state$$14, array1$$8, array2$$8) {\n  let acc$$6 = state$$14;\n\n  if (array1$$8.length !== array2$$8.length) {\n    throw new Error(\"Arrays have different lengths\");\n  }\n\n  for (let i$$42 = 0; i$$42 <= array1$$8.length - 1; i$$42++) {\n    acc$$6 = folder$$10(i$$42, acc$$6, array1$$8[i$$42], array2$$8[i$$42]);\n  }\n\n  return acc$$6;\n}\nexport function fold2(folder$$11, state$$15, array1$$9, array2$$9) {\n  return foldIndexed2(function (_arg1, acc$$7, x$$21, y$$7) {\n    return folder$$11(acc$$7, x$$21, y$$7);\n  }, state$$15, array1$$9, array2$$9);\n}\nexport function foldBackIndexed2(folder$$12, array1$$10, array2$$10, state$$16) {\n  let acc$$8 = state$$16;\n\n  if (array1$$10.length !== array2$$10.length) {\n    throw new Error(\"Arrays had different lengths\");\n  }\n\n  const size$$1 = array1$$10.length | 0;\n\n  for (let i$$43 = 1; i$$43 <= size$$1; i$$43++) {\n    acc$$8 = folder$$12(i$$43 - 1, array1$$10[size$$1 - i$$43], array2$$10[size$$1 - i$$43], acc$$8);\n  }\n\n  return acc$$8;\n}\nexport function foldBack2(f$$9, array1$$11, array2$$11, state$$17) {\n  return foldBackIndexed2(function (_arg1$$1, x$$22, y$$8, acc$$9) {\n    return f$$9(x$$22, y$$8, acc$$9);\n  }, array1$$11, array2$$11, state$$17);\n}\nexport function reduce(reduction, array$$114) {\n  if (array$$114.length === 0) {\n    throw new Error(\"The input array was empty\");\n  }\n\n  return array$$114.reduce(reduction);\n}\nexport function reduceBack(reduction$$2, array$$116) {\n  if (array$$116.length === 0) {\n    throw new Error(\"The input array was empty\");\n  }\n\n  return array$$116.reduceRight(reduction$$2);\n}\nexport function forAll2(predicate$$29, array1$$12, array2$$12) {\n  return fold2(function (acc$$10, x$$23, y$$9) {\n    return acc$$10 ? predicate$$29(x$$23, y$$9) : false;\n  }, true, array1$$12, array2$$12);\n}\nexport function existsOffset($predicate$$30$$281, $array$$118$$282, $index$$7$$283) {\n  existsOffset: while (true) {\n    const predicate$$30 = $predicate$$30$$281,\n          array$$118 = $array$$118$$282,\n          index$$7 = $index$$7$$283;\n\n    if (index$$7 === array$$118.length) {\n      return false;\n    } else if (predicate$$30(array$$118[index$$7])) {\n      return true;\n    } else {\n      $predicate$$30$$281 = predicate$$30;\n      $array$$118$$282 = array$$118;\n      $index$$7$$283 = index$$7 + 1;\n      continue existsOffset;\n    }\n\n    break;\n  }\n}\nexport function exists(predicate$$31, array$$119) {\n  return existsOffset(predicate$$31, array$$119, 0);\n}\nexport function existsOffset2($predicate$$32$$286, $array1$$13$$287, $array2$$13$$288, $index$$8$$289) {\n  existsOffset2: while (true) {\n    const predicate$$32 = $predicate$$32$$286,\n          array1$$13 = $array1$$13$$287,\n          array2$$13 = $array2$$13$$288,\n          index$$8 = $index$$8$$289;\n\n    if (index$$8 === array1$$13.length) {\n      return false;\n    } else if (predicate$$32(array1$$13[index$$8], array2$$13[index$$8])) {\n      return true;\n    } else {\n      $predicate$$32$$286 = predicate$$32;\n      $array1$$13$$287 = array1$$13;\n      $array2$$13$$288 = array2$$13;\n      $index$$8$$289 = index$$8 + 1;\n      continue existsOffset2;\n    }\n\n    break;\n  }\n}\nexport function exists2(predicate$$33, array1$$14, array2$$14) {\n  if (array1$$14.length !== array2$$14.length) {\n    throw new Error(\"Arrays had different lengths\");\n  }\n\n  return existsOffset2(predicate$$33, array1$$14, array2$$14, 0);\n}\nexport function sum(array$$120, adder) {\n  let acc$$11 = adder.GetZero();\n\n  for (let i$$44 = 0; i$$44 <= array$$120.length - 1; i$$44++) {\n    acc$$11 = adder.Add(acc$$11, array$$120[i$$44]);\n  }\n\n  return acc$$11;\n}\nexport function sumBy(projection$$6, array$$121, adder$$1) {\n  let acc$$12 = adder$$1.GetZero();\n\n  for (let i$$45 = 0; i$$45 <= array$$121.length - 1; i$$45++) {\n    acc$$12 = adder$$1.Add(acc$$12, projection$$6(array$$121[i$$45]));\n  }\n\n  return acc$$12;\n}\nexport function maxBy(projection$$7, xs$$12, comparer$$14) {\n  return reduce(function (x$$24, y$$10) {\n    return comparer$$14.Compare(projection$$7(y$$10), projection$$7(x$$24)) > 0 ? y$$10 : x$$24;\n  }, xs$$12);\n}\nexport function max(xs$$13, comparer$$15) {\n  return reduce(function (x$$25, y$$11) {\n    return comparer$$15.Compare(y$$11, x$$25) > 0 ? y$$11 : x$$25;\n  }, xs$$13);\n}\nexport function minBy(projection$$8, xs$$14, comparer$$16) {\n  return reduce(function (x$$26, y$$12) {\n    return comparer$$16.Compare(projection$$8(y$$12), projection$$8(x$$26)) > 0 ? x$$26 : y$$12;\n  }, xs$$14);\n}\nexport function min(xs$$15, comparer$$17) {\n  return reduce(function (x$$27, y$$13) {\n    return comparer$$17.Compare(y$$13, x$$27) > 0 ? x$$27 : y$$13;\n  }, xs$$15);\n}\nexport function average(array$$122, averager) {\n  if (array$$122.length === 0) {\n    throw new Error(\"The input array was empty\\\\nParameter name: array\");\n  }\n\n  let total = averager.GetZero();\n\n  for (let i$$46 = 0; i$$46 <= array$$122.length - 1; i$$46++) {\n    total = averager.Add(total, array$$122[i$$46]);\n  }\n\n  return averager.DivideByInt(total, array$$122.length);\n}\nexport function averageBy(projection$$9, array$$123, averager$$1) {\n  if (array$$123.length === 0) {\n    throw new Error(\"The input array was empty\\\\nParameter name: array\");\n  }\n\n  let total$$1 = averager$$1.GetZero();\n\n  for (let i$$47 = 0; i$$47 <= array$$123.length - 1; i$$47++) {\n    total$$1 = averager$$1.Add(total$$1, projection$$9(array$$123[i$$47]));\n  }\n\n  return averager$$1.DivideByInt(total$$1, array$$123.length);\n}\nexport function ofSeq(source$$6, cons$$31) {\n  return cons$$31.from(source$$6);\n}\nexport function ofList(source$$7, cons$$32) {\n  return cons$$32.from(source$$7);\n}\nexport function toList(source$$8) {\n  const len$$17 = source$$8.length | 0;\n  let target$$6 = new List();\n\n  for (let i$$48 = len$$17 - 1; i$$48 >= 0; i$$48--) {\n    target$$6 = new List(source$$8[i$$48], target$$6);\n  }\n\n  return target$$6;\n}\nexport function windowed(windowSize, source$$9) {\n  if (windowSize <= 0) {\n    throw new Error(\"windowSize must be positive\");\n  }\n\n  let res$$9;\n  const len$$18 = max$$1(comparePrimitives, 0, source$$9.length - windowSize) | 0;\n  res$$9 = new Array(len$$18);\n\n  for (let i$$49 = windowSize; i$$49 <= source$$9.length; i$$49++) {\n    res$$9[i$$49 - windowSize] = source$$9.slice(i$$49 - windowSize, i$$49 - 1 + 1);\n  }\n\n  return res$$9;\n}\nexport function splitInto(chunks, array$$124) {\n  if (chunks < 1) {\n    throw new Error(\"The input must be positive.\\\\nParameter name: chunks\");\n  }\n\n  if (array$$124.length === 0) {\n    return [[]];\n  } else {\n    const result$$14 = [];\n    const chunks$$1 = min$$1(comparePrimitives, chunks, array$$124.length) | 0;\n    const minChunkSize = ~~(array$$124.length / chunks$$1) | 0;\n    const chunksWithExtraItem = array$$124.length % chunks$$1 | 0;\n\n    for (let i$$50 = 0; i$$50 <= chunks$$1 - 1; i$$50++) {\n      const chunkSize$$1 = (i$$50 < chunksWithExtraItem ? minChunkSize + 1 : minChunkSize) | 0;\n      const start$$11 = i$$50 * minChunkSize + min$$1(comparePrimitives, chunksWithExtraItem, i$$50) | 0;\n      const slice$$1 = array$$124.slice(start$$11, start$$11 + chunkSize$$1);\n      const value$$13 = result$$14.push(slice$$1);\n      void value$$13;\n    }\n\n    return result$$14;\n  }\n}\nexport function transpose(arrays$$2, cons$$33) {\n  var value$$14;\n  const arrays$$3 = Array.isArray(arrays$$2) ? arrays$$2 : Array.from(arrays$$2);\n  const len$$20 = arrays$$3.length | 0;\n\n  if (len$$20 === 0) {\n    return new Array(0);\n  } else {\n    const lenInner = arrays$$3[0].length | 0;\n\n    if (value$$14 = (forAll(function predicate$$34(a) {\n      return a.length === lenInner;\n    }, arrays$$3)), (!value$$14)) {\n      throw new Error(\"Arrays had different lengths\");\n    }\n\n    const result$$15 = new Array(lenInner);\n\n    for (let i$$51 = 0; i$$51 <= lenInner - 1; i$$51++) {\n      result$$15[i$$51] = new cons$$33(len$$20);\n\n      for (let j$$2 = 0; j$$2 <= len$$20 - 1; j$$2++) {\n        result$$15[i$$51][j$$2] = arrays$$3[j$$2][i$$51];\n      }\n    }\n\n    return result$$15;\n  }\n}","import { defaultArg, value as value$$1, some } from \"./Option.js\";\nimport { List } from \"./Types.js\";\nimport { transpose as transpose$$1, pairwise as pairwise$$1, collect as collect$$1, scanBack as scanBack$$1, scan as scan$$1, foldBack2 as foldBack2$$1, fold2 as fold2$$1, fold as fold$$1, map as map$$1 } from \"./Seq.js\";\nimport { getItemFromDict, addToDict, tryGetValue, addToSet, count } from \"./Util.js\";\nimport { ofList } from \"./Array.js\";\nimport { splitInto as splitInto$$1, chunkBySize as chunkBySize$$1, permute as permute$$1, findIndexBack as findIndexBack$$1, tryFindIndexBack as tryFindIndexBack$$1 } from \"./Array\";\nimport { createMutable } from \"./Set.js\";\nimport { createMutable as createMutable$$1 } from \"./Map.js\";\nexport function head(_arg1) {\n  if (_arg1.tail != null) {\n    return _arg1.head;\n  } else {\n    throw new Error(\"List was empty\");\n  }\n}\nexport function tryHead(_arg1$$1) {\n  if (_arg1$$1.tail != null) {\n    return some(_arg1$$1.head);\n  } else {\n    return null;\n  }\n}\nexport function tail(_arg1$$2) {\n  if (_arg1$$2.tail != null) {\n    return _arg1$$2.tail;\n  } else {\n    throw new Error(\"List was empty\");\n  }\n}\nexport function last($_arg1$$3$$5) {\n  last: while (true) {\n    const _arg1$$3 = $_arg1$$3$$5;\n\n    if (_arg1$$3.tail != null) {\n      if (_arg1$$3.tail.tail == null) {\n        return _arg1$$3.head;\n      } else {\n        $_arg1$$3$$5 = _arg1$$3.tail;\n        continue last;\n      }\n    } else {\n      throw new Error(\"List was empty\");\n    }\n\n    break;\n  }\n}\nexport function tryLast($_arg1$$4$$6) {\n  tryLast: while (true) {\n    const _arg1$$4 = $_arg1$$4$$6;\n\n    if (_arg1$$4.tail != null) {\n      if (_arg1$$4.tail.tail == null) {\n        return some(_arg1$$4.head);\n      } else {\n        $_arg1$$4$$6 = _arg1$$4.tail;\n        continue tryLast;\n      }\n    } else {\n      return null;\n    }\n\n    break;\n  }\n}\nexport function compareWith(comparer, xs$$3, ys) {\n  if (xs$$3 === ys) {\n    return 0;\n  } else {\n    const loop = function loop($xs$$4$$10, $ys$$1$$11) {\n      loop: while (true) {\n        const xs$$4 = $xs$$4$$10,\n              ys$$1 = $ys$$1$$11;\n\n        if (xs$$4.tail != null) {\n          if (ys$$1.tail != null) {\n            const matchValue$$1 = comparer(xs$$4.head, ys$$1.head) | 0;\n\n            if (matchValue$$1 === 0) {\n              $xs$$4$$10 = xs$$4.tail;\n              $ys$$1$$11 = ys$$1.tail;\n              continue loop;\n            } else {\n              return matchValue$$1 | 0;\n            }\n          } else {\n            return 1;\n          }\n        } else if (ys$$1.tail == null) {\n          return 0;\n        } else {\n          return -1 | 0;\n        }\n\n        break;\n      }\n    };\n\n    return loop(xs$$3, ys) | 0;\n  }\n}\nexport function foldIndexedAux($f$$12, $i$$13, $acc$$14, $_arg1$$5$$15) {\n  foldIndexedAux: while (true) {\n    const f = $f$$12,\n          i = $i$$13,\n          acc = $acc$$14,\n          _arg1$$5 = $_arg1$$5$$15;\n\n    if (_arg1$$5.tail != null) {\n      $f$$12 = f;\n      $i$$13 = i + 1;\n      $acc$$14 = f(i, acc, _arg1$$5.head);\n      $_arg1$$5$$15 = _arg1$$5.tail;\n      continue foldIndexedAux;\n    } else {\n      return acc;\n    }\n\n    break;\n  }\n}\nexport function foldIndexed(f$$1, state, xs$$7) {\n  return foldIndexedAux(f$$1, 0, state, xs$$7);\n}\nexport function fold($f$$2$$19, $state$$1$$20, $xs$$8$$21) {\n  fold: while (true) {\n    const f$$2 = $f$$2$$19,\n          state$$1 = $state$$1$$20,\n          xs$$8 = $xs$$8$$21;\n\n    if (xs$$8.tail != null) {\n      $f$$2$$19 = f$$2;\n      $state$$1$$20 = f$$2(state$$1, xs$$8.head);\n      $xs$$8$$21 = xs$$8.tail;\n      continue fold;\n    } else {\n      return state$$1;\n    }\n\n    break;\n  }\n}\nexport function reverse(xs$$9) {\n  return fold(function (acc$$1, x$$6) {\n    return new List(x$$6, acc$$1);\n  }, new List(), xs$$9);\n}\nexport function foldBack(f$$3, xs$$10, state$$2) {\n  return fold(function (acc$$2, x$$7) {\n    return f$$3(x$$7, acc$$2);\n  }, state$$2, reverse(xs$$10));\n}\nexport function toSeq(xs$$11) {\n  return map$$1(function (x$$8) {\n    return x$$8;\n  }, xs$$11);\n}\nexport function ofSeq(xs$$12) {\n  const xs$$13 = fold$$1(function (acc$$3, x$$9) {\n    return new List(x$$9, acc$$3);\n  }, new List(), xs$$12);\n  return reverse(xs$$13);\n}\nexport function concat(lists) {\n  const xs$$15 = fold$$1(function (state$$3, xs$$14) {\n    return fold(function f$$4(acc$$4, x$$10) {\n      return new List(x$$10, acc$$4);\n    }, state$$3, xs$$14);\n  }, new List(), lists);\n  return reverse(xs$$15);\n}\nexport function foldIndexed2Aux($f$$5$$31, $i$$1$$32, $acc$$5$$33, $bs$$34, $cs$$35) {\n  foldIndexed2Aux: while (true) {\n    const f$$5 = $f$$5$$31,\n          i$$1 = $i$$1$$32,\n          acc$$5 = $acc$$5$$33,\n          bs = $bs$$34,\n          cs = $cs$$35;\n    var $target$$36, x$$11, xs$$16, y$$1, ys$$3;\n\n    if (bs.tail != null) {\n      if (cs.tail != null) {\n        $target$$36 = 1;\n        x$$11 = bs.head;\n        xs$$16 = bs.tail;\n        y$$1 = cs.head;\n        ys$$3 = cs.tail;\n      } else {\n        $target$$36 = 2;\n      }\n    } else if (cs.tail == null) {\n      $target$$36 = 0;\n    } else {\n      $target$$36 = 2;\n    }\n\n    switch ($target$$36) {\n      case 0:\n        {\n          return acc$$5;\n        }\n\n      case 1:\n        {\n          $f$$5$$31 = f$$5;\n          $i$$1$$32 = i$$1 + 1;\n          $acc$$5$$33 = f$$5(i$$1, acc$$5, x$$11, y$$1);\n          $bs$$34 = xs$$16;\n          $cs$$35 = ys$$3;\n          continue foldIndexed2Aux;\n        }\n\n      case 2:\n        {\n          throw new Error(\"Lists had different lengths\");\n        }\n    }\n\n    break;\n  }\n}\nexport function foldIndexed2(f$$6, state$$4, xs$$17, ys$$4) {\n  return foldIndexed2Aux(f$$6, 0, state$$4, xs$$17, ys$$4);\n}\nexport function fold2(f$$7, state$$5, xs$$18, ys$$5) {\n  return fold2$$1(f$$7, state$$5, xs$$18, ys$$5);\n}\nexport function foldBack2(f$$8, xs$$19, ys$$6, state$$6) {\n  return foldBack2$$1(f$$8, xs$$19, ys$$6, state$$6);\n}\nexport function unfold(f$$9, state$$7) {\n  const unfoldInner = function unfoldInner($acc$$6$$51, $state$$8$$52) {\n    unfoldInner: while (true) {\n      const acc$$6 = $acc$$6$$51,\n            state$$8 = $state$$8$$52;\n      const matchValue$$3 = f$$9(state$$8);\n\n      if (matchValue$$3 != null) {\n        const x$$12 = matchValue$$3[0];\n        const state$$9 = matchValue$$3[1];\n        $acc$$6$$51 = new List(x$$12, acc$$6);\n        $state$$8$$52 = state$$9;\n        continue unfoldInner;\n      } else {\n        return reverse(acc$$6);\n      }\n\n      break;\n    }\n  };\n\n  return unfoldInner(new List(), state$$7);\n}\nexport function foldIndexed3Aux($f$$10$$53, $i$$2$$54, $acc$$7$$55, $bs$$1$$56, $cs$$1$$57, $ds$$58) {\n  foldIndexed3Aux: while (true) {\n    const f$$10 = $f$$10$$53,\n          i$$2 = $i$$2$$54,\n          acc$$7 = $acc$$7$$55,\n          bs$$1 = $bs$$1$$56,\n          cs$$1 = $cs$$1$$57,\n          ds = $ds$$58;\n    var $target$$59, x$$13, xs$$20, y$$2, ys$$7, z, zs;\n\n    if (bs$$1.tail != null) {\n      if (cs$$1.tail != null) {\n        if (ds.tail != null) {\n          $target$$59 = 1;\n          x$$13 = bs$$1.head;\n          xs$$20 = bs$$1.tail;\n          y$$2 = cs$$1.head;\n          ys$$7 = cs$$1.tail;\n          z = ds.head;\n          zs = ds.tail;\n        } else {\n          $target$$59 = 2;\n        }\n      } else {\n        $target$$59 = 2;\n      }\n    } else if (cs$$1.tail == null) {\n      if (ds.tail == null) {\n        $target$$59 = 0;\n      } else {\n        $target$$59 = 2;\n      }\n    } else {\n      $target$$59 = 2;\n    }\n\n    switch ($target$$59) {\n      case 0:\n        {\n          return acc$$7;\n        }\n\n      case 1:\n        {\n          $f$$10$$53 = f$$10;\n          $i$$2$$54 = i$$2 + 1;\n          $acc$$7$$55 = f$$10(i$$2, acc$$7, x$$13, y$$2, z);\n          $bs$$1$$56 = xs$$20;\n          $cs$$1$$57 = ys$$7;\n          $ds$$58 = zs;\n          continue foldIndexed3Aux;\n        }\n\n      case 2:\n        {\n          throw new Error(\"Lists had different lengths\");\n        }\n    }\n\n    break;\n  }\n}\nexport function foldIndexed3(f$$11, seed, xs$$21, ys$$8, zs$$1) {\n  return foldIndexed3Aux(f$$11, 0, seed, xs$$21, ys$$8, zs$$1);\n}\nexport function fold3(f$$12, state$$10, xs$$22, ys$$9, zs$$2) {\n  return foldIndexed3(function (_arg1$$6, acc$$8, x$$14, y$$3, z$$1) {\n    return f$$12(acc$$8, x$$14, y$$3, z$$1);\n  }, state$$10, xs$$22, ys$$9, zs$$2);\n}\nexport function scan(f$$13, state$$11, xs$$23) {\n  const xs$$24 = scan$$1(f$$13, state$$11, xs$$23);\n  return ofSeq(xs$$24);\n}\nexport function scanBack(f$$14, xs$$25, state$$12) {\n  const xs$$26 = scanBack$$1(f$$14, xs$$25, state$$12);\n  return ofSeq(xs$$26);\n}\nexport function length(xs$$27) {\n  return fold(function (acc$$9, _arg1$$7) {\n    return acc$$9 + 1;\n  }, 0, xs$$27);\n}\nexport function append(xs$$28, ys$$10) {\n  return fold(function (acc$$10, x$$15) {\n    return new List(x$$15, acc$$10);\n  }, ys$$10, reverse(xs$$28));\n}\nexport function collect(f$$15, xs$$29) {\n  const xs$$30 = collect$$1(f$$15, xs$$29);\n  return ofSeq(xs$$30);\n}\nexport function map(f$$16, xs$$31) {\n  const xs$$32 = fold(function (acc$$11, x$$16) {\n    return new List(f$$16(x$$16), acc$$11);\n  }, new List(), xs$$31);\n  return reverse(xs$$32);\n}\nexport function mapIndexed(f$$17, xs$$33) {\n  const xs$$34 = foldIndexed(function (i$$3, acc$$12, x$$17) {\n    return new List(f$$17(i$$3, x$$17), acc$$12);\n  }, new List(), xs$$33);\n  return reverse(xs$$34);\n}\nexport function indexed(xs$$35) {\n  return mapIndexed(function (i$$4, x$$18) {\n    return [i$$4, x$$18];\n  }, xs$$35);\n}\nexport function map2(f$$18, xs$$36, ys$$11) {\n  const xs$$37 = fold2(function (acc$$13, x$$19, y$$4) {\n    return new List(f$$18(x$$19, y$$4), acc$$13);\n  }, new List(), xs$$36, ys$$11);\n  return reverse(xs$$37);\n}\nexport function mapIndexed2(f$$19, xs$$38, ys$$12) {\n  const xs$$39 = foldIndexed2(function (i$$5, acc$$14, x$$20, y$$5) {\n    return new List(f$$19(i$$5, x$$20, y$$5), acc$$14);\n  }, new List(), xs$$38, ys$$12);\n  return reverse(xs$$39);\n}\nexport function map3(f$$20, xs$$40, ys$$13, zs$$3) {\n  const xs$$41 = fold3(function (acc$$15, x$$21, y$$6, z$$2) {\n    return new List(f$$20(x$$21, y$$6, z$$2), acc$$15);\n  }, new List(), xs$$40, ys$$13, zs$$3);\n  return reverse(xs$$41);\n}\nexport function mapIndexed3(f$$21, xs$$42, ys$$14, zs$$4) {\n  const xs$$43 = foldIndexed3(function (i$$6, acc$$16, x$$22, y$$7, z$$3) {\n    return new List(f$$21(i$$6, x$$22, y$$7, z$$3), acc$$16);\n  }, new List(), xs$$42, ys$$14, zs$$4);\n  return reverse(xs$$43);\n}\nexport function mapFold(f$$22, s, xs$$44) {\n  const patternInput$$1 = fold(function foldFn(tupledArg, x$$23) {\n    const patternInput = f$$22(tupledArg[1], x$$23);\n    return [new List(patternInput[0], tupledArg[0]), patternInput[1]];\n  }, [new List(), s], xs$$44);\n  return [reverse(patternInput$$1[0]), patternInput$$1[1]];\n}\nexport function mapFoldBack(f$$23, xs$$45, s$$2) {\n  return mapFold(function (s$$3, v) {\n    return f$$23(v, s$$3);\n  }, s$$2, reverse(xs$$45));\n}\nexport function iterate(f$$24, xs$$46) {\n  fold(function (unitVar0, x$$24) {\n    f$$24(x$$24);\n  }, null, xs$$46);\n}\nexport function iterate2(f$$25, xs$$47, ys$$15) {\n  fold2(function (unitVar0$$1, x$$25, y$$8) {\n    f$$25(x$$25, y$$8);\n  }, null, xs$$47, ys$$15);\n}\nexport function iterateIndexed(f$$26, xs$$48) {\n  foldIndexed(function (i$$7, unitVar1, x$$26) {\n    f$$26(i$$7, x$$26);\n  }, null, xs$$48);\n}\nexport function iterateIndexed2(f$$27, xs$$49, ys$$16) {\n  foldIndexed2(function (i$$8, unitVar1$$1, x$$27, y$$9) {\n    f$$27(i$$8, x$$27, y$$9);\n  }, null, xs$$49, ys$$16);\n}\nexport function ofArray(xs$$50) {\n  let res$$1 = new List();\n\n  for (let i$$9 = count(xs$$50) - 1; i$$9 >= 0; i$$9--) {\n    res$$1 = new List(xs$$50[i$$9], res$$1);\n  }\n\n  return res$$1;\n}\nexport function empty() {\n  return new List();\n}\nexport function isEmpty(_arg1$$8) {\n  if (_arg1$$8.tail == null) {\n    return true;\n  } else {\n    return false;\n  }\n}\nexport function tryPickIndexedAux($f$$28$$120, $i$$10$$121, $_arg1$$9$$122) {\n  tryPickIndexedAux: while (true) {\n    const f$$28 = $f$$28$$120,\n          i$$10 = $i$$10$$121,\n          _arg1$$9 = $_arg1$$9$$122;\n\n    if (_arg1$$9.tail != null) {\n      const result = f$$28(i$$10, _arg1$$9.head);\n\n      if (result == null) {\n        $f$$28$$120 = f$$28;\n        $i$$10$$121 = i$$10 + 1;\n        $_arg1$$9$$122 = _arg1$$9.tail;\n        continue tryPickIndexedAux;\n      } else {\n        return result;\n      }\n    } else {\n      return null;\n    }\n\n    break;\n  }\n}\nexport function tryPickIndexed(f$$29, xs$$52) {\n  return tryPickIndexedAux(f$$29, 0, xs$$52);\n}\nexport function tryPick(f$$30, xs$$53) {\n  return tryPickIndexed(function (_arg1$$10, x$$29) {\n    return f$$30(x$$29);\n  }, xs$$53);\n}\nexport function pick(f$$31, xs$$54) {\n  const matchValue$$5 = tryPick(f$$31, xs$$54);\n\n  if (matchValue$$5 != null) {\n    const x$$30 = value$$1(matchValue$$5);\n    return x$$30;\n  } else {\n    throw new Error(\"List did not contain any matching elements\");\n  }\n}\nexport function tryFindIndexed(f$$32, xs$$55) {\n  return tryPickIndexed(function (i$$11, x$$31) {\n    return f$$32(i$$11, x$$31) ? some(x$$31) : null;\n  }, xs$$55);\n}\nexport function tryFind(f$$33, xs$$56) {\n  return tryPickIndexed(function (_arg1$$11, x$$32) {\n    return f$$33(x$$32) ? some(x$$32) : null;\n  }, xs$$56);\n}\nexport function findIndexed(f$$34, xs$$57) {\n  const matchValue$$6 = tryFindIndexed(f$$34, xs$$57);\n\n  if (matchValue$$6 != null) {\n    const x$$33 = value$$1(matchValue$$6);\n    return x$$33;\n  } else {\n    throw new Error(\"List did not contain any matching elements\");\n  }\n}\nexport function find(f$$35, xs$$58) {\n  return findIndexed(function (_arg1$$12, x$$34) {\n    return f$$35(x$$34);\n  }, xs$$58);\n}\nexport function findBack(f$$36, xs$$59) {\n  let xs$$61;\n  xs$$61 = reverse(xs$$59);\n  return find(f$$36, xs$$61);\n}\nexport function tryFindBack(f$$37, xs$$62) {\n  let xs$$64;\n  xs$$64 = reverse(xs$$62);\n  return tryFind(f$$37, xs$$64);\n}\nexport function tryFindIndex(f$$38, xs$$65) {\n  return tryPickIndexed(function (i$$12, x$$35) {\n    return f$$38(x$$35) ? i$$12 : null;\n  }, xs$$65);\n}\nexport function tryFindIndexBack(f$$39, xs$$66) {\n  const array = ofList(xs$$66, Array);\n  return tryFindIndexBack$$1(f$$39, array);\n}\nexport function findIndex(f$$40, xs$$67) {\n  const matchValue$$7 = tryFindIndex(f$$40, xs$$67);\n\n  if (matchValue$$7 != null) {\n    const x$$36 = matchValue$$7 | 0;\n    return x$$36 | 0;\n  } else {\n    throw new Error(\"List did not contain any matching elements\");\n  }\n}\nexport function findIndexBack(f$$41, xs$$68) {\n  const array$$1 = ofList(xs$$68, Array);\n  return findIndexBack$$1(f$$41, array$$1) | 0;\n}\nexport function item(n, xs$$69) {\n  return findIndexed(function (i$$13, _arg1$$13) {\n    return n === i$$13;\n  }, xs$$69);\n}\nexport function tryItem(n$$1, xs$$70) {\n  return tryFindIndexed(function (i$$14, _arg1$$14) {\n    return n$$1 === i$$14;\n  }, xs$$70);\n}\nexport function filter(f$$42, xs$$71) {\n  const xs$$72 = fold(function (acc$$17, x$$37) {\n    return f$$42(x$$37) ? new List(x$$37, acc$$17) : acc$$17;\n  }, new List(), xs$$71);\n  return reverse(xs$$72);\n}\nexport function partition(f$$43, xs$$73) {\n  return fold(function (tupledArg$$1, x$$38) {\n    return f$$43(x$$38) ? [new List(x$$38, tupledArg$$1[0]), tupledArg$$1[1]] : [tupledArg$$1[0], new List(x$$38, tupledArg$$1[1])];\n  }, [new List(), new List()], reverse(xs$$73));\n}\nexport function choose(f$$44, xs$$74) {\n  const xs$$75 = fold(function (acc$$18, x$$39) {\n    const matchValue$$8 = f$$44(x$$39);\n\n    if (matchValue$$8 == null) {\n      return acc$$18;\n    } else {\n      const y$$10 = value$$1(matchValue$$8);\n      return new List(y$$10, acc$$18);\n    }\n  }, new List(), xs$$74);\n  return reverse(xs$$75);\n}\nexport function contains(value, list, eq) {\n  const loop$$1 = function loop$$1($xs$$76$$162) {\n    loop$$1: while (true) {\n      const xs$$76 = $xs$$76$$162;\n\n      if (xs$$76.tail != null) {\n        if (eq.Equals(value, xs$$76.head)) {\n          return true;\n        } else {\n          $xs$$76$$162 = xs$$76.tail;\n          continue loop$$1;\n        }\n      } else {\n        return false;\n      }\n\n      break;\n    }\n  };\n\n  return loop$$1(list);\n}\nexport function except(itemsToExclude, array$$2, eq$$1) {\n  if (isEmpty(array$$2)) {\n    return array$$2;\n  } else {\n    const cached = createMutable(itemsToExclude, eq$$1);\n    return filter(function f$$45(arg00) {\n      return addToSet(arg00, cached);\n    }, array$$2);\n  }\n}\nexport function initialize(n$$2, f$$46) {\n  let xs$$78 = new List();\n\n  for (let i$$15 = 1; i$$15 <= n$$2; i$$15++) {\n    xs$$78 = new List(f$$46(n$$2 - i$$15), xs$$78);\n  }\n\n  return xs$$78;\n}\nexport function replicate(n$$3, x$$40) {\n  return initialize(n$$3, function (_arg1$$15) {\n    return x$$40;\n  });\n}\nexport function reduce(f$$47, _arg1$$16) {\n  if (_arg1$$16.tail != null) {\n    return fold(f$$47, _arg1$$16.head, _arg1$$16.tail);\n  } else {\n    throw new Error(\"List was empty\");\n  }\n}\nexport function reduceBack(f$$48, _arg1$$17) {\n  if (_arg1$$17.tail != null) {\n    return foldBack(f$$48, _arg1$$17.tail, _arg1$$17.head);\n  } else {\n    throw new Error(\"List was empty\");\n  }\n}\nexport function forAll(f$$49, xs$$79) {\n  return fold(function (acc$$19, x$$41) {\n    return acc$$19 ? f$$49(x$$41) : false;\n  }, true, xs$$79);\n}\nexport function forAll2(f$$50, xs$$80, ys$$17) {\n  return fold2(function (acc$$20, x$$42, y$$11) {\n    return acc$$20 ? f$$50(x$$42, y$$11) : false;\n  }, true, xs$$80, ys$$17);\n}\nexport function exists($f$$51$$180, $_arg1$$18$$181) {\n  exists: while (true) {\n    const f$$51 = $f$$51$$180,\n          _arg1$$18 = $_arg1$$18$$181;\n\n    if (_arg1$$18.tail != null) {\n      if (f$$51(_arg1$$18.head)) {\n        return true;\n      } else {\n        $f$$51$$180 = f$$51;\n        $_arg1$$18$$181 = _arg1$$18.tail;\n        continue exists;\n      }\n    } else {\n      return false;\n    }\n\n    break;\n  }\n}\nexport function exists2($f$$52$$182, $bs$$2$$183, $cs$$2$$184) {\n  exists2: while (true) {\n    const f$$52 = $f$$52$$182,\n          bs$$2 = $bs$$2$$183,\n          cs$$2 = $cs$$2$$184;\n    var $target$$185, x$$44, xs$$82, y$$12, ys$$18;\n\n    if (bs$$2.tail != null) {\n      if (cs$$2.tail != null) {\n        $target$$185 = 1;\n        x$$44 = bs$$2.head;\n        xs$$82 = bs$$2.tail;\n        y$$12 = cs$$2.head;\n        ys$$18 = cs$$2.tail;\n      } else {\n        $target$$185 = 2;\n      }\n    } else if (cs$$2.tail == null) {\n      $target$$185 = 0;\n    } else {\n      $target$$185 = 2;\n    }\n\n    switch ($target$$185) {\n      case 0:\n        {\n          return false;\n        }\n\n      case 1:\n        {\n          if (f$$52(x$$44, y$$12)) {\n            return true;\n          } else {\n            $f$$52$$182 = f$$52;\n            $bs$$2$$183 = xs$$82;\n            $cs$$2$$184 = ys$$18;\n            continue exists2;\n          }\n        }\n\n      case 2:\n        {\n          throw new Error(\"Lists had different lengths\");\n        }\n    }\n\n    break;\n  }\n}\nexport function unzip(xs$$83) {\n  return foldBack(function (tupledArg$$2, tupledArg$$3) {\n    return [new List(tupledArg$$2[0], tupledArg$$3[0]), new List(tupledArg$$2[1], tupledArg$$3[1])];\n  }, xs$$83, [new List(), new List()]);\n}\nexport function unzip3(xs$$84) {\n  return foldBack(function (tupledArg$$4, tupledArg$$5) {\n    return [new List(tupledArg$$4[0], tupledArg$$5[0]), new List(tupledArg$$4[1], tupledArg$$5[1]), new List(tupledArg$$4[2], tupledArg$$5[2])];\n  }, xs$$84, [new List(), new List(), new List()]);\n}\nexport function zip(xs$$85, ys$$19) {\n  return map2(function (x$$47, y$$15) {\n    return [x$$47, y$$15];\n  }, xs$$85, ys$$19);\n}\nexport function zip3(xs$$86, ys$$20, zs$$5) {\n  return map3(function (x$$48, y$$16, z$$5) {\n    return [x$$48, y$$16, z$$5];\n  }, xs$$86, ys$$20, zs$$5);\n}\nexport function sort(xs$$87, comparer$$1) {\n  let xs$$89;\n  const xs$$88 = ofList(xs$$87, Array);\n  xs$$88.sort(function comparer$$2(x$$49, y$$17) {\n    return comparer$$1.Compare(x$$49, y$$17);\n  });\n  xs$$89 = xs$$88;\n  return ofArray(xs$$89);\n}\nexport function sortBy(projection, xs$$90, comparer$$3) {\n  let xs$$92;\n  const xs$$91 = ofList(xs$$90, Array);\n  xs$$91.sort(function comparer$$4(x$$50, y$$18) {\n    return comparer$$3.Compare(projection(x$$50), projection(y$$18));\n  });\n  xs$$92 = xs$$91;\n  return ofArray(xs$$92);\n}\nexport function sortDescending(xs$$93, comparer$$5) {\n  let xs$$95;\n  const xs$$94 = ofList(xs$$93, Array);\n  xs$$94.sort(function comparer$$6(x$$51, y$$19) {\n    return comparer$$5.Compare(x$$51, y$$19) * -1;\n  });\n  xs$$95 = xs$$94;\n  return ofArray(xs$$95);\n}\nexport function sortByDescending(projection$$1, xs$$96, comparer$$7) {\n  let xs$$98;\n  const xs$$97 = ofList(xs$$96, Array);\n  xs$$97.sort(function comparer$$8(x$$52, y$$20) {\n    return comparer$$7.Compare(projection$$1(x$$52), projection$$1(y$$20)) * -1;\n  });\n  xs$$98 = xs$$97;\n  return ofArray(xs$$98);\n}\nexport function sortWith(comparer$$9, xs$$99) {\n  let xs$$101;\n  const xs$$100 = ofList(xs$$99, Array);\n  xs$$100.sort(comparer$$9);\n  xs$$101 = xs$$100;\n  return ofArray(xs$$101);\n}\nexport function sum(xs$$102, adder) {\n  return fold(function (acc$$21, x$$53) {\n    return adder.Add(acc$$21, x$$53);\n  }, adder.GetZero(), xs$$102);\n}\nexport function sumBy(f$$53, xs$$103, adder$$1) {\n  return fold(function (acc$$22, x$$54) {\n    return adder$$1.Add(acc$$22, f$$53(x$$54));\n  }, adder$$1.GetZero(), xs$$103);\n}\nexport function maxBy(projection$$2, xs$$104, comparer$$11) {\n  return reduce(function (x$$55, y$$21) {\n    return comparer$$11.Compare(projection$$2(y$$21), projection$$2(x$$55)) > 0 ? y$$21 : x$$55;\n  }, xs$$104);\n}\nexport function max(li, comparer$$12) {\n  return reduce(function (x$$56, y$$22) {\n    return comparer$$12.Compare(y$$22, x$$56) > 0 ? y$$22 : x$$56;\n  }, li);\n}\nexport function minBy(projection$$3, xs$$105, comparer$$13) {\n  return reduce(function (x$$57, y$$23) {\n    return comparer$$13.Compare(projection$$3(y$$23), projection$$3(x$$57)) > 0 ? x$$57 : y$$23;\n  }, xs$$105);\n}\nexport function min(xs$$106, comparer$$14) {\n  return reduce(function (x$$58, y$$24) {\n    return comparer$$14.Compare(y$$24, x$$58) > 0 ? x$$58 : y$$24;\n  }, xs$$106);\n}\nexport function average(xs$$107, averager) {\n  const total = fold(function (acc$$23, x$$59) {\n    return averager.Add(acc$$23, x$$59);\n  }, averager.GetZero(), xs$$107);\n  return averager.DivideByInt(total, length(xs$$107));\n}\nexport function averageBy(f$$54, xs$$108, averager$$1) {\n  const total$$1 = fold(function (acc$$24, x$$60) {\n    return averager$$1.Add(acc$$24, f$$54(x$$60));\n  }, averager$$1.GetZero(), xs$$108);\n  return averager$$1.DivideByInt(total$$1, length(xs$$108));\n}\nexport function permute(f$$55, xs$$109) {\n  let xs$$110;\n  let array$$3;\n  array$$3 = ofList(xs$$109, Array);\n  xs$$110 = permute$$1(f$$55, array$$3);\n  return ofArray(xs$$110);\n}\nexport function chunkBySize(chunkSize, xs$$111) {\n  let xs$$114;\n  let xs$$112;\n  let array$$4;\n  array$$4 = ofList(xs$$111, Array);\n  xs$$112 = chunkBySize$$1(chunkSize, array$$4);\n  xs$$114 = ofArray(xs$$112);\n  return map(function f$$56(xs$$113) {\n    return ofArray(xs$$113);\n  }, xs$$114);\n}\nexport function skip(i$$16, xs$$115) {\n  const skipInner = function skipInner($i$$17$$240, $xs$$116$$241) {\n    skipInner: while (true) {\n      const i$$17 = $i$$17$$240,\n            xs$$116 = $xs$$116$$241;\n\n      if (i$$17 === 0) {\n        return xs$$116;\n      } else if (xs$$116.tail != null) {\n        $i$$17$$240 = i$$17 - 1;\n        $xs$$116$$241 = xs$$116.tail;\n        continue skipInner;\n      } else {\n        throw new Error(\"The input sequence has an insufficient number of elements.\");\n      }\n\n      break;\n    }\n  };\n\n  if (i$$16 < 0) {\n    throw new Error(\"The input must be non-negative.\");\n  } else {\n    var $target$$242, i$$20, xs$$119;\n\n    if (i$$16 === 0) {\n      $target$$242 = 0;\n    } else if (i$$16 === 1) {\n      if (xs$$115.tail != null) {\n        $target$$242 = 1;\n      } else {\n        $target$$242 = 2;\n        i$$20 = i$$16;\n        xs$$119 = xs$$115;\n      }\n    } else {\n      $target$$242 = 2;\n      i$$20 = i$$16;\n      xs$$119 = xs$$115;\n    }\n\n    switch ($target$$242) {\n      case 0:\n        {\n          return xs$$115;\n        }\n\n      case 1:\n        {\n          return xs$$115.tail;\n        }\n\n      case 2:\n        {\n          return skipInner(i$$20, xs$$119);\n        }\n    }\n  }\n}\nexport function skipWhile($predicate$$243, $xs$$120$$244) {\n  skipWhile: while (true) {\n    const predicate = $predicate$$243,\n          xs$$120 = $xs$$120$$244;\n    var $target$$245, h$$4, t$$4;\n\n    if (xs$$120.tail != null) {\n      if (predicate(xs$$120.head)) {\n        $target$$245 = 0;\n        h$$4 = xs$$120.head;\n        t$$4 = xs$$120.tail;\n      } else {\n        $target$$245 = 1;\n      }\n    } else {\n      $target$$245 = 1;\n    }\n\n    switch ($target$$245) {\n      case 0:\n        {\n          $predicate$$243 = predicate;\n          $xs$$120$$244 = t$$4;\n          continue skipWhile;\n        }\n\n      case 1:\n        {\n          return xs$$120;\n        }\n    }\n\n    break;\n  }\n}\nexport function takeSplitAux($error$$246, $i$$21$$247, $acc$$25$$248, $xs$$121$$249) {\n  takeSplitAux: while (true) {\n    const error = $error$$246,\n          i$$21 = $i$$21$$247,\n          acc$$25 = $acc$$25$$248,\n          xs$$121 = $xs$$121$$249;\n\n    if (i$$21 === 0) {\n      return [reverse(acc$$25), xs$$121];\n    } else if (xs$$121.tail != null) {\n      $error$$246 = error;\n      $i$$21$$247 = i$$21 - 1;\n      $acc$$25$$248 = new List(xs$$121.head, acc$$25);\n      $xs$$121$$249 = xs$$121.tail;\n      continue takeSplitAux;\n    } else {\n      if (error) {\n        throw new Error(\"The input sequence has an insufficient number of elements.\");\n      } else {\n        return [reverse(acc$$25), xs$$121];\n      }\n    }\n\n    break;\n  }\n}\nexport function take(i$$22, xs$$123) {\n  if (i$$22 < 0) {\n    throw new Error(\"The input must be non-negative.\");\n  } else {\n    var $target$$252, i$$25, xs$$124;\n\n    if (i$$22 === 0) {\n      $target$$252 = 0;\n    } else if (i$$22 === 1) {\n      if (xs$$123.tail != null) {\n        $target$$252 = 1;\n      } else {\n        $target$$252 = 2;\n        i$$25 = i$$22;\n        xs$$124 = xs$$123;\n      }\n    } else {\n      $target$$252 = 2;\n      i$$25 = i$$22;\n      xs$$124 = xs$$123;\n    }\n\n    switch ($target$$252) {\n      case 0:\n        {\n          return new List();\n        }\n\n      case 1:\n        {\n          return new List(xs$$123.head, new List());\n        }\n\n      case 2:\n        {\n          const tuple = takeSplitAux(true, i$$25, new List(), xs$$124);\n          return tuple[0];\n        }\n    }\n  }\n}\nexport function takeWhile(predicate$$1, xs$$125) {\n  if (xs$$125.tail != null) {\n    if (xs$$125.tail.tail == null) {\n      if (predicate$$1(xs$$125.head)) {\n        return xs$$125;\n      } else {\n        return xs$$125.tail;\n      }\n    } else {\n      if (!predicate$$1(xs$$125.head)) {\n        return new List();\n      } else {\n        return new List(xs$$125.head, takeWhile(predicate$$1, xs$$125.tail));\n      }\n    }\n  } else {\n    return xs$$125;\n  }\n}\nexport function truncate(i$$26, xs$$127) {\n  if (i$$26 < 0) {\n    throw new Error(\"The input must be non-negative.\");\n  } else {\n    var $target$$257, i$$29, xs$$128;\n\n    if (i$$26 === 0) {\n      $target$$257 = 0;\n    } else if (i$$26 === 1) {\n      if (xs$$127.tail != null) {\n        $target$$257 = 1;\n      } else {\n        $target$$257 = 2;\n        i$$29 = i$$26;\n        xs$$128 = xs$$127;\n      }\n    } else {\n      $target$$257 = 2;\n      i$$29 = i$$26;\n      xs$$128 = xs$$127;\n    }\n\n    switch ($target$$257) {\n      case 0:\n        {\n          return new List();\n        }\n\n      case 1:\n        {\n          return new List(xs$$127.head, new List());\n        }\n\n      case 2:\n        {\n          const tuple$$1 = takeSplitAux(false, i$$29, new List(), xs$$128);\n          return tuple$$1[0];\n        }\n    }\n  }\n}\nexport function splitAt(i$$30, xs$$129) {\n  if (i$$30 < 0) {\n    throw new Error(\"The input must be non-negative.\");\n  } else {\n    var $target$$260, i$$33, xs$$131;\n\n    if (i$$30 === 0) {\n      $target$$260 = 0;\n    } else if (i$$30 === 1) {\n      if (xs$$129.tail != null) {\n        $target$$260 = 1;\n      } else {\n        $target$$260 = 2;\n        i$$33 = i$$30;\n        xs$$131 = xs$$129;\n      }\n    } else {\n      $target$$260 = 2;\n      i$$33 = i$$30;\n      xs$$131 = xs$$129;\n    }\n\n    switch ($target$$260) {\n      case 0:\n        {\n          return [new List(), xs$$129];\n        }\n\n      case 1:\n        {\n          return [new List(xs$$129.head, new List()), xs$$129.tail];\n        }\n\n      case 2:\n        {\n          return takeSplitAux(true, i$$33, new List(), xs$$131);\n        }\n    }\n  }\n}\nexport function outOfRange() {\n  throw new Error(\"Index out of range\");\n}\nexport function slice(lower, upper, xs$$132) {\n  const lower$$1 = defaultArg(lower, 0) | 0;\n  const hasUpper = upper != null;\n\n  if (lower$$1 < 0) {\n    return outOfRange();\n  } else if (hasUpper ? upper < lower$$1 : false) {\n    return new List();\n  } else {\n    let lastIndex = -1 | 0;\n    let res$$2;\n    const state$$13 = new List();\n    res$$2 = foldIndexed(function f$$57(i$$34, acc$$26, x$$67) {\n      lastIndex = i$$34;\n\n      if (lower$$1 <= i$$34 ? !hasUpper ? true : i$$34 <= upper : false) {\n        return new List(x$$67, acc$$26);\n      } else {\n        return acc$$26;\n      }\n    }, state$$13, xs$$132);\n\n    if (lower$$1 > lastIndex + 1 ? true : hasUpper ? upper > lastIndex : false) {\n      outOfRange();\n    }\n\n    return reverse(res$$2);\n  }\n}\nexport function distinctBy(projection$$4, xs$$134, eq$$2) {\n  const hashSet = createMutable([], eq$$2);\n  return filter(function f$$58($arg$$1) {\n    const arg00$$1 = projection$$4($arg$$1);\n    return addToSet(arg00$$1, hashSet);\n  }, xs$$134);\n}\nexport function distinct(xs$$136, eq$$3) {\n  return distinctBy(function (x$$68) {\n    return x$$68;\n  }, xs$$136, eq$$3);\n}\nexport function exactlyOne(xs$$137) {\n  if (xs$$137.tail != null) {\n    if (xs$$137.tail.tail != null) {\n      throw new Error(\"Input list too long\\\\nParameter name: list\");\n    } else {\n      return xs$$137.head;\n    }\n  } else {\n    throw new Error(\"The input sequence was empty\\\\nParameter name: list\");\n  }\n}\nexport function groupBy(projection$$5, xs$$139, eq$$4) {\n  const dict = createMutable$$1([], eq$$4);\n  let keys = new List();\n  iterate(function f$$59(v$$2) {\n    const key = projection$$5(v$$2);\n    const matchValue$$16 = tryGetValue(dict, key, null);\n\n    if (matchValue$$16[0]) {\n      dict.set(key, new List(v$$2, matchValue$$16[1]));\n    } else {\n      addToDict(dict, key, new List(v$$2, new List()));\n      keys = new List(key, keys);\n    }\n  }, xs$$139);\n  let result$$1 = new List();\n  const xs$$141 = keys;\n  iterate(function f$$60(key$$1) {\n    result$$1 = new List([key$$1, reverse(getItemFromDict(dict, key$$1))], result$$1);\n  }, xs$$141);\n  return result$$1;\n}\nexport function countBy(projection$$6, xs$$142, eq$$5) {\n  const dict$$1 = createMutable$$1([], eq$$5);\n  let keys$$1 = new List();\n  iterate(function f$$61(v$$3) {\n    const key$$2 = projection$$6(v$$3);\n    const matchValue$$17 = tryGetValue(dict$$1, key$$2, 0);\n\n    if (matchValue$$17[0]) {\n      dict$$1.set(key$$2, matchValue$$17[1] + 1);\n    } else {\n      dict$$1.set(key$$2, 1);\n      keys$$1 = new List(key$$2, keys$$1);\n    }\n  }, xs$$142);\n  let result$$2 = new List();\n  const xs$$144 = keys$$1;\n  iterate(function f$$62(key$$3) {\n    result$$2 = new List([key$$3, getItemFromDict(dict$$1, key$$3)], result$$2);\n  }, xs$$144);\n  return result$$2;\n}\nexport function where(predicate$$2, source) {\n  return filter(predicate$$2, source);\n}\nexport function pairwise(source$$1) {\n  const xs$$145 = pairwise$$1(source$$1);\n  return ofSeq(xs$$145);\n}\nexport function windowed(windowSize, source$$2) {\n  if (windowSize <= 0) {\n    throw new Error(\"windowSize must be positive\");\n  }\n\n  let res$$3 = new List();\n\n  for (let i$$35 = length(source$$2); i$$35 >= windowSize; i$$35--) {\n    res$$3 = new List(slice(i$$35 - windowSize, i$$35 - 1, source$$2), res$$3);\n  }\n\n  return res$$3;\n}\nexport function splitInto(chunks, source$$3) {\n  let xs$$148;\n  let xs$$146;\n  let array$$5;\n  array$$5 = ofList(source$$3, Array);\n  xs$$146 = splitInto$$1(chunks, array$$5);\n  xs$$148 = ofArray(xs$$146);\n  return map(function f$$63(xs$$147) {\n    return ofArray(xs$$147);\n  }, xs$$148);\n}\nexport function transpose(lists$$1) {\n  let xs$$150;\n  let source$$5;\n  source$$5 = transpose$$1(lists$$1);\n  xs$$150 = map$$1(ofSeq, source$$5);\n  return ofSeq(xs$$150);\n}","export class CancellationToken {\n    constructor(cancelled = false) {\n        this._id = 0;\n        this._cancelled = cancelled;\n        this._listeners = new Map();\n    }\n    get isCancelled() {\n        return this._cancelled;\n    }\n    cancel() {\n        if (!this._cancelled) {\n            this._cancelled = true;\n            for (const [, listener] of this._listeners) {\n                listener();\n            }\n        }\n    }\n    addListener(f) {\n        const id = this._id;\n        this._listeners.set(this._id++, f);\n        return id;\n    }\n    removeListener(id) {\n        return this._listeners.delete(id);\n    }\n    register(f, state) {\n        const $ = this;\n        const id = this.addListener(state == null ? f : () => f(state));\n        return { Dispose() { $.removeListener(id); } };\n    }\n}\nexport class OperationCanceledError extends Error {\n    constructor() {\n        super(\"The operation was canceled\");\n        Object.setPrototypeOf(this, OperationCanceledError.prototype);\n    }\n}\nexport class Trampoline {\n    constructor() {\n        this.callCount = 0;\n    }\n    static get maxTrampolineCallCount() {\n        return 2000;\n    }\n    incrementAndCheck() {\n        return this.callCount++ > Trampoline.maxTrampolineCallCount;\n    }\n    hijack(f) {\n        this.callCount = 0;\n        setTimeout(f, 0);\n    }\n}\nexport function protectedCont(f) {\n    return (ctx) => {\n        if (ctx.cancelToken.isCancelled) {\n            ctx.onCancel(new OperationCanceledError());\n        }\n        else if (ctx.trampoline.incrementAndCheck()) {\n            ctx.trampoline.hijack(() => {\n                try {\n                    f(ctx);\n                }\n                catch (err) {\n                    ctx.onError(err);\n                }\n            });\n        }\n        else {\n            try {\n                f(ctx);\n            }\n            catch (err) {\n                ctx.onError(err);\n            }\n        }\n    };\n}\nexport function protectedBind(computation, binder) {\n    return protectedCont((ctx) => {\n        computation({\n            onSuccess: (x) => {\n                try {\n                    binder(x)(ctx);\n                }\n                catch (ex) {\n                    ctx.onError(ex);\n                }\n            },\n            onError: ctx.onError,\n            onCancel: ctx.onCancel,\n            cancelToken: ctx.cancelToken,\n            trampoline: ctx.trampoline,\n        });\n    });\n}\nexport function protectedReturn(value) {\n    return protectedCont((ctx) => ctx.onSuccess(value));\n}\nexport class AsyncBuilder {\n    Bind(computation, binder) {\n        return protectedBind(computation, binder);\n    }\n    Combine(computation1, computation2) {\n        return this.Bind(computation1, () => computation2);\n    }\n    Delay(generator) {\n        return protectedCont((ctx) => generator()(ctx));\n    }\n    For(sequence, body) {\n        const iter = sequence[Symbol.iterator]();\n        let cur = iter.next();\n        return this.While(() => !cur.done, this.Delay(() => {\n            const res = body(cur.value);\n            cur = iter.next();\n            return res;\n        }));\n    }\n    Return(value) {\n        return protectedReturn(value);\n    }\n    ReturnFrom(computation) {\n        return computation;\n    }\n    TryFinally(computation, compensation) {\n        return protectedCont((ctx) => {\n            computation({\n                onSuccess: (x) => {\n                    compensation();\n                    ctx.onSuccess(x);\n                },\n                onError: (x) => {\n                    compensation();\n                    ctx.onError(x);\n                },\n                onCancel: (x) => {\n                    compensation();\n                    ctx.onCancel(x);\n                },\n                cancelToken: ctx.cancelToken,\n                trampoline: ctx.trampoline,\n            });\n        });\n    }\n    TryWith(computation, catchHandler) {\n        return protectedCont((ctx) => {\n            computation({\n                onSuccess: ctx.onSuccess,\n                onCancel: ctx.onCancel,\n                cancelToken: ctx.cancelToken,\n                trampoline: ctx.trampoline,\n                onError: (ex) => {\n                    try {\n                        catchHandler(ex)(ctx);\n                    }\n                    catch (ex2) {\n                        ctx.onError(ex2);\n                    }\n                },\n            });\n        });\n    }\n    Using(resource, binder) {\n        return this.TryFinally(binder(resource), () => resource.Dispose());\n    }\n    While(guard, computation) {\n        if (guard()) {\n            return this.Bind(computation, () => this.While(guard, computation));\n        }\n        else {\n            return this.Return(void 0);\n        }\n    }\n    Zero() {\n        return protectedCont((ctx) => ctx.onSuccess(void 0));\n    }\n}\nexport const singleton = new AsyncBuilder();\n//# sourceMappingURL=AsyncBuilder.js.map","import { OperationCanceledError, Trampoline } from \"./AsyncBuilder\";\nimport { CancellationToken } from \"./AsyncBuilder\";\nimport { protectedCont } from \"./AsyncBuilder\";\nimport { protectedBind } from \"./AsyncBuilder\";\nimport { protectedReturn } from \"./AsyncBuilder\";\nimport { choice1, choice2 } from \"./Option\";\nimport { map } from \"./Seq\";\n// Implemented just for type references\nexport default class Async {\n}\nfunction emptyContinuation(_x) {\n    // NOP\n}\n// MakeAsync: body:(AsyncActivation<'T> -> AsyncReturn) -> Async<'T>\nexport function makeAsync(body) {\n    return body;\n}\n// Invoke: computation: Async<'T> -> ctxt:AsyncActivation<'T> -> AsyncReturn\nexport function invoke(computation, ctx) {\n    return computation(ctx);\n}\n// CallThenInvoke: ctxt:AsyncActivation<'T> -> result1:'U -> part2:('U -> Async<'T>) -> AsyncReturn\nexport function callThenInvoke(ctx, result1, part2) {\n    return part2(result1)(ctx);\n}\n// Bind: ctxt:AsyncActivation<'T> -> part1:Async<'U> -> part2:('U -> Async<'T>) -> AsyncReturn\nexport function bind(ctx, part1, part2) {\n    return protectedBind(part1, part2)(ctx);\n}\nexport function createCancellationToken(arg) {\n    const token = new CancellationToken(typeof arg === \"boolean\" ? arg : false);\n    if (typeof arg === \"number\") {\n        setTimeout(() => { token.cancel(); }, arg);\n    }\n    return token;\n}\nexport function cancel(token) {\n    token.cancel();\n}\nexport function cancelAfter(token, ms) {\n    setTimeout(() => { token.cancel(); }, ms);\n}\nexport function isCancellationRequested(token) {\n    return token != null && token.isCancelled;\n}\nexport function startChild(computation) {\n    const promise = startAsPromise(computation);\n    // JS Promises are hot, computation has already started\n    // but we delay returning the result\n    return protectedCont((ctx) => protectedReturn(awaitPromise(promise))(ctx));\n}\nexport function awaitPromise(p) {\n    return fromContinuations((conts) => p.then(conts[0]).catch((err) => (err instanceof OperationCanceledError\n        ? conts[2] : conts[1])(err)));\n}\nexport function cancellationToken() {\n    return protectedCont((ctx) => ctx.onSuccess(ctx.cancelToken));\n}\nexport const defaultCancellationToken = new CancellationToken();\nexport function catchAsync(work) {\n    return protectedCont((ctx) => {\n        work({\n            onSuccess: (x) => ctx.onSuccess(choice1(x)),\n            onError: (ex) => ctx.onSuccess(choice2(ex)),\n            onCancel: ctx.onCancel,\n            cancelToken: ctx.cancelToken,\n            trampoline: ctx.trampoline,\n        });\n    });\n}\nexport function fromContinuations(f) {\n    return protectedCont((ctx) => f([ctx.onSuccess, ctx.onError, ctx.onCancel]));\n}\nexport function ignore(computation) {\n    return protectedBind(computation, (_x) => protectedReturn(void 0));\n}\nexport function parallel(computations) {\n    return awaitPromise(Promise.all(map((w) => startAsPromise(w), computations)));\n}\nexport function sleep(millisecondsDueTime) {\n    return protectedCont((ctx) => {\n        let tokenId;\n        const timeoutId = setTimeout(() => {\n            ctx.cancelToken.removeListener(tokenId);\n            ctx.onSuccess(void 0);\n        }, millisecondsDueTime);\n        tokenId = ctx.cancelToken.addListener(() => {\n            clearTimeout(timeoutId);\n            ctx.onCancel(new OperationCanceledError());\n        });\n    });\n}\nexport function start(computation, cancellationToken) {\n    return startWithContinuations(computation, cancellationToken);\n}\nexport function startImmediate(computation, cancellationToken) {\n    return start(computation, cancellationToken);\n}\nexport function startWithContinuations(computation, continuation, exceptionContinuation, cancellationContinuation, cancelToken) {\n    if (typeof continuation !== \"function\") {\n        cancelToken = continuation;\n        continuation = undefined;\n    }\n    const trampoline = new Trampoline();\n    computation({\n        onSuccess: continuation ? continuation : emptyContinuation,\n        onError: exceptionContinuation ? exceptionContinuation : emptyContinuation,\n        onCancel: cancellationContinuation ? cancellationContinuation : emptyContinuation,\n        cancelToken: cancelToken ? cancelToken : defaultCancellationToken,\n        trampoline,\n    });\n}\nexport function startAsPromise(computation, cancellationToken) {\n    return new Promise((resolve, reject) => startWithContinuations(computation, resolve, reject, reject, cancellationToken ? cancellationToken : defaultCancellationToken));\n}\n//# sourceMappingURL=Async.js.map","import { tryValueIfChoice1, tryValueIfChoice2, value } from \"./Option\";\nexport class Observer {\n    constructor(onNext, onError, onCompleted) {\n        this.OnNext = onNext;\n        this.OnError = onError || ((_e) => { return; });\n        this.OnCompleted = onCompleted || (() => { return; });\n    }\n}\nclass Observable {\n    constructor(subscribe) {\n        this.Subscribe = subscribe;\n    }\n}\nexport function protect(f, succeed, fail) {\n    try {\n        return succeed(f());\n    }\n    catch (e) {\n        fail(e);\n    }\n}\nexport function add(callback, source) {\n    source.Subscribe(new Observer(callback));\n}\nexport function choose(chooser, source) {\n    return new Observable((observer) => source.Subscribe(new Observer((t) => protect(() => chooser(t), (u) => { if (u != null) {\n        observer.OnNext(value(u));\n    } }, observer.OnError), observer.OnError, observer.OnCompleted)));\n}\nexport function filter(predicate, source) {\n    return choose((x) => predicate(x) ? x : null, source);\n}\nexport function map(mapping, source) {\n    return new Observable((observer) => source.Subscribe(new Observer((t) => {\n        protect(() => mapping(t), observer.OnNext, observer.OnError);\n    }, observer.OnError, observer.OnCompleted)));\n}\nexport function merge(source1, source2) {\n    return new Observable((observer) => {\n        let stopped = false;\n        let completed1 = false;\n        let completed2 = false;\n        const h1 = source1.Subscribe(new Observer((v) => { if (!stopped) {\n            observer.OnNext(v);\n        } }, (e) => {\n            if (!stopped) {\n                stopped = true;\n                observer.OnError(e);\n            }\n        }, () => {\n            if (!stopped) {\n                completed1 = true;\n                if (completed2) {\n                    stopped = true;\n                    observer.OnCompleted();\n                }\n            }\n        }));\n        const h2 = source2.Subscribe(new Observer((v) => { if (!stopped) {\n            observer.OnNext(v);\n        } }, (e) => {\n            if (!stopped) {\n                stopped = true;\n                observer.OnError(e);\n            }\n        }, () => {\n            if (!stopped) {\n                completed2 = true;\n                if (completed1) {\n                    stopped = true;\n                    observer.OnCompleted();\n                }\n            }\n        }));\n        return {\n            Dispose() {\n                h1.Dispose();\n                h2.Dispose();\n            },\n        };\n    });\n}\nexport function pairwise(source) {\n    return new Observable((observer) => {\n        let last;\n        return source.Subscribe(new Observer((next) => {\n            if (last != null) {\n                observer.OnNext([last, next]);\n            }\n            last = next;\n        }, observer.OnError, observer.OnCompleted));\n    });\n}\nexport function partition(predicate, source) {\n    return [filter(predicate, source), filter((x) => !predicate(x), source)];\n}\nexport function scan(collector, state, source) {\n    return new Observable((observer) => {\n        return source.Subscribe(new Observer((t) => {\n            protect(() => collector(state, t), (u) => { state = u; observer.OnNext(u); }, observer.OnError);\n        }, observer.OnError, observer.OnCompleted));\n    });\n}\nexport function split(splitter, source) {\n    return [choose((v) => tryValueIfChoice1(splitter(v)), source), choose((v) => tryValueIfChoice2(splitter(v)), source)];\n}\nexport function subscribe(callback, source) {\n    return source.Subscribe(new Observer(callback));\n}\n//# sourceMappingURL=Observable.js.map","import { Observer, protect } from \"./Observable\";\nimport { some, tryValueIfChoice1, tryValueIfChoice2, value } from \"./Option\";\nimport { iterate as seqIterate } from \"./Seq\";\nexport default class Event {\n    constructor(_subscriber, delegates) {\n        this._subscriber = _subscriber;\n        this.delegates = delegates || new Array();\n    }\n    Add(f) {\n        this._addHandler(f);\n    }\n    // IEvent<T> methods\n    get Publish() {\n        return this;\n    }\n    Trigger(value) {\n        seqIterate((f) => f(value), this.delegates);\n    }\n    // IDelegateEvent<T> methods\n    AddHandler(handler) {\n        if (this._dotnetDelegates == null) {\n            this._dotnetDelegates = new Map();\n        }\n        const f = (x) => handler(null, x);\n        this._dotnetDelegates.set(handler, f);\n        this._addHandler(f);\n    }\n    RemoveHandler(handler) {\n        if (this._dotnetDelegates != null) {\n            const f = this._dotnetDelegates.get(handler);\n            if (f != null) {\n                this._dotnetDelegates.delete(handler);\n                this._removeHandler(f);\n            }\n        }\n    }\n    // IObservable<T> methods\n    Subscribe(arg) {\n        return typeof arg === \"function\"\n            ? this._subscribeFromCallback(arg)\n            : this._subscribeFromObserver(arg);\n    }\n    _addHandler(f) {\n        this.delegates.push(f);\n    }\n    _removeHandler(f) {\n        const index = this.delegates.indexOf(f);\n        if (index > -1) {\n            this.delegates.splice(index, 1);\n        }\n    }\n    _subscribeFromObserver(observer) {\n        if (this._subscriber) {\n            return this._subscriber(observer);\n        }\n        const callback = observer.OnNext;\n        this._addHandler(callback);\n        return { Dispose: () => { this._removeHandler(callback); } };\n    }\n    _subscribeFromCallback(callback) {\n        this._addHandler(callback);\n        return { Dispose: () => { this._removeHandler(callback); } };\n    }\n}\nexport function add(callback, sourceEvent) {\n    sourceEvent.Subscribe(new Observer(callback));\n}\nexport function choose(chooser, sourceEvent) {\n    const source = sourceEvent;\n    return new Event((observer) => source.Subscribe(new Observer((t) => protect(() => chooser(t), (u) => { if (u != null) {\n        observer.OnNext(value(u));\n    } }, observer.OnError), observer.OnError, observer.OnCompleted)), source.delegates);\n}\nexport function filter(predicate, sourceEvent) {\n    return choose((x) => predicate(x) ? some(x) : null, sourceEvent);\n}\nexport function map(mapping, sourceEvent) {\n    const source = sourceEvent;\n    return new Event((observer) => source.Subscribe(new Observer((t) => protect(() => mapping(t), observer.OnNext, observer.OnError), observer.OnError, observer.OnCompleted)), source.delegates);\n}\nexport function merge(event1, event2) {\n    const source1 = event1;\n    const source2 = event2;\n    return new Event((observer) => {\n        let stopped = false;\n        let completed1 = false;\n        let completed2 = false;\n        const h1 = source1.Subscribe(new Observer((v) => { if (!stopped) {\n            observer.OnNext(v);\n        } }, (e) => {\n            if (!stopped) {\n                stopped = true;\n                observer.OnError(e);\n            }\n        }, () => {\n            if (!stopped) {\n                completed1 = true;\n                if (completed2) {\n                    stopped = true;\n                    observer.OnCompleted();\n                }\n            }\n        }));\n        const h2 = source2.Subscribe(new Observer((v) => { if (!stopped) {\n            observer.OnNext(v);\n        } }, (e) => {\n            if (!stopped) {\n                stopped = true;\n                observer.OnError(e);\n            }\n        }, () => {\n            if (!stopped) {\n                completed2 = true;\n                if (completed1) {\n                    stopped = true;\n                    observer.OnCompleted();\n                }\n            }\n        }));\n        return {\n            Dispose() {\n                h1.Dispose();\n                h2.Dispose();\n            },\n        };\n    }, source1.delegates.concat(source2.delegates));\n}\nexport function pairwise(sourceEvent) {\n    const source = sourceEvent;\n    return new Event((observer) => {\n        let last;\n        return source.Subscribe(new Observer((next) => {\n            if (last != null) {\n                observer.OnNext([last, next]);\n            }\n            last = next;\n        }, observer.OnError, observer.OnCompleted));\n    }, source.delegates);\n}\nexport function partition(predicate, sourceEvent) {\n    return [filter(predicate, sourceEvent), filter((x) => !predicate(x), sourceEvent)];\n}\nexport function scan(collector, state, sourceEvent) {\n    const source = sourceEvent;\n    return new Event((observer) => {\n        return source.Subscribe(new Observer((t) => {\n            protect(() => collector(state, t), (u) => { state = u; observer.OnNext(u); }, observer.OnError);\n        }, observer.OnError, observer.OnCompleted));\n    }, source.delegates);\n}\nexport function split(splitter, sourceEvent) {\n    return [\n        choose((v) => tryValueIfChoice1(splitter(v)), sourceEvent),\n        choose((v) => tryValueIfChoice2(splitter(v)), sourceEvent),\n    ];\n}\n//# sourceMappingURL=Event.js.map","import Event from \"./Event\";\nexport default class Timer {\n    constructor(interval) {\n        this._enabled = false;\n        this._isDisposed = false;\n        this._intervalId = 0;\n        this._timeoutId = 0;\n        this.Interval = interval && interval > 0 ? interval : 100;\n        this.AutoReset = true;\n        this._elapsed = new Event();\n    }\n    get Elapsed() {\n        return this._elapsed;\n    }\n    get Enabled() {\n        return this._enabled;\n    }\n    set Enabled(x) {\n        if (!this._isDisposed && this._enabled !== x) {\n            this._enabled = x;\n            if (this._enabled) {\n                if (this.AutoReset) {\n                    this._intervalId = setInterval(() => {\n                        if (!this.AutoReset) {\n                            this.Enabled = false;\n                        }\n                        this._elapsed.Trigger(new Date());\n                    }, this.Interval);\n                }\n                else {\n                    this._timeoutId = setTimeout(() => {\n                        this.Enabled = false;\n                        this._timeoutId = 0;\n                        if (this.AutoReset) {\n                            this.Enabled = true;\n                        }\n                        this._elapsed.Trigger(new Date());\n                    }, this.Interval);\n                }\n            }\n            else {\n                if (this._timeoutId) {\n                    clearTimeout(this._timeoutId);\n                    this._timeoutId = 0;\n                }\n                if (this._intervalId) {\n                    clearInterval(this._intervalId);\n                    this._intervalId = 0;\n                }\n            }\n        }\n    }\n    Dispose() {\n        this.Enabled = false;\n        this._isDisposed = true;\n    }\n    Close() {\n        this.Dispose();\n    }\n    Start() {\n        this.Enabled = true;\n    }\n    Stop() {\n        this.Enabled = false;\n    }\n}\n//# sourceMappingURL=Timer.js.map","namespace Elmish\n\n(**\nLog\n---------\nBasic cross-platform logging API.\n\n*)\nmodule internal Log =\n\n#if FABLE_COMPILER\n    open Fable.Core.JS\n\n    let onError (text: string, ex: exn) = console.error (text,ex)\n    let toConsole(text: string, o: #obj) = console.log(text,o)\n\n#else\n#if NETSTANDARD2_0\n    let onError (text: string, ex: exn) = System.Diagnostics.Trace.TraceError(\"{0}: {1}\", text, ex)\n    let toConsole(text: string, o: #obj) = printfn \"%s: %A\" text o\n#else\n    let onError (text: string, ex: exn) = System.Console.Error.WriteLine(\"{0}: {1}\", text, ex)\n    let toConsole(text: string, o: #obj) = printfn \"%s: %A\" text o\n#endif\n#endif\n\n#if FABLE_COMPILER\nmodule internal Timer =\n    open System.Timers\n    let delay interval callback =\n        let t = new Timer(float interval, AutoReset = false)\n        t.Elapsed.Add callback\n        t.Enabled <- true\n        t.Start()\n#endif\n","(**\nCmd\n---------\nCore abstractions for dispatching messages in Elmish.\n\n*)\n\nnamespace Elmish\n\nopen System\n\n/// Dispatch - feed new message into the processing loop\ntype Dispatch<'msg> = 'msg -> unit\n\n/// Subscription - return immediately, but may schedule dispatch of a message at any time\ntype Sub<'msg> = Dispatch<'msg> -> unit\n\n/// Cmd - container for subscriptions that may produce messages\ntype Cmd<'msg> = Sub<'msg> list\n\n/// Cmd module for creating and manipulating commands\n[<RequireQualifiedAccess>]\nmodule Cmd =\n    /// Execute the commands using the supplied dispatcher\n    let internal exec (dispatch:Dispatch<'msg>) (cmd:Cmd<'msg>) =\n        cmd |> List.iter (fun sub -> sub dispatch)\n\n    /// None - no commands, also known as `[]`\n    let none : Cmd<'msg> =\n        []\n\n    /// When emitting the message, map to another type\n    let map (f: 'a -> 'msg) (cmd: Cmd<'a>) : Cmd<'msg> =\n        cmd |> List.map (fun g -> (fun dispatch -> f >> dispatch) >> g)\n\n    /// Aggregate multiple commands\n    let batch (cmds: #seq<Cmd<'msg>>) : Cmd<'msg> =\n        cmds |> List.concat\n\n    /// Command to call the subscriber\n    let ofSub (sub: Sub<'msg>) : Cmd<'msg> =\n        [sub]\n\n    module OfFunc =\n        /// Command to evaluate a simple function and map the result\n        /// into success or error (of exception)\n        let either (task: 'a -> _) (arg: 'a) (ofSuccess: _ -> 'msg) (ofError: _ -> 'msg) : Cmd<'msg> =\n            let bind dispatch =\n                try\n                    task arg\n                    |> (ofSuccess >> dispatch)\n                with x ->\n                    x |> (ofError >> dispatch)\n            [bind]\n\n        /// Command to evaluate a simple function and map the success to a message\n        /// discarding any possible error\n        let perform (task: 'a -> _) (arg: 'a) (ofSuccess: _ -> 'msg) : Cmd<'msg> =\n            let bind dispatch =\n                try\n                    task arg\n                    |> (ofSuccess >> dispatch)\n                with x ->\n                    ()\n            [bind]\n\n        /// Command to evaluate a simple function and map the error (in case of exception)\n        let attempt (task: 'a -> unit) (arg: 'a) (ofError: _ -> 'msg) : Cmd<'msg> =\n            let bind dispatch =\n                try\n                    task arg\n                with x ->\n                    x |> (ofError >> dispatch)\n            [bind]\n\n        /// Command to issue a specific message\n        let result (msg:'msg) : Cmd<'msg> =\n            [fun dispatch -> dispatch msg]\n\n    module OfAsyncWith =\n        /// Command that will evaluate an async block and map the result\n        /// into success or error (of exception)\n        let either (start: Async<unit> -> unit) \n                   (task: 'a -> Async<_>)\n                   (arg: 'a)\n                   (ofSuccess: _ -> 'msg)\n                   (ofError: _ -> 'msg) : Cmd<'msg> =\n            let bind dispatch =\n                async {\n                    let! r = task arg |> Async.Catch\n                    dispatch (match r with\n                             | Choice1Of2 x -> ofSuccess x\n                             | Choice2Of2 x -> ofError x)\n                }\n            [bind >> start]\n\n        /// Command that will evaluate an async block and map the success\n        let perform (start: Async<unit> -> unit) \n                    (task: 'a -> Async<_>)\n                    (arg: 'a)\n                    (ofSuccess: _ -> 'msg) : Cmd<'msg> =\n            let bind dispatch =\n                async {\n                    let! r = task arg |> Async.Catch\n                    match r with\n                    | Choice1Of2 x -> dispatch (ofSuccess x)\n                    | _ -> ()\n                }\n            [bind >> start]\n\n        /// Command that will evaluate an async block and map the error (of exception)\n        let attempt (start: Async<unit> -> unit) \n                    (task: 'a -> Async<_>)\n                    (arg: 'a)\n                    (ofError: _ -> 'msg) : Cmd<'msg> =\n            let bind dispatch =\n                async {\n                    let! r = task arg |> Async.Catch\n                    match r with\n                    | Choice2Of2 x -> dispatch (ofError x)\n                    | _ -> ()\n                }\n            [bind >> start]\n\n        /// Command that will evaluate an async block to the message\n        let result (start: Async<unit> -> unit) \n                   (task: Async<'msg>) : Cmd<'msg> =\n            let bind dispatch =\n                async {\n                    let! r = task |> Async.Catch\n                    match r with\n                    | Choice1Of2 x -> dispatch x\n                    | _ -> ()\n                }\n            [bind >> start]\n\n    module OfAsync =\n#if FABLE_COMPILER\n        let start x = Timer.delay 0 (fun _ -> Async.StartImmediate x)\n#else\n        let inline start x = Async.Start x\n#endif    \n        /// Command that will evaluate an async block and map the result\n        /// into success or error (of exception)\n        let inline either (task: 'a -> Async<_>)\n                          (arg: 'a)\n                          (ofSuccess: _ -> 'msg)\n                          (ofError: _ -> 'msg) : Cmd<'msg> =\n            OfAsyncWith.either start task arg ofSuccess ofError\n\n        /// Command that will evaluate an async block and map the success\n        let inline perform (task: 'a -> Async<_>)\n                           (arg: 'a)\n                           (ofSuccess: _ -> 'msg) : Cmd<'msg> =\n            OfAsyncWith.perform start task arg ofSuccess\n\n        /// Command that will evaluate an async block and map the error (of exception)\n        let inline attempt (task: 'a -> Async<_>)\n                           (arg: 'a)\n                           (ofError: _ -> 'msg) : Cmd<'msg> =\n            OfAsyncWith.attempt start task arg ofError\n\n        /// Command that will evaluate an async block to the message\n        let inline result (task: Async<'msg>) : Cmd<'msg> =\n            OfAsyncWith.result start task\n\n    module OfAsyncImmediate =\n        /// Command that will evaluate an async block and map the result\n        /// into success or error (of exception)\n        let inline either (task: 'a -> Async<_>)\n                          (arg: 'a)\n                          (ofSuccess: _ -> 'msg)\n                          (ofError: _ -> 'msg) : Cmd<'msg> =\n            OfAsyncWith.either Async.StartImmediate task arg ofSuccess ofError\n\n        /// Command that will evaluate an async block and map the success\n        let inline perform (task: 'a -> Async<_>)\n                           (arg: 'a)\n                           (ofSuccess: _ -> 'msg) : Cmd<'msg> =\n            OfAsyncWith.perform Async.StartImmediate task arg ofSuccess\n\n        /// Command that will evaluate an async block and map the error (of exception)\n        let inline attempt (task: 'a -> Async<_>)\n                           (arg: 'a)\n                           (ofError: _ -> 'msg) : Cmd<'msg> =\n            OfAsyncWith.attempt Async.StartImmediate task arg ofError\n\n        /// Command that will evaluate an async block to the message\n        let inline result (task: Async<'msg>) : Cmd<'msg> =\n            OfAsyncWith.result Async.StartImmediate task\n\n#if FABLE_COMPILER\n    module OfPromise =\n        /// Command to call `promise` block and map the results\n        let either (task: 'a -> Fable.Core.JS.Promise<_>)\n                   (arg:'a)\n                   (ofSuccess: _ -> 'msg)\n                   (ofError: #exn -> 'msg) : Cmd<'msg> =\n            let bind dispatch =\n                (task arg)\n                    .``then``(ofSuccess >> dispatch)\n                    .catch(unbox >> ofError >> dispatch)\n                    |> ignore\n            [bind]\n\n        /// Command to call `promise` block and map the success\n        let perform (task: 'a -> Fable.Core.JS.Promise<_>)\n                   (arg:'a)\n                   (ofSuccess: _ -> 'msg) =\n            let bind dispatch =\n                (task arg)\n                    .``then``(ofSuccess >> dispatch)\n                    |> ignore\n            [bind]\n\n        /// Command to call `promise` block and map the error\n        let attempt (task: 'a -> Fable.Core.JS.Promise<_>)\n                    (arg:'a)\n                    (ofError: #exn -> 'msg) : Cmd<'msg> =\n            let bind dispatch =\n                (task arg)\n                    .catch(unbox >> ofError >> dispatch)\n                    |> ignore\n            [bind]\n\n        /// Command to dispatch the `promise` result\n        let result (task: Fable.Core.JS.Promise<'msg>) =\n            let bind dispatch =\n                task.``then`` dispatch\n                |> ignore\n            [bind]\n\n    [<Obsolete(\"Use `OfPromise.either` instead\")>]\n    let inline ofPromise (task: 'a -> Fable.Core.JS.Promise<_>)\n                         (arg:'a)\n                         (ofSuccess: _ -> 'msg)\n                         (ofError: _ -> 'msg) : Cmd<'msg> =\n        OfPromise.either task arg ofSuccess ofError                     \n#else\n    open System.Threading.Tasks\n    module OfTask =\n        /// Command to call a task and map the results\n        let inline either (task: 'a -> Task<_>)\n                          (arg:'a)\n                          (ofSuccess: _ -> 'msg)\n                          (ofError: _ -> 'msg) : Cmd<'msg> =\n            OfAsync.either (task >> Async.AwaitTask) arg ofSuccess ofError\n\n        /// Command to call a task and map the success\n        let inline perform (task: 'a -> Task<_>)\n                           (arg:'a)\n                           (ofSuccess: _ -> 'msg) : Cmd<'msg> =\n            OfAsync.perform (task >> Async.AwaitTask) arg ofSuccess\n\n        /// Command to call a task and map the error\n        let inline attempt (task: 'a -> Task<_>)\n                           (arg:'a)\n                           (ofError: _ -> 'msg) : Cmd<'msg> =\n            OfAsync.attempt (task >> Async.AwaitTask) arg ofError\n\n        /// Command and map the task success\n        let inline result (task: Task<'msg>) : Cmd<'msg> =\n            OfAsync.result (task |> Async.AwaitTask)\n\n    [<Obsolete(\"Use OfTask.either instead\")>]\n    let inline ofTask (task: 'a -> Task<_>)\n                      (arg:'a)\n                      (ofSuccess: _ -> 'msg)\n                      (ofError: _ -> 'msg) : Cmd<'msg> =\n        OfTask.either task arg ofSuccess ofError\n#endif\n\n    // Synonymous with `OfFunc.result`, may be removed in the future\n    let inline ofMsg (msg:'msg) : Cmd<'msg> =\n        OfFunc.result msg\n\n    [<Obsolete(\"Use `Cmd.OfAsync.either` instead\")>]\n    let inline ofAsync (task: 'a -> Async<_>)\n                       (arg: 'a)\n                       (ofSuccess: _ -> 'msg)\n                       (ofError: _ -> 'msg) : Cmd<'msg> =\n        OfAsync.either task arg ofSuccess ofError\n\n    [<Obsolete(\"Use `Cmd.OfFunc.either` instead\")>]\n    let inline ofFunc (task: 'a -> _) (arg: 'a) (ofSuccess: _ -> 'msg) (ofError: _ -> 'msg) : Cmd<'msg> =\n        OfFunc.either task arg ofSuccess ofError\n\n    [<Obsolete(\"Use `Cmd.OfFunc.perform` instead\")>]\n    let inline performFunc (task: 'a -> _) (arg: 'a) (ofSuccess: _ -> 'msg) : Cmd<'msg> =\n        OfFunc.perform task arg ofSuccess\n\n    [<Obsolete(\"Use `Cmd.OfFunc.attempt` instead\")>]\n    let attemptFunc (task: 'a -> unit) (arg: 'a) (ofError: _ -> 'msg) : Cmd<'msg> =\n        OfFunc.attempt task arg ofError\n\n","namespace Feliz\r\n\r\nopen Fable.Core\r\nopen Fable.Core.JsInterop\r\nopen Fable.React\r\nopen Feliz.ReactApi\r\n\r\n[<RequireQualifiedAccess>]\r\nmodule Interop =\r\n    let reactApi : IReactApi = importDefault \"react\"\r\n    let reactElement (name: string) (props: 'a) : ReactElement = import \"createElement\" \"react\"\r\n    let mkAttr (key: string) (value: obj) : IReactProperty = unbox (key, value)\r\n    let mkStyle (key: string) (value: obj) : IStyleAttribute = unbox (key, value)\r\n    let inline reactElementWithChild (name: string) (child: 'a) =\r\n        reactElement name (createObj [ \"children\" ==> [| child |] ])\r\n    let inline reactElementWithChildren (name: string) (children: #seq<ReactElement>) = \r\n        reactElement name (createObj [ \"children\" ==> reactApi.Children.toArray (unbox<ReactElement list> children) ])\r\n    let inline createElement name (properties: IReactProperty list) : ReactElement =\r\n        reactElement name (createObj !!properties)\r\n","import { defaultCancellationToken } from \"./Async\";\nimport { fromContinuations } from \"./Async\";\nimport { startImmediate } from \"./Async\";\nclass QueueCell {\n    constructor(message) {\n        this.value = message;\n    }\n}\nclass MailboxQueue {\n    add(message) {\n        const itCell = new QueueCell(message);\n        if (this.firstAndLast) {\n            this.firstAndLast[1].next = itCell;\n            this.firstAndLast = [this.firstAndLast[0], itCell];\n        }\n        else {\n            this.firstAndLast = [itCell, itCell];\n        }\n    }\n    tryGet() {\n        if (this.firstAndLast) {\n            const value = this.firstAndLast[0].value;\n            if (this.firstAndLast[0].next) {\n                this.firstAndLast = [this.firstAndLast[0].next, this.firstAndLast[1]];\n            }\n            else {\n                delete this.firstAndLast;\n            }\n            return value;\n        }\n        return void 0;\n    }\n}\nexport default class MailboxProcessor {\n    constructor(body, cancellationToken) {\n        this.body = body;\n        this.cancellationToken = cancellationToken || defaultCancellationToken;\n        this.messages = new MailboxQueue();\n    }\n}\nfunction __processEvents($this) {\n    if ($this.continuation) {\n        const value = $this.messages.tryGet();\n        if (value) {\n            const cont = $this.continuation;\n            delete $this.continuation;\n            cont(value);\n        }\n    }\n}\nexport function startInstance($this) {\n    startImmediate($this.body($this), $this.cancellationToken);\n}\nexport function receive($this) {\n    return fromContinuations((conts) => {\n        if ($this.continuation) {\n            throw new Error(\"Receive can only be called once!\");\n        }\n        $this.continuation = conts[0];\n        __processEvents($this);\n    });\n}\nexport function post($this, message) {\n    $this.messages.add(message);\n    __processEvents($this);\n}\nexport function postAndAsyncReply($this, buildMessage) {\n    let result;\n    let continuation;\n    function checkCompletion() {\n        if (result !== void 0 && continuation !== void 0) {\n            continuation(result);\n        }\n    }\n    const reply = {\n        reply: (res) => {\n            result = res;\n            checkCompletion();\n        },\n    };\n    $this.messages.add(buildMessage(reply));\n    __processEvents($this);\n    return fromContinuations((conts) => {\n        continuation = conts[0];\n        checkCompletion();\n    });\n}\nexport function start(body, cancellationToken) {\n    const mbox = new MailboxProcessor(body, cancellationToken);\n    startInstance(mbox);\n    return mbox;\n}\n//# sourceMappingURL=MailboxProcessor.js.map","import { useEffect as useEffectReact } from 'react'\r\n\r\nexport const useEffect = getDisposable => {\r\n    useEffectReact(() => {\r\n        const disposable = getDisposable()\r\n        return () => {\r\n            disposable.Dispose();\r\n        }\r\n    })\r\n}\r\n\r\nexport const useEffectWithDeps = (getDisposable, deps) => {\r\n    useEffectReact(() => {\r\n        const disposable = getDisposable()\r\n        return () => {\r\n            disposable.Dispose();\r\n        }\r\n    }, deps)\r\n}","namespace Feliz\r\n\r\nopen System\r\nopen Fable.Core\r\nopen Fable.Core.JsInterop\r\nopen Browser.Types\r\n\r\nmodule internal ReactInterop =\r\n    let useEffectWithDeps (effect:  obj) (deps: obj) : unit = import \"useEffectWithDeps\" \"./ReactInterop.js\"\r\n    let useEffect (effect: obj) : unit =  import \"useEffect\" \"./ReactInterop.js\"\r\n\r\ntype internal Internal() =\r\n    static let propsWithKey (withKey: ('props -> string) option) props =\r\n        match withKey with\r\n        | Some f ->\r\n            props?key <- f props\r\n            props\r\n        | None -> props\r\n    static member\r\n        functionComponent\r\n        (\r\n            renderElement: 'props -> ReactElement,\r\n            ?name: string,\r\n            ?withKey: 'props -> string\r\n        )\r\n        : Fable.React.FunctionComponent<'props> =\r\n            name |> Option.iter (fun name -> renderElement?displayName <- name)\r\n            fun props ->\r\n                let props = props |> propsWithKey withKey\r\n                Interop.reactApi.createElement(renderElement, props)\r\n    static member\r\n        memo\r\n        (\r\n            renderElement: 'props -> ReactElement,\r\n            ?name: string,\r\n            ?areEqual: 'props -> 'props -> bool,\r\n            ?withKey: 'props -> string\r\n        )\r\n        : Fable.React.FunctionComponent<'props> =\r\n            let memoElementType = Interop.reactApi.memo(renderElement, (defaultArg areEqual (unbox null)))\r\n            name |> Option.iter (fun name -> memoElementType?displayName <- name)\r\n            fun props ->\r\n                let props = props |> propsWithKey withKey\r\n                Interop.reactApi.createElement(memoElementType, props)\r\n\r\ntype React =\r\n    /// The `React.fragment` component lets you return multiple elements in your `render()` method without creating an additional DOM element.\r\n    static member inline fragment xs = Fable.React.Helpers.fragment [] xs\r\n    /// The `React.fragment` component lets you return multiple elements in your `render()` method without creating an additional DOM element.\r\n    static member inline keyedFragment(key: int, xs) = Fable.React.Helpers.fragment [ !!(\"key\", key) ] xs\r\n    /// The `React.fragment` component lets you return multiple elements in your `render()` method without creating an additional DOM element.\r\n    static member inline keyedFragment(key: string, xs) = Fable.React.Helpers.fragment [ !!(\"key\", key) ] xs\r\n    /// The `React.fragment` component lets you return multiple elements in your `render()` method without creating an additional DOM element.\r\n    static member inline keyedFragment(key: System.Guid, xs) = Fable.React.Helpers.fragment [ !!(\"key\", string key) ] xs\r\n    /// The `useState` hook that create a state variable for React function components.\r\n    static member useState<'t>(initial: 't) = Interop.reactApi.useState(initial)\r\n    static member useReducer(update, initialState) = Interop.reactApi.useReducer update initialState\r\n    /// The `useEffect` hook that creates a disposable effect for React function components\r\n    /// This effect has no dependencies which means the effect is re-executed on every re-render.\r\n    /// To make the effect run once (for example you subscribe once to web sockets) then provide an empty array\r\n    /// for the dependencies: `React.useEffect(disposableEffect, [| |])`.\r\n    static member useEffect(effect: unit -> IDisposable) : unit = ReactInterop.useEffect(effect)\r\n    /// The `useEffect` hook that creates a disposable effect for React function components.\r\n    /// This effect takes a array of *dependencies*.\r\n    /// Whenever any of these dependencies change, the effect is re-executed. To execute the effect only once,\r\n    /// you have to explicitly provide an empty array for the dependencies: `React.useEffect(effect, [| |])`.\r\n    static member useEffect(effect: unit -> IDisposable, dependencies: obj []) : unit = ReactInterop.useEffectWithDeps effect dependencies\r\n    /// Creates a disposable instance by providing the implementation of the dispose member\r\n    static member createDisposable(dispose: unit -> unit) =\r\n        { new IDisposable with member this.Dispose() = dispose() }\r\n\r\n    /// React hook to define and use an effect only once when a function component renders for the first time.\r\n    /// This an alias for `React.useEffect(effect, [| |])` which explicitly provide an empty array for the dependencies of the effect which means the effect will only run once.\r\n    static member useEffectOnce(effect: unit -> unit) =\r\n        React.useEffect(effect, [| |])\r\n\r\n    /// React hook to define and use a disposable effect only once when a function component renders for the first time.\r\n    /// This an alias for `React.useEffect(effect, [| |])` which explicitly provide an empty array for the dependencies of the effect which means the effect will only run once.\r\n    static member useEffectOnce(effect: unit -> IDisposable) =\r\n        React.useEffect(effect, [| |])\r\n    /// The `useEffect` hook that creates an effect for React function components.\r\n    /// This effect is executed *every time* the function component re-renders.\r\n    ///\r\n    /// To make the effect run only once, write: `React.useEffect(effect, [| |])` which explicitly states\r\n    /// that this effect has no dependencies and should only run once on initial render.\r\n    static member useEffect(effect: unit -> unit) : unit =\r\n        ReactInterop.useEffect\r\n            (fun _ ->\r\n                effect()\r\n                React.createDisposable(ignore))\r\n\r\n    /// The `useEffect` hook that creates an effect for React function components. This effect takes a array of *dependencies*.\r\n    /// Whenever any of these dependencies change, the effect is re-executed. To execute the effect only once,\r\n    /// you have to explicitly provide an empty array for the dependencies: `React.useEffect(effect, [| |])`.\r\n    static member useEffect(effect: unit -> unit, dependencies: obj []) : unit =\r\n        ReactInterop.useEffectWithDeps\r\n            (fun _ ->\r\n                effect()\r\n                React.createDisposable(ignore))\r\n            dependencies\r\n\r\n    /// <summary>\r\n    /// The `useCallback` hook. Returns a memoized callback. Pass an inline callback and an array of dependencies.\r\n    /// `useCallback` will return a memoized version of the callback that only changes if one of the dependencies has changed.\r\n    /// </summary>\r\n    /// <param name='callbackFunction'>A callback function to be memoized.</param>\r\n    /// <param name='dependencies'>An array of dependencies upon which the callback function depends.\r\n    /// If not provided, defaults to empty array, representing dependencies that never change.</param>\r\n    static member useCallback(callbackFunction: 'a -> 'b, ?dependencies: obj array) =\r\n        Interop.reactApi.useCallback callbackFunction (defaultArg dependencies [||])\r\n\r\n    /// Returns a mutable ref object whose .current property is initialized to the passed argument (initialValue). The returned object will persist for the full lifetime of the component.\r\n    ///\r\n    /// Essentially, useRef is like a container that can hold a mutable value in its .current property.\r\n    static member useRef(initialValue) = Interop.reactApi.useRef(initialValue)\r\n\r\n    /// A specialized version of React.useRef() that creates a reference to an input element.\r\n    /// \r\n    /// Useful for controlling the internal properties and methods that element, for example to enable focus().\r\n    static member useInputRef() : IRefValue<HTMLInputElement option> = React.useRef(None)\r\n\r\n    /// A specialized version of React.useRef() that creates a reference to a button element.\r\n    static member useButtonRef() : IRefValue<HTMLButtonElement option> = React.useRef(None)\r\n\r\n    /// A specialized version of React.useRef() that creates a reference to a generic HTML element.\r\n    /// \r\n    /// Useful for controlling the internal properties and methods that element, for integration with third-party libraries that require a Html element.\r\n    static member useElementRef() : IRefValue<HTMLElement option> = React.useRef(None)\r\n\r\n    /// <summary>\r\n    /// The `useMemo` hook. Returns a memoized value. Pass a \"create\" function and an array of dependencies.\r\n    /// `useMemo` will only recompute the memoized value when one of the dependencies has changed.\r\n    /// </summary>\r\n    /// <param name='createFunction'>A create function returning a value to be memoized.</param>\r\n    /// <param name='dependencies'>An array of dependencies upon which the create function depends.\r\n    /// If not provided, defaults to empty array, representing dependencies that never change.</param>\r\n    static member useMemo(createFunction: unit -> 'a, ?dependencies: obj array) =\r\n        Interop.reactApi.useMemo createFunction (defaultArg dependencies [||])\r\n\r\n    //\r\n    // React.functionComponent\r\n    //\r\n\r\n    /// <summary>\r\n    /// Creates a React function component from a function that accepts a \"props\" object and renders a result.\r\n    /// A component key can be provided in the props object, or a custom `withKey` function can be provided.\r\n    /// </summary>\r\n    /// <param name='render'>A render function that returns an element.</param>\r\n    static member functionComponent(render: 'props -> ReactElement) =\r\n        Internal.functionComponent(render)\r\n\r\n    /// <summary>\r\n    /// Creates a React function component from a function that accepts a \"props\" object and renders a result.\r\n    /// A component key can be provided in the props object, or a custom `withKey` function can be provided.\r\n    /// </summary>\r\n    /// <param name='name'>The component name to display in the React dev tools.</param>\r\n    /// <param name='render'>A render function that returns an element.</param>\r\n    static member functionComponent(name: string, render: 'props -> ReactElement) =\r\n        Internal.functionComponent(render, name)\r\n\r\n    /// <summary>\r\n    /// Creates a React function component from a function that accepts a \"props\" object and renders a result.\r\n    /// A component key can be provided in the props object, or a custom `withKey` function can be provided.\r\n    /// </summary>\r\n    /// <param name='withKey'>A function to derive a component key from the props.</param>\r\n    /// <param name='render'>A render function that returns an element.</param>\r\n    static member functionComponent(withKey: 'props -> string, render: 'props -> ReactElement) =\r\n        Internal.functionComponent(render, withKey=withKey)\r\n\r\n    /// <summary>\r\n    /// Creates a React function component from a function that accepts a \"props\" object and renders a result.\r\n    /// A component key can be provided in the props object, or a custom `withKey` function can be provided.\r\n    /// </summary>\r\n    /// <param name='name'>The component name to display in the React dev tools.</param>\r\n    /// <param name='withKey'>A function to derive a component key from the props.</param>\r\n    /// <param name='render'>A render function that returns an element.</param>\r\n    static member functionComponent(name: string, withKey: 'props -> string, render: 'props -> ReactElement) =\r\n        Internal.functionComponent(render, name, withKey=withKey)\r\n\r\n    /// <summary>\r\n    /// Creates a React function component from a function that accepts a \"props\" object and renders a result.\r\n    /// A component key can be provided in the props object, or a custom `withKey` function can be provided.\r\n    /// </summary>\r\n    /// <param name='render'>A render function that returns a list of elements.</param>\r\n    static member functionComponent(render: 'props -> #seq<ReactElement>) =\r\n        Internal.functionComponent(render >> React.fragment)\r\n\r\n    /// <summary>\r\n    /// Creates a React function component from a function that accepts a \"props\" object and renders a result.\r\n    /// A component key can be provided in the props object, or a custom `withKey` function can be provided.\r\n    /// </summary>\r\n    /// <param name='name'>The component name to display in the React dev tools.</param>\r\n    /// <param name='render'>A render function that returns a list of elements.</param>\r\n    static member functionComponent(name: string, render: 'props -> #seq<ReactElement>) =\r\n        Internal.functionComponent(render >> React.fragment, name)\r\n\r\n    /// <summary>\r\n    /// Creates a React function component from a function that accepts a \"props\" object and renders a result.\r\n    /// A component key can be provided in the props object, or a custom `withKey` function can be provided.\r\n    /// </summary>\r\n    /// <param name='withKey'>A function to derive a component key from the props.</param>\r\n    /// <param name='render'>A render function that returns a list of elements.</param>\r\n    static member functionComponent(withKey: 'props -> string, render: 'props -> #seq<ReactElement>) =\r\n        Internal.functionComponent(render >> React.fragment, withKey=withKey)\r\n\r\n    /// <summary>\r\n    /// Creates a React function component from a function that accepts a \"props\" object and renders a result.\r\n    /// A component key can be provided in the props object, or a custom `withKey` function can be provided.\r\n    /// </summary>\r\n    /// <param name='name'>The component name to display in the React dev tools.</param>\r\n    /// <param name='withKey'>A function to derive a component key from the props.</param>\r\n    /// <param name='render'>A render function that returns a list of elements.</param>\r\n    static member functionComponent(name: string, withKey: 'props -> string, render: 'props -> #seq<ReactElement>) =\r\n        Internal.functionComponent(render >> React.fragment, name, withKey=withKey)\r\n\r\n    //\r\n    // React.memo\r\n    //\r\n\r\n    /// <summary>\r\n    /// `React.memo` memoizes the result of a function component. Given the same props, React will skip rendering the component, and reuse the last rendered result.\r\n    /// By default it will only shallowly compare complex objects in the props object. For more control, a custom `areEqual` function can be provided.\r\n    /// A component key can be provided in the props object, or a custom `withKey` function can be provided.\r\n    /// </summary>\r\n    /// <param name='render'>A render function or a React.functionComponent.</param>\r\n    static member memo(render: 'props -> ReactElement) =\r\n        Internal.memo(render)\r\n\r\n    /// <summary>\r\n    /// `React.memo` memoizes the result of a function component. Given the same props, React will skip rendering the component, and reuse the last rendered result.\r\n    /// By default it will only shallowly compare complex objects in the props object. For more control, a custom `areEqual` function can be provided.\r\n    /// A component key can be provided in the props object, or a custom `withKey` function can be provided.\r\n    /// </summary>\r\n    /// <param name='name'>The component name to display in the React dev tools.</param>\r\n    /// <param name='render'>A render function or a React.functionComponent.</param>\r\n    static member memo(name: string, render: 'props -> ReactElement) =\r\n        Internal.memo(render, name)\r\n\r\n    /// <summary>\r\n    /// `React.memo` memoizes the result of a function component. Given the same props, React will skip rendering the component, and reuse the last rendered result.\r\n    /// By default it will only shallowly compare complex objects in the props object. For more control, a custom `areEqual` function can be provided.\r\n    /// A component key can be provided in the props object, or a custom `withKey` function can be provided.\r\n    /// </summary>\r\n    /// <param name='areEqual'>A custom comparison function to use instead of React's default shallow compare.</param>\r\n    /// <param name='render'>A render function or a React.functionComponent.</param>\r\n    static member memo(areEqual: 'props -> 'props -> bool, render: 'props -> ReactElement) =\r\n        Internal.memo(render, areEqual=areEqual)\r\n\r\n    /// <summary>\r\n    /// `React.memo` memoizes the result of a function component. Given the same props, React will skip rendering the component, and reuse the last rendered result.\r\n    /// By default it will only shallowly compare complex objects in the props object. For more control, a custom `areEqual` function can be provided.\r\n    /// A component key can be provided in the props object, or a custom `withKey` function can be provided.\r\n    /// </summary>\r\n    /// <param name='withKey'>A function to derive a component key from the props.</param>\r\n    /// <param name='render'>A render function or a React.functionComponent.</param>\r\n    static member memo(withKey: 'props -> string, render: 'props -> ReactElement) =\r\n        Internal.memo(render, withKey=withKey)\r\n\r\n    /// <summary>\r\n    /// `React.memo` memoizes the result of a function component. Given the same props, React will skip rendering the component, and reuse the last rendered result.\r\n    /// By default it will only shallowly compare complex objects in the props object. For more control, a custom `areEqual` function can be provided.\r\n    /// A component key can be provided in the props object, or a custom `withKey` function can be provided.\r\n    /// </summary>\r\n    /// <param name='name'>The component name to display in the React dev tools.</param>\r\n    /// <param name='areEqual'>A custom comparison function to use instead of React's default shallow compare.</param>\r\n    /// <param name='render'>A render function or a React.functionComponent.</param>\r\n    static member memo(name: string, areEqual: 'props -> 'props -> bool, render: 'props -> ReactElement) =\r\n        Internal.memo(render, name, areEqual=areEqual)\r\n\r\n    /// <summary>\r\n    /// `React.memo` memoizes the result of a function component. Given the same props, React will skip rendering the component, and reuse the last rendered result.\r\n    /// By default it will only shallowly compare complex objects in the props object. For more control, a custom `areEqual` function can be provided.\r\n    /// A component key can be provided in the props object, or a custom `withKey` function can be provided.\r\n    /// </summary>\r\n    /// <param name='name'>The component name to display in the React dev tools.</param>\r\n    /// <param name='withKey'>A function to derive a component key from the props.</param>\r\n    /// <param name='render'>A render function or a React.functionComponent.</param>\r\n    static member memo(name: string, withKey: 'props -> string, render: 'props -> ReactElement) =\r\n        Internal.memo(render, name, withKey=withKey)\r\n\r\n    /// <summary>\r\n    /// `React.memo` memoizes the result of a function component. Given the same props, React will skip rendering the component, and reuse the last rendered result.\r\n    /// By default it will only shallowly compare complex objects in the props object. For more control, a custom `areEqual` function can be provided.\r\n    /// A component key can be provided in the props object, or a custom `withKey` function can be provided.\r\n    /// </summary>\r\n    /// <param name='areEqual'>A custom comparison function to use instead of React's default shallow compare.</param>\r\n    /// <param name='withKey'>A function to derive a component key from the props.</param>\r\n    /// <param name='render'>A render function or a React.functionComponent.</param>\r\n    static member memo(areEqual: 'props -> 'props -> bool, withKey: 'props -> string, render: 'props -> ReactElement) =\r\n        Internal.memo(render, areEqual=areEqual, withKey=withKey)\r\n\r\n    /// <summary>\r\n    /// `React.memo` memoizes the result of a function component. Given the same props, React will skip rendering the component, and reuse the last rendered result.\r\n    /// By default it will only shallowly compare complex objects in the props object. For more control, a custom `areEqual` function can be provided.\r\n    /// A component key can be provided in the props object, or a custom `withKey` function can be provided.\r\n    /// </summary>\r\n    /// <param name='name'>The component name to display in the React dev tools.</param>\r\n    /// <param name='areEqual'>A custom comparison function to use instead of React's default shallow compare.</param>\r\n    /// <param name='withKey'>A function to derive a component key from the props.</param>\r\n    /// <param name='render'>A render function or a React.functionComponent.</param>\r\n    static member memo(name: string, areEqual: 'props -> 'props -> bool, withKey: 'props -> string, render: 'props -> ReactElement) =\r\n        Internal.memo(render, name, areEqual=areEqual, withKey=withKey)\r\n\r\n    /// <summary>\r\n    /// `React.memo` memoizes the result of a function component. Given the same props, React will skip rendering the component, and reuse the last rendered result.\r\n    /// By default it will only shallowly compare complex objects in the props object. For more control, a custom `areEqual` function can be provided.\r\n    /// A component key can be provided in the props object, or a custom `withKey` function can be provided.\r\n    /// </summary>\r\n    /// <param name='render'>A render function that returns a list of elements.</param>\r\n    static member memo(render: 'props -> #seq<ReactElement>) =\r\n        Internal.memo(render >> React.fragment)\r\n\r\n    /// <summary>\r\n    /// `React.memo` memoizes the result of a function component. Given the same props, React will skip rendering the component, and reuse the last rendered result.\r\n    /// By default it will only shallowly compare complex objects in the props object. For more control, a custom `areEqual` function can be provided.\r\n    /// A component key can be provided in the props object, or a custom `withKey` function can be provided.\r\n    /// </summary>\r\n    /// <param name='name'>The component name to display in the React dev tools.</param>\r\n    /// <param name='render'>A render function that returns a list of elements.</param>\r\n    static member memo(name: string, render: 'props -> #seq<ReactElement>) =\r\n        Internal.memo(render >> React.fragment, name)\r\n\r\n    /// <summary>\r\n    /// `React.memo` memoizes the result of a function component. Given the same props, React will skip rendering the component, and reuse the last rendered result.\r\n    /// By default it will only shallowly compare complex objects in the props object. For more control, a custom `areEqual` function can be provided.\r\n    /// A component key can be provided in the props object, or a custom `withKey` function can be provided.\r\n    /// </summary>\r\n    /// <param name='areEqual'>A custom comparison function to use instead of React's default shallow compare.</param>\r\n    /// <param name='render'>A render function that returns a list of elements.</param>\r\n    static member memo(areEqual: 'props -> 'props -> bool, render: 'props -> #seq<ReactElement>) =\r\n        Internal.memo(render >> React.fragment, areEqual=areEqual)\r\n\r\n    /// <summary>\r\n    /// `React.memo` memoizes the result of a function component. Given the same props, React will skip rendering the component, and reuse the last rendered result.\r\n    /// By default it will only shallowly compare complex objects in the props object. For more control, a custom `areEqual` function can be provided.\r\n    /// A component key can be provided in the props object, or a custom `withKey` function can be provided.\r\n    /// </summary>\r\n    /// <param name='withKey'>A function to derive a component key from the props.</param>\r\n    /// <param name='render'>A render function that returns a list of elements.</param>\r\n    static member memo(withKey: 'props -> string, render: 'props -> #seq<ReactElement>) =\r\n        Internal.memo(render >> React.fragment, withKey=withKey)\r\n\r\n    /// <summary>\r\n    /// `React.memo` memoizes the result of a function component. Given the same props, React will skip rendering the component, and reuse the last rendered result.\r\n    /// By default it will only shallowly compare complex objects in the props object. For more control, a custom `areEqual` function can be provided.\r\n    /// A component key can be provided in the props object, or a custom `withKey` function can be provided.\r\n    /// </summary>\r\n    /// <param name='name'>The component name to display in the React dev tools.</param>\r\n    /// <param name='areEqual'>A custom comparison function to use instead of React's default shallow compare.</param>\r\n    /// <param name='render'>A render function that returns a list of elements.</param>\r\n    static member memo(name: string, areEqual: 'props -> 'props -> bool, render: 'props -> #seq<ReactElement>) =\r\n        Internal.memo(render >> React.fragment, name, areEqual=areEqual)\r\n\r\n    /// <summary>\r\n    /// `React.memo` memoizes the result of a function component. Given the same props, React will skip rendering the component, and reuse the last rendered result.\r\n    /// By default it will only shallowly compare complex objects in the props object. For more control, a custom `areEqual` function can be provided.\r\n    /// A component key can be provided in the props object, or a custom `withKey` function can be provided.\r\n    /// </summary>\r\n    /// <param name='name'>The component name to display in the React dev tools.</param>\r\n    /// <param name='withKey'>A function to derive a component key from the props.</param>\r\n    /// <param name='render'>A render function that returns a list of elements.</param>\r\n    static member memo(name: string, withKey: 'props -> string, render: 'props -> #seq<ReactElement>) =\r\n        Internal.memo(render >> React.fragment, name, withKey=withKey)\r\n\r\n    /// <summary>\r\n    /// `React.memo` memoizes the result of a function component. Given the same props, React will skip rendering the component, and reuse the last rendered result.\r\n    /// By default it will only shallowly compare complex objects in the props object. For more control, a custom `areEqual` function can be provided.\r\n    /// A component key can be provided in the props object, or a custom `withKey` function can be provided.\r\n    /// </summary>\r\n    /// <param name='areEqual'>A custom comparison function to use instead of React's default shallow compare.</param>\r\n    /// <param name='withKey'>A function to derive a component key from the props.</param>\r\n    /// <param name='render'>A render function that returns a list of elements.</param>\r\n    static member memo(areEqual: 'props -> 'props -> bool, withKey: 'props -> string, render: 'props -> #seq<ReactElement>) =\r\n        Internal.memo(render >> React.fragment, areEqual=areEqual, withKey=withKey)\r\n\r\n    /// <summary>\r\n    /// `React.memo` memoizes the result of a function component. Given the same props, React will skip rendering the component, and reuse the last rendered result.\r\n    /// By default it will only shallowly compare complex objects in the props object. For more control, a custom `areEqual` function can be provided.\r\n    /// A component key can be provided in the props object, or a custom `withKey` function can be provided.\r\n    /// </summary>\r\n    /// <param name='name'>The component name to display in the React dev tools.</param>\r\n    /// <param name='areEqual'>A custom comparison function to use instead of React's default shallow compare.</param>\r\n    /// <param name='withKey'>A function to derive a component key from the props.</param>\r\n    /// <param name='render'>A render function that returns a list of elements.</param>\r\n    static member memo(name: string, areEqual: 'props -> 'props -> bool, withKey: 'props -> string, render: 'props -> #seq<ReactElement>) =\r\n        Internal.memo(render >> React.fragment, name, areEqual=areEqual, withKey=withKey)\r\n\r\n    //\r\n    // React.useContext\r\n    //\r\n\r\n    /// <summary>\r\n    /// Creates a Context object. When React renders a component that subscribes to this Context object\r\n    /// it will read the current context value from the closest matching Provider above it in the tree.\r\n    /// </summary>\r\n    /// <param name='name'>The component name to display in the React dev tools.</param>\r\n    /// <param name='defaultValue'>A default value that is only used when a component does not have a matching Provider above it in the tree.</param>\r\n    static member createContext<'a>(?name: string, ?defaultValue: 'a) =\r\n        let contextObject = Interop.reactApi.createContext (defaultArg defaultValue Fable.Core.JS.undefined<'a>)\r\n        name |> Option.iter (fun name -> contextObject?displayName <- name)\r\n        contextObject\r\n\r\n    /// <summary>\r\n    /// A Provider component that allows consuming components to subscribe to context changes.\r\n    /// </summary>\r\n    /// <param name='contextObject'>A context object returned from a previous React.createContext call.</param>\r\n    /// <param name='contextValue'>The context value to be provided to descendant components.</param>\r\n    /// <param name='child'>A child element.</param>\r\n    static member contextProvider(contextObject: Fable.React.IContext<'a>, contextValue: 'a, child: ReactElement) : ReactElement =\r\n        Interop.reactApi.createElement(contextObject?Provider, createObj [\"value\" ==> contextValue], [child])\r\n    /// <summary>\r\n    /// A Provider component that allows consuming components to subscribe to context changes.\r\n    /// </summary>\r\n    /// <param name='contextObject'>A context object returned from a previous React.createContext call.</param>\r\n    /// <param name='contextValue'>The context value to be provided to descendant components.</param>\r\n    /// <param name='children'>A sequence of child elements.</param>\r\n    static member contextProvider(contextObject: Fable.React.IContext<'a>, contextValue: 'a, children: #seq<ReactElement>) : ReactElement =\r\n        Interop.reactApi.createElement(contextObject?Provider, createObj [\"value\" ==> contextValue], children)\r\n\r\n    /// <summary>\r\n    /// A Consumer component that subscribes to context changes.\r\n    /// </summary>\r\n    /// <param name='contextObject'>A context object returned from a previous React.createContext call.</param>\r\n    /// <param name='render'>A render function that returns an element.</param>\r\n    static member contextConsumer(contextObject: Fable.React.IContext<'a>, render: 'a -> ReactElement) : ReactElement =\r\n        Interop.reactApi.createElement(contextObject?Consumer, null, [!!render])\r\n    /// <summary>\r\n    /// A Consumer component that subscribes to context changes.\r\n    /// </summary>\r\n    /// <param name='contextObject'>A context object returned from a previous React.createContext call.</param>\r\n    /// <param name='render'>A render function that returns a sequence of elements.</param>\r\n    static member contextConsumer(contextObject: Fable.React.IContext<'a>, render: 'a -> #seq<ReactElement>) : ReactElement =\r\n        Interop.reactApi.createElement(contextObject?Consumer, null, [!!(render >> React.fragment)])\r\n\r\n    /// <summary>\r\n    /// The `useContext` hook. Accepts a context object (the value returned from React.createContext) and returns the current context value for that context.\r\n    /// The current context value is determined by the value prop of the nearest Provider component above the calling component in the tree.\r\n    /// </summary>\r\n    /// <param name='contextObject'>A context object returned from a previous React.createContext call.</param>\r\n    static member useContext(contextObject: Fable.React.IContext<'a>) = Interop.reactApi.useContext contextObject\r\n","namespace Feliz.UseWorker\r\n\r\nopen Browser.Blob\r\nopen Browser.Dom\r\nopen Browser.Types\r\nopen Fable.Core\r\nopen Fable.Core.JsInterop\r\n\r\n[<AutoOpen>]\r\nmodule internal Internals =\r\n    let inline depsParser (deps: string []) =\r\n        match deps with\r\n        | [||] -> None\r\n        | _ ->\r\n            deps\r\n            |> String.concat \", \"\r\n            |> sprintf \"importScripts('%s'); \"\r\n            |> Some\r\n\r\n    [<Global>]\r\n    let URL : obj = jsNative\r\n    \r\n    [<Emit(\"$0.toString()\")>]\r\n    let funToString f : string = jsNative\r\n\r\n    [<Emit(\"postMessage($0)\")>]\r\n    let postMessage a = jsNative\r\n\r\n    [<Emit(\"importScripts($0)\")>]\r\n    let importScripts s = jsNative\r\n\r\n    let inline createWorkerBlobUrl umdPath depArr jobRunner =\r\n        let onMessage = \r\n            sprintf \"onmessage=(%s)(%s)\" \r\n                (funToString jobRunner) \r\n                (sprintf \"(function (args) { return %s(args) })\" umdPath)\r\n    \r\n        let blobOptions =\r\n            jsOptions<BlobPropertyBag>(fun o ->\r\n                o.``type`` <- \"text/javascript\")\r\n\r\n        match depsParser depArr with\r\n        | Some deps ->\r\n            Blob.Create([| deps :> obj; onMessage :> obj |], blobOptions)\r\n        | None -> Blob.Create([| onMessage :> obj |], blobOptions)\r\n        |> URL?createObjectURL\r\n\r\n    [<Emit(\"new Worker($0)\")>]\r\n    let newWorker blobUrl : Worker = jsNative\r\n\r\n    module Async =\r\n        let map f a =\r\n            async {\r\n                let! res = a\r\n                return f res\r\n            }\r\n\r\n    [<Emit(\"setTimeout($0, $1)\")>]\r\n    let setTimeout (f: unit -> unit) (timeout: int) : int = jsNative\r\n\r\n    [<Emit(\"clearTimeout($0)\")>]\r\n    let clearTimeout (id: int) : unit = jsNative\r\n\r\n[<AutoOpen>]\r\nmodule WebWorker =\r\n    /// The status of a web worker instance.\r\n    [<RequireQualifiedAccess>]\r\n    type WorkerStatus =\r\n        /// The worker has been initialized, but has not yet been executed.\r\n        | Pending\r\n        /// The worker has been executed correctly.\r\n        | Success\r\n        /// The worker is running.\r\n        | Running\r\n        /// The worker ended with an error.\r\n        | Error\r\n        /// The worker was killed via timeout expiration.\r\n        | TimeoutExpired\r\n        /// The worker process has been terminated.\r\n        | Killed\r\n\r\n    type private MailboxMessage<'Arg,'Result> =\r\n        | Kill\r\n        | Restart of Worker\r\n        | RunFunction of 'Arg * AsyncReplyChannel<'Result>\r\n        | SetStatus of WorkerStatus\r\n        | WorkerResult of 'Result\r\n\r\n    type private MailboxState<'T> =\r\n        { ResultReplyChannel: AsyncReplyChannel<'T> option\r\n          TimeoutId: int option\r\n          WorkerState: WorkerStatus\r\n          Worker: Worker }\r\n\r\n    [<RequireQualifiedAccess>]\r\n    type private WorkerSubscriberState =\r\n        | Status of WorkerStatus\r\n        | Kill\r\n\r\n    type WorkerSubscriberMailbox (dispatch: WorkerStatus -> unit) =\r\n        let mailbox =\r\n            MailboxProcessor.Start <| fun inbox ->\r\n                let rec loop () =\r\n                    async {\r\n                        let! msg = inbox.Receive()\r\n\r\n                        return!\r\n                            match msg with\r\n                            | WorkerSubscriberState.Status status ->\r\n                                printfn \"%A\" status\r\n                                dispatch status\r\n                                loop ()\r\n                            | WorkerSubscriberState.Kill -> async { return () }\r\n                    }\r\n\r\n                loop ()\r\n\r\n        member _.Kill () =\r\n            mailbox.Post WorkerSubscriberState.Kill\r\n\r\n        member _.PostStatus (status: WorkerStatus) =\r\n            mailbox.Post(WorkerSubscriberState.Status status)\r\n\r\n    type WorkerSubscriber =\r\n        | Elmish of WorkerSubscriberMailbox\r\n        | Hook of (WorkerStatus -> unit)\r\n\r\n        member this.Post (status: WorkerStatus) =\r\n            match this with\r\n            | Elmish mailbox -> mailbox.PostStatus status\r\n            | Hook dispatch -> dispatch status\r\n\r\n        member this.Kill () =\r\n            match this with\r\n            | Elmish mailbox -> mailbox.Kill()\r\n            | _ -> ()\r\n\r\n    type Worker<'Arg,'Result> internal (umdPath: string, deps: string [], subscriber: WorkerSubscriber, ?timeout: int) =\r\n        let createNewWorker () = \r\n            newWorker (createWorkerBlobUrl umdPath deps (fun f (e: MessageEvent) -> postMessage(f e.data)))\r\n\r\n        let applyWorkerCommands (worker: Worker) (mailbox: MailboxProcessor<_>) =\r\n            worker.onerror <- fun _ -> mailbox.Post (SetStatus WorkerStatus.Error)\r\n            worker.onmessage <- fun msg -> mailbox.Post (WorkerResult (unbox<'Result> msg.data))\r\n\r\n        let timeout = Option.defaultValue 5000 timeout\r\n        let token = new System.Threading.CancellationTokenSource()\r\n\r\n        let createMailbox (worker: Worker) =\r\n            let mailbox = \r\n                MailboxProcessor.Start(fun inbox ->\r\n                    let rec loop (state: MailboxState<'Result>) =\r\n                        async {\r\n                            let! msg = inbox.Receive()\r\n\r\n                            let clearWorkerTimeout () =\r\n                                state.TimeoutId \r\n                                |> Option.iter clearTimeout\r\n\r\n                            return!\r\n                                match msg with\r\n                                | Kill ->\r\n                                    clearWorkerTimeout()\r\n                                    state.Worker.terminate()\r\n\r\n                                    { state with \r\n                                        ResultReplyChannel = None\r\n                                        TimeoutId = None\r\n                                        WorkerState = WorkerStatus.Killed }\r\n                                | Restart worker ->\r\n                                    clearWorkerTimeout()\r\n                                    state.Worker.terminate()\r\n\r\n                                    { state with\r\n                                        ResultReplyChannel = None\r\n                                        TimeoutId = None\r\n                                        WorkerState = \r\n                                            if state.TimeoutId.IsSome then WorkerStatus.TimeoutExpired\r\n                                            else WorkerStatus.Pending\r\n                                        Worker = worker }\r\n                                | RunFunction (arg, replyChannel) ->\r\n                                    state.Worker.postMessage arg\r\n\r\n                                    { state with \r\n                                        ResultReplyChannel = Some replyChannel\r\n                                        TimeoutId = \r\n                                            setTimeout (fun () -> inbox.Post(Restart state.Worker)) timeout\r\n                                            |> Some\r\n                                        WorkerState = WorkerStatus.Running }\r\n                                | SetStatus result -> \r\n                                    clearWorkerTimeout()\r\n                                    \r\n                                    { state with \r\n                                        TimeoutId = None\r\n                                        WorkerState = result }\r\n                                | WorkerResult result ->\r\n                                    clearWorkerTimeout()\r\n\r\n                                    state.ResultReplyChannel\r\n                                    |> Option.iter (fun replyChannel -> replyChannel.Reply result)\r\n\r\n                                    { state with \r\n                                        ResultReplyChannel = None\r\n                                        TimeoutId = None\r\n                                        WorkerState = WorkerStatus.Success }\r\n                                |> fun newState ->\r\n                                    if state.WorkerState <> newState.WorkerState then\r\n                                        subscriber.Post newState.WorkerState\r\n                                    loop newState\r\n                        }\r\n\r\n                    { ResultReplyChannel = None\r\n                      TimeoutId = None\r\n                      WorkerState = WorkerStatus.Pending\r\n                      Worker = worker }\r\n                    |> loop\r\n                , cancellationToken = token.Token)\r\n        \r\n            do applyWorkerCommands worker mailbox\r\n\r\n            mailbox\r\n\r\n        let mailbox = createMailbox(createNewWorker())\r\n\r\n        interface System.IDisposable with\r\n            member _.Dispose () = \r\n                mailbox.Post Kill\r\n                token.Cancel()\r\n                token.Dispose()\r\n                subscriber.Kill()\r\n\r\n        member _.Invoke (arg: 'Arg) =\r\n            mailbox.PostAndAsyncReply(fun reply -> RunFunction(arg, reply))\r\n            \r\n        member _.Kill () =\r\n            mailbox.Post Kill\r\n\r\n        member _.Restart () =\r\n            let worker = createNewWorker()\r\n            do applyWorkerCommands worker mailbox\r\n\r\n            mailbox.Post(Restart worker)\r\n\r\n    type WorkerOptions =\r\n        { BasePath: string\r\n          ScriptName: string option\r\n          Dependencies: string list\r\n          Timeout: int option }\r\n\r\n    module internal Worker =\r\n        let defaultOptions =\r\n            { BasePath = \r\n                document.location.href.Split('#') \r\n                |> Array.tryHead\r\n                |> function\r\n                | Some url -> url.Remove(url.Length-1)\r\n                | None -> document.location.origin\r\n                |> sprintf \"%s/Workers\"\r\n              ScriptName = None\r\n              Dependencies = []\r\n              Timeout = Some 5000 }\r\n\r\n        let createDeps (umdPath: string) (options: WorkerOptions -> WorkerOptions) =\r\n            let userOptions = options defaultOptions\r\n\r\n            userOptions.ScriptName\r\n            |> Option.defaultValue (umdPath.Split('.') |> Array.head)\r\n            |> fun scriptName ->\r\n                sprintf \"%s/%s.js\"\r\n                    userOptions.BasePath\r\n                    scriptName\r\n            |> fun workerPath ->\r\n                workerPath::userOptions.Dependencies\r\n                |> Array.ofList\r\n\r\n        let create<'Args,'Result> (umdPath: string, dispatch: WorkerStatus -> unit) =\r\n            let workerSub = WorkerSubscriber.Elmish(new WorkerSubscriberMailbox(dispatch))\r\n\r\n            new Worker<'Args, 'Result>(umdPath, createDeps umdPath id, workerSub, ?timeout = defaultOptions.Timeout)\r\n        \r\n        let createWithOptions<'Args, 'Result> (umdPath: string, dispatch: WorkerStatus -> unit, options: WorkerOptions -> WorkerOptions) =\r\n            let workerSub = WorkerSubscriber.Elmish(new WorkerSubscriberMailbox(dispatch))\r\n            let userOptions = options defaultOptions\r\n\r\n            createDeps umdPath options\r\n            |> fun deps ->\r\n                new Worker<'Args, 'Result>(umdPath, deps, workerSub, ?timeout = userOptions.Timeout)\r\n\r\n        let createHookWorker<'Args, 'Result> (umdPath: string, dispatch: WorkerStatus -> unit, options: WorkerOptions -> WorkerOptions) =\r\n            let workerSub = WorkerSubscriber.Hook(dispatch)\r\n            let userOptions = options defaultOptions\r\n\r\n            createDeps umdPath options\r\n            |> fun deps ->\r\n                new Worker<'Args, 'Result>(umdPath, deps, workerSub, ?timeout = userOptions.Timeout)\r\n\r\n[<AutoOpen>]\r\nmodule Feliz =\r\n    open Feliz\r\n\r\n    type React with\r\n        static member useWorker<'Arg, 'Result> (umdPath: string, options: WorkerOptions -> WorkerOptions) =\r\n            let worker : Fable.React.IRefValue<Worker<'Arg, 'Result> option> = React.useRef(None)\r\n            let workerStatus, setWorkerStatus = React.useState(WorkerStatus.Pending)\r\n\r\n            let setWorkerStatus = \r\n                React.useCallback(setWorkerStatus)\r\n\r\n            React.useEffectOnce(fun () ->\r\n                worker.current <- Some (Worker.createHookWorker<'Arg, 'Result>(umdPath, setWorkerStatus, options))\r\n                React.createDisposable(fun () -> worker.current.Value.Kill())\r\n            )\r\n            \r\n            {| kill = fun () -> (worker.current.Value.Kill())\r\n               invoke = fun (args, callback) -> \r\n                   async {\r\n                       let! res = worker.current.Value.Invoke(args)\r\n                       do callback res\r\n                   }\r\n                   |> Async.StartImmediate\r\n               restart = fun () -> (worker.current.Value.Restart()) |}\r\n            , workerStatus\r\n        static member inline useWorker<'Arg, 'Result> (umdPath: string) =\r\n            React.useWorker<'Arg, 'Result>(umdPath, id)\r\n            \r\nnamespace Elmish\r\n\r\nopen Feliz.UseWorker\r\n\r\n[<RequireQualifiedAccess>]\r\nmodule Cmd =\r\n    type Worker =\r\n        static member create (umdPath: string) (workerMsg: Worker<_,_> -> 'Msg) (workerStatusMsg: WorkerStatus -> 'Msg) : Cmd<_> =\r\n            [ fun dispatch -> \r\n                Worker.create<'Arg,'Result>(umdPath, (workerStatusMsg >> dispatch))\r\n                |> workerMsg\r\n                |> dispatch ]\r\n\r\n        static member createWithOptions (umdPath: string) (workerMsg: Worker<_,_> -> 'Msg) (workerStatusMsg: WorkerStatus -> 'Msg) (options: WorkerOptions -> WorkerOptions) : Cmd<_> =\r\n            [ fun dispatch -> \r\n                Worker.createWithOptions<'Arg,'Result>(umdPath, (workerStatusMsg >> dispatch), options)\r\n                |> workerMsg\r\n                |> dispatch ]\r\n\r\n        static member exec (worker: Worker<'Arg,'Result> option) (arg: 'Arg) (msg: 'Result -> 'Msg) =\r\n            match worker with\r\n            | Some worker -> Cmd.OfAsyncImmediate.perform worker.Invoke arg msg\r\n            | None -> Cmd.none\r\n\r\n        static member execAll (workers: Worker<'Arg,'Result> list) (arg: 'Arg) (msg: 'Result -> 'Msg) =\r\n            workers\r\n            |> List.map (fun worker -> Cmd.OfAsyncImmediate.perform worker.Invoke arg msg)\r\n            |> Cmd.batch\r\n\r\n        static member kill (worker: Worker<'Arg,'Result> option) : Cmd<_> =\r\n            match worker with\r\n            | Some worker -> [ fun _ -> worker.Kill() ]\r\n            | None -> Cmd.none\r\n\r\n        static member restart (worker: Worker<'Arg,'Result> option) : Cmd<_> =\r\n            match worker with\r\n            | Some worker -> [ fun _ -> worker.Restart() ]\r\n            | None -> Cmd.none\r\n","﻿[<RequireQualifiedAccess>]\r\nmodule FPSStats\r\n\r\nopen Browser.Dom\r\nopen Elmish\r\nopen Feliz\r\nopen System\r\n\r\ntype State =\r\n    { Frames: float\r\n      StartTime: DateTime\r\n      PrevTime: DateTime\r\n      Fps: int }\r\n\r\nlet render = React.functionComponent(fun () ->\r\n    let afRequest = React.useRef 0.\r\n    let state,setState = React.useState { Frames = 0.; StartTime = DateTime.Now; PrevTime = DateTime.Now; Fps = 0 }\r\n    let calcFPS () =\r\n        let currentTime = DateTime.Now\r\n        \r\n        if currentTime > (state.PrevTime.AddSeconds(1.)) then\r\n            (state.Frames + 1.) / (currentTime - state.PrevTime).TotalSeconds\r\n            |> Some\r\n        else None\r\n        |> function\r\n        | Some fps -> \r\n            { state with \r\n                Fps = (int fps)\r\n                Frames = 0.\r\n                PrevTime = currentTime }\r\n            |> setState\r\n        | None -> setState { state with Frames = state.Frames + 1. }\r\n    \r\n    React.useEffect(fun () -> \r\n        afRequest.current <- (window.requestAnimationFrame (fun _ -> calcFPS())))\r\n    \r\n    React.useEffectOnce(fun () -> \r\n        React.createDisposable (fun () -> window.cancelAnimationFrame afRequest.current)\r\n    )\r\n    \r\n    Html.div [\r\n        prop.text (sprintf \"%A\" state.Fps)\r\n    ])\r\n\r\n","// tslint:disable:max-line-length\nimport { fromNumber, op_Division, op_Multiply, toNumber } from \"./Long\";\nimport { comparePrimitives, padLeftAndRightWithZeros, padWithZeros } from \"./Util\";\n// TimeSpan in runtime just becomes a number representing milliseconds\n/**\n * Calls:\n * - `Math.ceil` if the `value` is **negative**\n * - `Math.floor` if the `value` is **positive**\n * @param value Value to round\n */\nfunction signedRound(value) {\n    return value < 0 ? Math.ceil(value) : Math.floor(value);\n}\nexport function create(d = 0, h = 0, m = 0, s = 0, ms = 0) {\n    switch (arguments.length) {\n        case 1:\n            // ticks\n            return fromTicks(arguments[0]);\n        case 3:\n            // h,m,s\n            d = 0, h = arguments[0], m = arguments[1], s = arguments[2], ms = 0;\n            break;\n        default:\n            // d,h,m,s,ms\n            break;\n    }\n    return d * 86400000 + h * 3600000 + m * 60000 + s * 1000 + ms;\n}\nexport function fromTicks(ticks) {\n    return toNumber(op_Division(ticks, 10000));\n}\nexport function fromDays(d) {\n    return create(d, 0, 0, 0);\n}\nexport function fromHours(h) {\n    return create(h, 0, 0);\n}\nexport function fromMinutes(m) {\n    return create(0, m, 0);\n}\nexport function fromSeconds(s) {\n    return create(0, 0, s);\n}\nexport function days(ts) {\n    return signedRound(ts / 86400000);\n}\nexport function hours(ts) {\n    return signedRound(ts % 86400000 / 3600000);\n}\nexport function minutes(ts) {\n    return signedRound(ts % 3600000 / 60000);\n}\nexport function seconds(ts) {\n    return signedRound(ts % 60000 / 1000);\n}\nexport function milliseconds(ts) {\n    return signedRound(ts % 1000);\n}\nexport function ticks(ts) {\n    return op_Multiply(fromNumber(ts), 10000);\n}\nexport function totalDays(ts) {\n    return ts / 86400000;\n}\nexport function totalHours(ts) {\n    return ts / 3600000;\n}\nexport function totalMinutes(ts) {\n    return ts / 60000;\n}\nexport function totalSeconds(ts) {\n    return ts / 1000;\n}\nexport function negate(ts) {\n    return ts * -1;\n}\nexport function add(ts1, ts2) {\n    return ts1 + ts2;\n}\nexport function subtract(ts1, ts2) {\n    return ts1 - ts2;\n}\nexport const op_Addition = add;\nexport const op_Subtraction = subtract;\nexport const compare = comparePrimitives;\nexport const compareTo = comparePrimitives;\nexport function duration(x) {\n    return Math.abs(x);\n}\nexport function toString(ts, format = \"c\", _provider) {\n    if ([\"c\", \"g\", \"G\"].indexOf(format) === -1) {\n        throw new Error(\"Custom formats are not supported\");\n    }\n    const d = Math.abs(days(ts));\n    const h = Math.abs(hours(ts));\n    const m = Math.abs(minutes(ts));\n    const s = Math.abs(seconds(ts));\n    const ms = Math.abs(milliseconds(ts));\n    const sign = ts < 0 ? \"-\" : \"\";\n    return `${sign}${d === 0 && (format === \"c\" || format === \"g\") ? \"\" : format === \"c\" ? d + \".\" : d + \":\"}${format === \"g\" ? h : padWithZeros(h, 2)}:${padWithZeros(m, 2)}:${padWithZeros(s, 2)}${ms === 0 && (format === \"c\" || format === \"g\") ? \"\" : format === \"g\" ? \".\" + padWithZeros(ms, 3) : \".\" + padLeftAndRightWithZeros(ms, 3, 7)}`;\n}\nexport function parse(str) {\n    const firstDot = str.search(\"\\\\.\");\n    const firstColon = str.search(\"\\\\:\");\n    if (firstDot === -1 && firstColon === -1) { // There is only a day ex: 4\n        const d = parseInt(str, 0);\n        if (isNaN(d)) {\n            throw new Error(`String '${str}' was not recognized as a valid TimeSpan.`);\n        }\n        else {\n            return create(d, 0, 0, 0, 0);\n        }\n    }\n    if (firstColon > 0) { // process time part\n        // WIP: (-?)(((\\d+)\\.)?([0-9]|0[0-9]|1[0-9]|2[0-3]):(\\d+)(:\\d+(\\.\\d{1,7})?)?|\\d+(?:(?!\\.)))\n        const r = /^(-?)((\\d+)\\.)?(?:0*)([0-9]|0[0-9]|1[0-9]|2[0-3]):(?:0*)([0-5][0-9]|[0-9])(:(?:0*)([0-5][0-9]|[0-9]))?\\.?(\\d+)?$/.exec(str);\n        if (r != null && r[4] != null && r[5] != null) {\n            let d = 0;\n            let ms = 0;\n            let s = 0;\n            const sign = r[1] != null && r[1] === \"-\" ? -1 : 1;\n            const h = +r[4];\n            const m = +r[5];\n            if (r[3] != null) {\n                d = +r[3];\n            }\n            if (r[7] != null) {\n                s = +r[7];\n            }\n            if (r[8] != null) {\n                // Depending on the number of decimals passed, we need to adapt the numbers\n                switch (r[8].length) {\n                    case 1:\n                        ms = +r[8] * 100;\n                        break;\n                    case 2:\n                        ms = +r[8] * 10;\n                        break;\n                    case 3:\n                        ms = +r[8];\n                        break;\n                    case 4:\n                        ms = +r[8] / 10;\n                        break;\n                    case 5:\n                        ms = +r[8] / 100;\n                        break;\n                    case 6:\n                        ms = +r[8] / 1000;\n                        break;\n                    case 7:\n                        ms = +r[8] / 10000;\n                        break;\n                    default:\n                        throw new Error(`String '${str}' was not recognized as a valid TimeSpan.`);\n                }\n            }\n            return sign * create(d, h, m, s, ms);\n        }\n    }\n    throw new Error(`String '${str}' was not recognized as a valid TimeSpan.`);\n}\nexport function tryParse(v, _refValue) {\n    try {\n        return [true, parse(v)];\n    }\n    catch (_err) {\n        return [false, 0];\n    }\n}\n//# sourceMappingURL=TimeSpan.js.map","﻿[<RequireQualifiedAccess>]\nmodule Samples.Basic\n\nopen Elmish\nopen Feliz\nopen Feliz.UseWorker\nopen Zanaptak.TypedCssClasses\n\ntype Bulma = CssClasses<\"https://cdnjs.cloudflare.com/ajax/libs/bulma/0.7.5/css/bulma.min.css\", Naming.PascalCase>\ntype FA = CssClasses<\"https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css\", Naming.PascalCase>\n\nlet rng = System.Random()\n\nlet sortNumbers () =\n    Array.init 5000000 (fun _ -> rng.NextDouble() * 1000000.)\n    |> Array.sort\n    |> Array.sum\n    |> int\n\nlet render = React.functionComponent(fun () ->\n    let worker,workerStatus = React.useWorker<unit, int>(\"Sort.sortNumbers\")\n    let count,setCount = React.useState 0\n\n    Html.div [\n        prop.className Bulma.Control\n        prop.style [\n            style.paddingLeft (length.em 8)\n            style.paddingBottom (length.em 1)\n        ]\n        prop.children [\n            Html.div [\n                prop.style [ style.maxWidth (length.em 15); style.paddingBottom (length.em 2) ]\n                prop.children [\n                    Html.div [\n                        prop.style [\n                            style.textAlign.center\n                            style.marginLeft length.auto\n                            style.marginRight length.auto\n                            style.marginTop 50\n                            style.paddingBottom (length.em 2)\n                        ]\n                        prop.children [ FPSStats.render() ]\n                    ]\n                    Html.div [\n                        prop.classes [ Bulma.Box ]\n                        prop.children [\n                            Html.div [\n                                prop.text (sprintf \"Worker Status: %s\" (workerStatus.ToString()))\n                            ]\n                            Html.div [\n                                prop.text (sprintf \"Count: %i\" count)\n                            ]\n                        ]\n                    ]\n                ]\n            ]\n            Html.button [\n                prop.classes [ Bulma.Button; Bulma.HasBackgroundPrimary; Bulma.HasTextWhite ]\n                prop.disabled (match workerStatus with | WorkerStatus.Running | WorkerStatus.Killed -> true | _ -> false)\n                prop.onClick <| fun _ -> worker.invoke((), setCount) \n                prop.text \"Execute\"\n            ]\n            Html.button [\n                prop.classes [ Bulma.Button; Bulma.HasBackgroundPrimary; Bulma.HasTextWhite ]\n                prop.disabled (match workerStatus with | WorkerStatus.Killed -> true | _ -> false)\n                prop.onClick <| fun _ -> worker.kill()\n                prop.text \"Kill\"\n            ]\n            Html.button [\n                prop.classes [ Bulma.Button; Bulma.HasBackgroundPrimary; Bulma.HasTextWhite ]\n                prop.onClick <| fun _ -> worker.restart()\n                prop.text \"Restart\"\n            ]\n            Html.button [\n                prop.classes [ Bulma.Button; Bulma.HasBackgroundPrimary; Bulma.HasTextWhite ]\n                prop.onClick <| fun _ -> (sortNumbers() |> setCount)\n                prop.text \"Execute - Non worker\"\n            ]\n        ]\n    ])\n","namespace Feliz.ElmishComponents\r\n\r\nopen Feliz\r\nopen Elmish\r\nopen System\r\nopen Fable.Core\r\n\r\ntype ElmishComponentProps<'State, 'Msg> = {\r\n    Initial : 'State * Cmd<'Msg>\r\n    Update : 'Msg -> 'State -> 'State * Cmd<'Msg>\r\n    Render : 'State -> ('Msg -> unit) -> ReactElement\r\n    key : string\r\n}\r\n\r\n/// A React component that implements an internal Elmish dispatch loop using the program parts of `init`, `update` and `render`.\r\ntype ElmishComponent<'State, 'Msg>(props: ElmishComponentProps<'State, 'Msg>) as this =\r\n    inherit Fable.React.Component<ElmishComponentProps<'State, 'Msg>, 'State>(props)\r\n    let mutable mounted = false\r\n\r\n    do\r\n        let initialState = fst this.props.Initial\r\n        this.setInitState(initialState)\r\n\r\n    override this.componentDidMount() =\r\n        mounted <- true\r\n        let initialEffect = snd this.props.Initial\r\n        for subscriber in initialEffect do\r\n            JS.setTimeout (fun _ -> subscriber(this.dispatch)) 0 |> ignore\r\n\r\n    override this.componentDidUpdate(prevProps, prevState) =\r\n        // if props changed reference, re-execute `init` from the program definition\r\n        if not (System.Object.ReferenceEquals(prevProps, this.props)) then\r\n            let initialEffect = snd this.props.Initial\r\n            for subscriber in initialEffect do\r\n                JS.setTimeout (fun _ -> subscriber(this.dispatch)) 0 |> ignore\r\n\r\n    override this.componentWillUnmount() =\r\n        mounted <- false\r\n\r\n    member this.dispatch(msg: 'Msg) =\r\n        let (nextState, nextEffect) = this.props.Update msg this.state\r\n        if mounted then this.setState(fun _ _ -> nextState)\r\n        for subscriber in nextEffect do\r\n            JS.setTimeout (fun _ -> subscriber(this.dispatch)) 0 |> ignore\r\n\r\n    override this.render() =\r\n        this.props.Render this.state this.dispatch\r\n\r\n[<AutoOpen>]\r\nmodule ElmishComponentExtensions =\r\n\r\n    type React with\r\n        /// Creates a standalone React component using an Elmish dispatch loop\r\n        static member inline elmishComponent(name, init, update, render, ?key) =\r\n            let fullKey =\r\n                match key with\r\n                | None -> name\r\n                | Some key -> name + \"-\" + key\r\n            Fable.React.Helpers.ofType<ElmishComponent<_, _>, _, _>\r\n                { Initial = init; Update = update; Render = render; key = fullKey }\r\n                [ ]\r\n\r\n        /// Creates a standalone React component using an Elmish dispatch loop\r\n        static member inline elmishComponent(name, init, update, render, ?key) =\r\n            let fullKey =\r\n                match key with\r\n                | None -> name\r\n                | Some key -> name + \"-\" + key\r\n            Fable.React.Helpers.ofType<ElmishComponent<_, _>, _, _>\r\n                { Initial = init, Cmd.none; Update = update; Render = render; key = fullKey }\r\n                [ ]\r\n\r\n        /// Creates a standalone React component using an Elmish dispatch loop\r\n        static member inline elmishComponent(name, init, update, render, ?key) =\r\n            let fullKey =\r\n                match key with\r\n                | None -> name\r\n                | Some key -> name + \"-\" + key\r\n            Fable.React.Helpers.ofType<ElmishComponent<_, _>, _, _>\r\n                { Initial = init, Cmd.none;\r\n                  Update = fun msg state -> update msg state, Cmd.none;\r\n                  Render = render\r\n                  key = fullKey }\r\n                [ ]\r\n\r\n        /// Creates a standalone React component using an Elmish dispatch loop\r\n        static member inline elmishComponent(name, init, update, render, ?key) =\r\n            let fullKey =\r\n                match key with\r\n                | None -> name\r\n                | Some key -> name + \"-\" + key\r\n            Fable.React.Helpers.ofType<ElmishComponent<_, _>, _, _>\r\n                { Initial = init;\r\n                  Update = fun msg state -> update msg state, Cmd.none;\r\n                  Render = render\r\n                  key = fullKey }\r\n                [ ]","﻿[<RequireQualifiedAccess>]\r\nmodule Samples.Elmish\r\n\r\nopen Elmish\r\nopen Feliz\r\nopen Feliz.UseWorker\r\nopen Feliz.ElmishComponents\r\nopen Zanaptak.TypedCssClasses\r\n\r\ntype Bulma = CssClasses<\"https://cdnjs.cloudflare.com/ajax/libs/bulma/0.7.5/css/bulma.min.css\", Naming.PascalCase>\r\ntype FA = CssClasses<\"https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css\", Naming.PascalCase>\r\n\r\ntype State =\r\n    { Count: int \r\n      Worker: Worker<unit,int> option\r\n      WorkerState: WorkerStatus }\r\n\r\ntype Msg =\r\n    | ChangeWorkerState of WorkerStatus\r\n    | ExecuteWorker\r\n    | KillWorker\r\n    | RestartWorker\r\n    | SetCount of int\r\n    | SetWorker of Worker<unit,int>\r\n    | WorkerResult of int\r\n\r\nlet init : State * Cmd<Msg> = \r\n    { Count = 0\r\n      Worker = None\r\n      WorkerState = WorkerStatus.Pending }, \r\n    Cmd.Worker.create \"Sort.sortNumbers\" SetWorker ChangeWorkerState\r\n\r\nlet update (msg: Msg) (state: State) : State * Cmd<Msg> =\r\n    match msg with\r\n    | ChangeWorkerState workerState ->\r\n        { state with WorkerState = workerState }, Cmd.none\r\n    | ExecuteWorker ->\r\n        state, Cmd.Worker.exec state.Worker () WorkerResult\r\n    | KillWorker ->\r\n        state, Cmd.Worker.kill state.Worker\r\n    | RestartWorker ->\r\n        state, Cmd.Worker.restart state.Worker\r\n    | SetCount i ->\r\n        { state with Count = i }, Cmd.none\r\n    | SetWorker worker ->\r\n        { state with Worker = Some worker }, Cmd.none\r\n    | WorkerResult i ->\r\n        { state with Count = i }, Cmd.none\r\n\r\nlet rng = System.Random()\r\n\r\nlet sortNumbers () =\r\n    Array.init 5000000 (fun _ -> rng.NextDouble() * 1000000.)\r\n    |> Array.sort\r\n    |> Array.sum\r\n    |> int\r\n\r\nlet render' state dispatch =\r\n    Html.div [\r\n        prop.className Bulma.Control\r\n        prop.style [\r\n            style.paddingLeft (length.em 8)\r\n            style.paddingBottom (length.em 1)\r\n        ]\r\n        prop.children [\r\n            Html.div [\r\n                prop.style [ style.maxWidth (length.em 15); style.paddingBottom (length.em 2) ]\r\n                prop.children [\r\n                    Html.div [\r\n                        prop.style [\r\n                            style.textAlign.center\r\n                            style.marginLeft length.auto\r\n                            style.marginRight length.auto\r\n                            style.marginTop 50\r\n                            style.paddingBottom (length.em 2)\r\n                        ]\r\n                        prop.children [ FPSStats.render() ]\r\n                    ]\r\n                    Html.div [\r\n                        prop.classes [ Bulma.Box ]\r\n                        prop.children [\r\n                            Html.div [\r\n                                prop.text (sprintf \"Worker Status: %s\" (state.WorkerState.ToString()))\r\n                            ]\r\n                            Html.div [\r\n                                prop.text (sprintf \"Count: %i\" state.Count)\r\n                            ]\r\n                        ]\r\n                    ]\r\n                ]\r\n            ]\r\n            Html.button [\r\n                prop.classes [ Bulma.Button; Bulma.HasBackgroundPrimary; Bulma.HasTextWhite ]\r\n                prop.disabled (match state.WorkerState with | WorkerStatus.Running | WorkerStatus.Killed -> true | _ -> false)\r\n                prop.onClick <| fun _ -> dispatch ExecuteWorker\r\n                prop.text \"Execute function!\"\r\n            ]\r\n            Html.button [\r\n                prop.classes [ Bulma.Button; Bulma.HasBackgroundPrimary; Bulma.HasTextWhite ]\r\n                prop.disabled (match state.WorkerState with | WorkerStatus.Killed -> true | _ -> false)\r\n                prop.onClick <| fun _ -> dispatch KillWorker\r\n                prop.text \"Kill\"\r\n            ]\r\n            Html.button [\r\n                prop.classes [ Bulma.Button; Bulma.HasBackgroundPrimary; Bulma.HasTextWhite ]\r\n                prop.onClick <| fun _ -> dispatch RestartWorker\r\n                prop.text \"Restart\"\r\n            ]\r\n            Html.button [\r\n                prop.classes [ Bulma.Button; Bulma.HasBackgroundPrimary; Bulma.HasTextWhite ]\r\n                prop.onClick <| fun _ -> (sortNumbers() |> SetCount |> dispatch)\r\n                prop.text \"Execute - Non worker\"\r\n            ]\r\n        ]\r\n    ]\r\n    \r\n\r\nlet render () = React.elmishComponent(\"Counter\", init, update, render')","namespace Fable.SimpleHttp\r\n\r\nopen System\r\nopen Browser\r\nopen Browser.Types\r\nopen Fable.Core\r\n\r\n#if !FABLE_COMPILER\r\nopen System.Net.Http\r\n#endif\r\n\r\nmodule Blob =\r\n    /// Creates a Blob from the given input string\r\n    [<Emit(\"new Blob([$0], { 'type':'text/plain' })\")>]\r\n    let fromText (value: string) : Blob = jsNative\r\n\r\n\r\nmodule File =\r\n    /// Creates a File from the given input string and file name\r\n    [<Emit(\"new File([$0], $1, { 'type':'text/plain' })\")>]\r\n    let fromText (value: string) (fileName: string) : File = jsNative\r\n\r\n\r\n/// Utility functions to work with blob and file APIs.\r\nmodule FileReader =\r\n    /// Asynchronously reads the blob data content as string\r\n    let readBlobAsText (blob: Blob) : Async<string> =\r\n        Async.FromContinuations <| fun (resolve, _, _) ->\r\n            let reader = FileReader.Create()\r\n            reader.onload <- fun _ ->\r\n                if reader.readyState = FileReaderState.DONE\r\n                then resolve (unbox reader.result)\r\n\r\n            reader.readAsText(blob)\r\n\r\n    /// Asynchronously reads the blob data content as string\r\n    let readFileAsText (file: File) : Async<string> =\r\n        Async.FromContinuations <| fun (resolve, _, _) ->\r\n            let reader = FileReader.Create()\r\n            reader.onload <- fun _ ->\r\n                if reader.readyState = FileReaderState.DONE\r\n                then resolve (unbox reader.result)\r\n\r\n            reader.readAsText(file)\r\n\r\nmodule FormData =\r\n\r\n    [<Emit(\"new FormData()\")>]\r\n    /// Creates a new FormData object\r\n    let create() : FormData = jsNative\r\n\r\n    /// Appends a key-value pair to the form data\r\n    let append (key:string) (value:string) (form : FormData) : FormData =\r\n        form.append(key, value)\r\n        form\r\n\r\n    /// Appends a file to the form data\r\n    let appendFile (key: string) (file: File) (form: FormData) : FormData =\r\n        form.append (key, file)\r\n        form\r\n\r\n    /// Appends a named file to the form data\r\n    let appendNamedFile (key: string) (fileName: string) (file: File) (form: FormData) : FormData =\r\n        form.append (key, file, fileName)\r\n        form\r\n\r\n    /// Appends a blog to the form data\r\n    let appendBlob (key: string) (blob: Blob) (form: FormData) : FormData =\r\n        form.append (key, blob)\r\n        form\r\n\r\n    /// Appends a blog to the form data\r\n    let appendNamedBlob (key: string) (fileName: string) (blob: Blob) (form: FormData) : FormData =\r\n        form.append (key, blob, fileName)\r\n        form\r\n\r\nmodule Headers =\r\n    let contentType value = Header(\"Content-Type\", value)\r\n    let accept value = Header(\"Accept\", value)\r\n    let acceptCharset value = Header(\"Accept-Charset\", value)\r\n    let acceptEncoding value = Header(\"Accept-Encoding\", value)\r\n    let acceptLanguage value = Header(\"Accept-Language\", value)\r\n    let acceptDateTime value = Header(\"Accept-Datetime\", value)\r\n    let authorization value = Header(\"Authorization\", value)\r\n    let cacheControl value = Header(\"Cache-Control\", value)\r\n    let connection value = Header(\"Connection\", value)\r\n    let cookie value = Header(\"Cookie\", value)\r\n    let contentMD5 value = Header(\"Content-MD5\", value)\r\n    let date value = Header(\"Date\", value)\r\n    let expect value = Header(\"Expect\", value)\r\n    let ifMatch value = Header(\"If-Match\", value)\r\n    let ifModifiedSince value = Header(\"If-Modified-Since\", value)\r\n    let ifNoneMatch value = Header(\"If-None-Match\", value)\r\n    let ifRange value = Header(\"If-Range\", value)\r\n    let IfUnmodifiedSince value = Header(\"If-Unmodified-Since\", value)\r\n    let maxForwards value = Header(\"Max-Forwards\", value)\r\n    let origin value = Header (\"Origin\", value)\r\n    let pragma value = Header(\"Pragma\", value)\r\n    let proxyAuthorization value = Header(\"Proxy-Authorization\", value)\r\n    let range value = Header(\"Range\", value)\r\n    let referer value = Header(\"Referer\", value)\r\n    let userAgent value = Header(\"User-Agent\", value)\r\n    let create key value = Header(key, value)\r\n\r\nmodule Http =\r\n\r\n    let private defaultRequest =\r\n        { url = \"\";\r\n          method = HttpMethod.GET\r\n          headers = []\r\n          withCredentials = false\r\n          overridenMimeType = None\r\n          overridenResponseType = None\r\n          content = BodyContent.Empty }\r\n\r\n    let private emptyResponse =\r\n        { statusCode = 0\r\n          responseText = \"\"\r\n          responseType = \"\"\r\n          responseHeaders = Map.empty\r\n          content = ResponseContent.Text \"\" }\r\n\r\n    let private splitAt (delimiter: string) (input: string) : string [] =\r\n        if String.IsNullOrEmpty input then [| input |]\r\n        else input.Split([| delimiter |], StringSplitOptions.None)\r\n\r\n    let private serializeMethod = function\r\n        | HttpMethod.GET -> \"GET\"\r\n        | HttpMethod.POST -> \"POST\"\r\n        | HttpMethod.PATCH -> \"PATCH\"\r\n        | HttpMethod.PUT -> \"PUT\"\r\n        | HttpMethod.DELETE -> \"DELETE\"\r\n        | HttpMethod.OPTIONS -> \"OPTIONS\"\r\n        | HttpMethod.HEAD -> \"HEAD\"\r\n\r\n    /// Starts the configuration of the request with the specified url\r\n    let request (url: string) : HttpRequest =\r\n        { defaultRequest with url = url }\r\n\r\n    /// Sets the Http method of the request\r\n    let method httpVerb (req: HttpRequest) =\r\n        { req with method = httpVerb }\r\n\r\n    /// Appends a header to the request configuration\r\n    let header (singleHeader: Header) (req: HttpRequest) =\r\n        { req with headers = List.append req.headers [singleHeader] }\r\n\r\n    /// Appends a list of headers to the request configuration\r\n    let headers (values: Header list) (req: HttpRequest)  =\r\n        { req with headers = List.append req.headers values }\r\n\r\n    /// Enables cross-site credentials such as cookies\r\n    let withCredentials (enabled: bool) (req: HttpRequest) =\r\n        { req with withCredentials = enabled }\r\n\r\n    /// Specifies a MIME type other than the one provided by the server to be used instead when interpreting the data being transferred in a request. This may be used, for example, to force a stream to be treated and parsed as \"text/xml\", even if the server does not report it as such.\r\n    let overrideMimeType (value: string) (req: HttpRequest) =\r\n        { req with overridenMimeType = Some value }\r\n\r\n    /// Change the expected response type from the server\r\n    let overrideResponseType (value: ResponseTypes) (req: HttpRequest) =\r\n        { req with overridenResponseType = Some value }\r\n\r\n    /// Sets the body content of the request\r\n    let content (bodyContent: BodyContent) (req: HttpRequest) : HttpRequest =\r\n        { req with content = bodyContent }\r\n\r\n    /// Sends the request to the server, this function does not throw\r\n    let send (req: HttpRequest) : Async<HttpResponse> =\r\n#if FABLE_COMPILER\r\n        Async.FromContinuations <| fun (resolve, reject, _) ->\r\n            let xhr = XMLHttpRequest.Create()\r\n            xhr.``open``(serializeMethod req.method, req.url)\r\n            xhr.onreadystatechange <- fun _ ->\r\n                if xhr.readyState = ReadyState.Done\r\n                then resolve {\r\n                    responseText =\r\n                        match xhr.responseType with\r\n                        | \"\" -> xhr.responseText\r\n                        | \"text\" -> xhr.responseText\r\n                        | _ -> \"\"\r\n\r\n                    statusCode = int xhr.status\r\n                    responseType = xhr.responseType\r\n                    content =\r\n                        match xhr.responseType with\r\n                        | (\"\" | \"text\") -> ResponseContent.Text xhr.responseText\r\n                        | \"arraybuffer\" -> ResponseContent.ArrayBuffer (unbox xhr.response)\r\n                        | \"blob\" -> ResponseContent.Blob (unbox xhr.response)\r\n                        | _ -> ResponseContent.Unknown xhr.response\r\n\r\n                    responseHeaders =\r\n                        xhr.getAllResponseHeaders()\r\n                        |> splitAt \"\\r\\n\"\r\n                        |> Array.choose (fun headerLine ->\r\n                            let parts = splitAt \":\" headerLine\r\n                            match List.ofArray parts with\r\n                            | key :: rest ->  Some (key.ToLower(), (String.concat \":\" rest).Trim())\r\n                            | otherwise -> None)\r\n                        |> Map.ofArray\r\n                }\r\n\r\n            for (Header(key, value)) in req.headers do\r\n                xhr.setRequestHeader(key, value)\r\n\r\n            xhr.withCredentials <- req.withCredentials\r\n\r\n            match req.overridenMimeType with\r\n            | Some mimeType -> xhr.overrideMimeType(mimeType)\r\n            | None -> ()\r\n\r\n            match req.overridenResponseType with\r\n            | Some ResponseTypes.Text -> xhr.responseType <- \"text\"\r\n            | Some ResponseTypes.Blob -> xhr.responseType <- \"blob\"\r\n            | Some ResponseTypes.ArrayBuffer -> xhr.responseType <- \"arraybuffer\"\r\n            | None -> ()\r\n\r\n            match req.method, req.content with\r\n            | GET, _ -> xhr.send(None)\r\n            | _, BodyContent.Empty -> xhr.send(None)\r\n            | _, BodyContent.Text value -> xhr.send(value)\r\n            | _, BodyContent.Form formData -> xhr.send(formData)\r\n            | _, BodyContent.Binary blob -> xhr.send(blob)\r\n            | _, BodyContent.RawFile file -> xhr.send(file)\r\n#else\r\n        async {\r\n            try\r\n                use requestMessage = new HttpRequestMessage()\r\n                requestMessage.RequestUri <- Uri(req.url)\r\n                requestMessage.Method <-\r\n                    match req.method with\r\n                    | HttpMethod.GET     -> HttpMethod.Get\r\n                    | HttpMethod.POST    -> HttpMethod.Post\r\n                    | HttpMethod.PUT     -> HttpMethod.Put\r\n                    | HttpMethod.PATCH   -> HttpMethod \"PATCH\"\r\n                    | HttpMethod.DELETE  -> HttpMethod.Delete\r\n                    | HttpMethod.HEAD    -> HttpMethod.Head\r\n                    | HttpMethod.OPTIONS -> HttpMethod.Options\r\n                req.headers\r\n                |> Seq.iter (fun (Header (key, value)) ->\r\n                    requestMessage.Headers.Add(key, value))\r\n                use content =\r\n                    match req.content with\r\n                    | BodyContent.Text text -> new StringContent(text)\r\n                    | BodyContent.Empty -> null\r\n                    | _ -> failwith \"Only BodyContent.Text is supported in the dotnet implementation\"\r\n                requestMessage.Content <- content\r\n\r\n                use client = new HttpClient()\r\n                let! response = client.SendAsync requestMessage |> Async.AwaitTask\r\n                let! responseBody = response.Content.ReadAsStringAsync() |> Async.AwaitTask\r\n\r\n                let headers =\r\n                    response.Headers\r\n                    |> Seq.choose (fun kv ->\r\n                        kv.Value\r\n                        |> Seq.tryLast\r\n                        |> Option.map (fun value -> kv.Key, value))\r\n                    |> Map.ofSeq\r\n\r\n                return\r\n                    { statusCode = int response.StatusCode\r\n                      responseText = responseBody\r\n                      responseType = \"text\"\r\n                      responseHeaders = headers\r\n                      content = ResponseContent.Text responseBody }\r\n            with\r\n            // We're catching a lot here to mimic the behaviour of the JS\r\n            // implementation, which isn't able to expose the kind of error.\r\n            | :? ArgumentException ->\r\n                return emptyResponse // invalid uri\r\n            | :? HttpRequestException\r\n            | :? AggregateException as aggrEx when (aggrEx.InnerException :? HttpRequestException) ->\r\n                return emptyResponse // connection errors\r\n        }\r\n#endif\r\n\r\n    /// Safely sends a GET request and returns a tuple(status code * response text). This function does not throw.\r\n    let get url : Async<int * string> =\r\n        async {\r\n            let! response =\r\n                request url\r\n                |> method HttpMethod.GET\r\n                |> send\r\n            return response.statusCode, response.responseText\r\n        }\r\n\r\n    /// Safely sends a PUT request and returns a tuple(status code * response text). This function does not throw.\r\n    let put url (data: string) : Async<int * string> =\r\n        async {\r\n            let! response =\r\n                request url\r\n                |> method HttpMethod.PUT\r\n                |> content (BodyContent.Text data)\r\n                |> send\r\n            return response.statusCode, response.responseText\r\n        }\r\n\r\n    /// Safely sends a DELETE request and returns a tuple(status code * response text). This function does not throw.\r\n    let delete url : Async<int * string> =\r\n        async {\r\n            let! response =\r\n                request url\r\n                |> method HttpMethod.DELETE\r\n                |> send\r\n            return response.statusCode, response.responseText\r\n        }\r\n\r\n    /// Safely sends a PUT request and returns a tuple(status code * response text). This function does not throw.\r\n    let patch url (data: string) : Async<int * string> =\r\n        async {\r\n            let! response =\r\n                request url\r\n                |> method HttpMethod.PATCH\r\n                |> content (BodyContent.Text data)\r\n                |> send\r\n            return response.statusCode, response.responseText\r\n        }\r\n\r\n    /// Safely sends a POST request and returns a tuple(status code * response text). This function does not throw.\r\n    let post url (data: string) : Async<int * string> =\r\n        async {\r\n            let! response =\r\n                request url\r\n                |> method HttpMethod.POST\r\n                |> content (BodyContent.Text data)\r\n                |> send\r\n            return response.statusCode, response.responseText\r\n        }\r\n","namespace Fable.React\n\nopen Fable.Core\nopen Fable.Core.JsInterop\nopen Browser\nopen Props\n\n#if !FABLE_COMPILER\ntype HTMLNode =\n    | Text of string\n    | RawText of string\n    | Node of string * IProp seq * ReactElement seq\n    | List of ReactElement seq\n    | Empty\nwith interface ReactElement\n\ntype ServerElementType =\n    | Tag\n    | Fragment\n    | Component\n\ntype ReactElementTypeWrapper<'P> =\n    | Comp of obj\n    | Fn of ('P -> ReactElement)\n    | HtmlTag of string\n    interface ReactElementType<'P>\n\n[<RequireQualifiedAccess>]\nmodule ServerRendering =\n    let [<Literal>] private ChildrenName = \"children\"\n\n    let private createServerElementPrivate(tag: obj, props: obj, children: ReactElement seq, elementType: ServerElementType) =\n        match elementType with\n        | ServerElementType.Tag ->\n            HTMLNode.Node (string tag, props :?> IProp seq, children) :> ReactElement\n        | ServerElementType.Fragment ->\n            HTMLNode.List children :> ReactElement\n        | ServerElementType.Component ->\n            let tag = tag :?> System.Type\n            let comp = System.Activator.CreateInstance(tag, props)\n            let childrenProp = tag.GetProperty(ChildrenName)\n            childrenProp.SetValue(comp, children |> Seq.toArray)\n            let render = tag.GetMethod(\"render\")\n            render.Invoke(comp, null) :?> ReactElement\n\n    let private createServerElementByFnPrivate(f, props, children) =\n        let propsType = props.GetType()\n        let props =\n            if propsType.GetProperty (ChildrenName) |> isNull then\n                props\n            else\n                let values = ResizeArray<obj> ()\n                let properties = propsType.GetProperties()\n                for p in properties do\n                    if p.Name = ChildrenName then\n                        values.Add (children |> Seq.toArray)\n                    else\n                        values.Add (FSharp.Reflection.FSharpValue.GetRecordField(props, p))\n                FSharp.Reflection.FSharpValue.MakeRecord(propsType, values.ToArray()) :?> 'P\n        f props\n\n    // In most cases these functions are inlined (mainly for Fable optimizations)\n    // so we create a proxy to avoid inlining big functions every time\n\n    let createServerElement(tag: obj, props: obj, children: ReactElement seq, elementType: ServerElementType) =\n        createServerElementPrivate(tag, props, children, elementType)\n\n    let createServerElementByFn(f, props, children) =\n        createServerElementByFnPrivate(f, props, children)\n#endif\n\n[<RequireQualifiedAccess>]\n[<CompilationRepresentation(CompilationRepresentationFlags.ModuleSuffix)>]\nmodule ReactElementType =\n    let inline ofComponent<'comp, 'props, 'state when 'comp :> Component<'props, 'state>> : ReactElementType<'props> =\n#if FABLE_REPL_LIB\n        failwith \"Cannot create React components from types in Fable REPL\"\n#else\n#if FABLE_COMPILER\n        jsConstructor<'comp> |> unbox\n#else\n        Comp (typeof<'comp>) :> _\n#endif\n#endif\n\n    let inline ofFunction<'props> (f: 'props -> ReactElement): ReactElementType<'props> =\n#if FABLE_COMPILER\n        f |> unbox\n#else\n        Fn f :> _\n#endif\n\n    let inline ofHtmlElement<'props> (name: string): ReactElementType<'props> =\n#if FABLE_COMPILER\n        unbox name\n#else\n        HtmlTag name :> ReactElementType<'props>\n#endif\n\n    /// Create a ReactElement to be rendered from an element type, props and children\n    let inline create<'props> (comp: ReactElementType<'props>) (props: 'props) (children: ReactElement seq): ReactElement =\n#if FABLE_COMPILER\n        ReactBindings.React.createElement(comp, props, children)\n#else\n        match (comp :?> ReactElementTypeWrapper<'props>) with\n        | Comp obj -> ServerRendering.createServerElement(obj, props, children, ServerElementType.Component)\n        | Fn f -> ServerRendering.createServerElementByFn(f, props, children)\n        | HtmlTag obj -> ServerRendering.createServerElement(obj, props, children, ServerElementType.Tag)\n#endif\n\n    /// React.memo is a higher order component. It’s similar to React.PureComponent but for function components instead of classes.\n    /// If your function component renders the same result given the same props, you can wrap it in a call to React.memo.\n    /// React will skip rendering the component, and reuse the last rendered result.\n    /// By default it will only shallowly compare complex objects in the props object. If you want control over the comparison, you can use `memoWith`.\n    let memo<'props> (render: 'props -> ReactElement) =\n#if FABLE_COMPILER\n        ReactBindings.React.memo(render, unbox null)\n#else\n        ofFunction render\n#endif\n\n    /// React.memo is a higher order component. It’s similar to React.PureComponent but for function components instead of classes.\n    /// If your function renders the same result given the \"same\" props (according to `areEqual`), you can wrap it in a call to React.memo.\n    /// React will skip rendering the component, and reuse the last rendered result.\n    /// By default it will only shallowly compare complex objects in the props object. If you want control over the comparison, you can use `memoWith`.\n    /// This version allow you to control the comparison used instead of the default shallow one by provide a custom comparison function.\n    let memoWith<'props> (areEqual: 'props -> 'props -> bool) (render: 'props -> ReactElement) =\n#if FABLE_COMPILER\n        ReactBindings.React.memo(render, areEqual)\n#else\n        ofFunction render\n#endif\n\n\n[<AutoOpen>]\nmodule Helpers =\n    [<System.Obsolete(\"Use ReactBindings.React.createElement\")>]\n    let inline createElement(comp: obj, props: obj, [<ParamList>] children: ReactElement seq): ReactElement =\n#if FABLE_COMPILER\n        ReactBindings.React.createElement(comp, props, children)\n#else\n        HTMLNode.Empty :> _\n#endif\n\n    /// Instantiate a component from a type inheriting React.Component\n    /// Example: `ofType<MyComponent,_,_> { myProps = 5 } []`\n    let inline ofType<'T,'P,'S when 'T :> Component<'P,'S>> (props: 'P) (children: ReactElement seq): ReactElement =\n        ReactElementType.create ReactElementType.ofComponent<'T,_,_> props children\n\n    [<System.Obsolete(\"Use ofType\")>]\n    let inline com<'T,'P,'S when 'T :> Component<'P,'S>> (props: 'P) (children: ReactElement seq): ReactElement =\n        ofType<'T, 'P, 'S> props children\n\n    let inline ofFunction<'P> (f: 'P -> ReactElement) (props: 'P) (children: ReactElement seq): ReactElement =\n        ReactElementType.create (ReactElementType.ofFunction f) props children\n\n    /// Instantiate an imported React component. The first two arguments must be string literals, \"default\" can be used for the first one.\n    /// Example: `ofImport \"Map\" \"leaflet\" { x = 10; y = 50 } []`\n    let inline ofImport<'P> (importMember: string) (importPath: string) (props: 'P) (children: ReactElement seq): ReactElement =\n#if FABLE_REPL_LIB\n        failwith \"Cannot import React components in Fable REPL\"\n#else\n#if FABLE_COMPILER\n        ReactBindings.React.createElement(import importMember importPath, props, children)\n#else\n        failwith \"Cannot import React components in .NET\"\n#endif\n#endif\n\n#if FABLE_COMPILER\n    [<Emit(\"typeof $0 === 'function'\")>]\n    let private isFunction (x: obj): bool = jsNative\n\n    [<Emit(\"typeof $0 === 'object' && !$0[Symbol.iterator]\")>]\n    let private isNonEnumerableObject (x: obj): bool = jsNative\n#endif\n\n    /// Normal structural F# comparison, but ignores top-level functions (e.g. Elmish dispatch).\n    /// Can be used e.g. with the `FunctionComponent.Of` `memoizeWith` parameter.\n    let equalsButFunctions (x: 'a) (y: 'a) =\n#if FABLE_COMPILER\n        if obj.ReferenceEquals(x, y) then\n            true\n        elif isNonEnumerableObject x && not(isNull(box y)) then\n            let keys = JS.Object.keys x\n            let length = keys.Count\n            let mutable i = 0\n            let mutable result = true\n            while i < length && result do\n                let key = keys.[i]\n                i <- i + 1\n                let xValue = x?(key)\n                result <- isFunction xValue || xValue = y?(key)\n            result\n        else\n            (box x) = (box y)\n#else\n        // Server rendering, won't be actually used\n        // Avoid `x = y` because it will force 'a to implement structural equality\n        false\n#endif\n\n    /// Comparison similar to default React.memo, but ignores functions (e.g. Elmish dispatch).\n    /// Performs a memberwise comparison where value types and strings are compared by value,\n    /// and other types by reference.\n    /// Can be used e.g. with the `FunctionComponent.Of` `memoizeWith` parameter.\n    let memoEqualsButFunctions (x: 'a) (y: 'a) =\n#if FABLE_COMPILER\n        if obj.ReferenceEquals(x, y) then\n            true\n        elif isNonEnumerableObject x && not(isNull(box y)) then\n            let keys = JS.Object.keys x\n            let length = keys.Count\n            let mutable i = 0\n            let mutable result = true\n            while i < length && result do\n                let key = keys.[i]\n                i <- i + 1\n                let xValue = x?(key)\n                result <- isFunction xValue || obj.ReferenceEquals(xValue, y?(key))\n            result\n        else\n            false\n#else\n        // Server rendering, won't be actually used\n        // Avoid `x = y` because it will force 'a to implement structural equality\n        false\n#endif\n\n    [<System.Obsolete(\"Use FunctionComponent.Of with memoizeWith\")>]\n    let memoBuilder<'props> (name: string) (render: 'props -> ReactElement) : 'props -> ReactElement =\n#if FABLE_COMPILER\n        render?displayName <- name\n#endif\n        let memoType = ReactElementType.memo render\n        fun props ->\n            ReactElementType.create memoType props []\n\n    [<System.Obsolete(\"Use FunctionComponent.Of with memoizeWith\")>]\n    let memoBuilderWith<'props> (name: string) (areEqual: 'props -> 'props -> bool) (render: 'props -> ReactElement) : 'props -> ReactElement =\n#if FABLE_COMPILER\n        render?displayName <- name\n#endif\n        let memoType = ReactElementType.memoWith areEqual render\n        fun props ->\n            ReactElementType.create memoType props []\n\n    [<System.Obsolete(\"Use ReactElementType.create\")>]\n    let inline from<'P> (com: ReactElementType<'P>) (props: 'P) (children: ReactElement seq): ReactElement =\n        ReactElementType.create com props children\n\n    /// Alias of `ofString`\n    let inline str (s: string): ReactElement =\n#if FABLE_COMPILER\n        unbox s\n#else\n        HTMLNode.Text s :> ReactElement\n#endif\n\n    /// Cast a string to a React element (erased in runtime)\n    let inline ofString (s: string): ReactElement =\n        str s\n\n    /// Cast an option value to a React element (erased in runtime)\n    let inline ofOption (o: ReactElement option): ReactElement =\n        match o with Some o -> o | None -> null // Option.toObj(o)\n\n    [<System.Obsolete(\"Use ofOption\")>]\n    let opt (o: ReactElement option): ReactElement =\n        ofOption o\n\n    /// Cast an int to a React element (erased in runtime)\n    let inline ofInt (i: int): ReactElement =\n#if FABLE_COMPILER\n        unbox i\n#else\n        HTMLNode.RawText (string i) :> ReactElement\n#endif\n\n    /// Cast a float to a React element (erased in runtime)\n    let inline ofFloat (f: float): ReactElement =\n#if FABLE_COMPILER\n        unbox f\n#else\n        HTMLNode.RawText (string f) :> ReactElement\n#endif\n\n    /// Returns a list **from .render() method**\n    let inline ofList (els: ReactElement list): ReactElement =\n#if FABLE_COMPILER\n        unbox(List.toArray els)\n#else\n        HTMLNode.List els :> ReactElement\n#endif\n\n    /// Returns an array **from .render() method**\n    let inline ofArray (els: ReactElement array): ReactElement =\n#if FABLE_COMPILER\n        unbox els\n#else\n        HTMLNode.List els :> ReactElement\n#endif\n\n    /// A ReactElement when you don't want to render anything (null in javascript)\n    let nothing: ReactElement =\n#if FABLE_COMPILER\n        null\n#else\n        HTMLNode.Empty :> ReactElement\n#endif\n\n    /// Instantiate a DOM React element\n    let inline domEl (tag: string) (props: IHTMLProp seq) (children: ReactElement seq): ReactElement =\n#if FABLE_COMPILER\n        ReactBindings.React.createElement(tag, keyValueList CaseRules.LowerFirst props, children)\n#else\n        ServerRendering.createServerElement(tag, (props |> Seq.cast<IProp>), children, ServerElementType.Tag)\n#endif\n\n    /// Instantiate a DOM React element (void)\n    let inline voidEl (tag: string) (props: IHTMLProp seq) : ReactElement =\n#if FABLE_COMPILER\n        ReactBindings.React.createElement(tag, keyValueList CaseRules.LowerFirst props, [])\n#else\n        ServerRendering.createServerElement(tag, (props |> Seq.cast<IProp>), [], ServerElementType.Tag)\n#endif\n\n    /// Instantiate an SVG React element\n    let inline svgEl (tag: string) (props: IProp seq) (children: ReactElement seq): ReactElement =\n#if FABLE_COMPILER\n        ReactBindings.React.createElement(tag, keyValueList CaseRules.LowerFirst props, children)\n#else\n        ServerRendering.createServerElement(tag, (props |> Seq.cast<IProp>), children, ServerElementType.Tag)\n#endif\n\n    /// Instantiate a React fragment\n    let inline fragment (props: IFragmentProp seq) (children: ReactElement seq): ReactElement =\n#if FABLE_COMPILER\n        ReactBindings.React.createElement(ReactBindings.React.Fragment, keyValueList CaseRules.LowerFirst props, children)\n#else\n        ServerRendering.createServerElement(typeof<Fragment>, (props |> Seq.cast<IProp>), children, ServerElementType.Fragment)\n#endif\n\n    /// Accepts a context value to be passed to consuming components that are descendants of this Provider.\n    /// One Provider can be connected to many consumers. Providers can be nested to override values deeper within the tree.\n    /// Important: In SSR, this is ignored, and the DEFAULT value is consumed!\n    /// More info at https://reactjs.org/docs/context.html#contextprovider\n    let inline contextProvider (ctx: IContext<'T>) (value: 'T) (children: ReactElement seq): ReactElement =\n#if FABLE_COMPILER\n        ReactBindings.React.createElement(ctx?Provider, createObj [\"value\" ==> value], children)\n#else\n        fragment [] children\n#endif\n\n    /// Consumes a context value, either from the nearest parent in the tree, or from the default value.\n    /// Important: in SSR, this will always consume the context DEFAULT value!\n    /// More info at https://reactjs.org/docs/context.html#contextconsumer\n    let inline contextConsumer (ctx: IContext<'T>) (children: 'T -> ReactElement): ReactElement =\n#if FABLE_COMPILER\n        ReactBindings.React.createElement(ctx?Consumer, null, [!!children])\n#else\n        let ctx = ctx :?> ISSRContext<_>\n        fragment [] [children(ctx.DefaultValue)]\n#endif\n\n    /// Creates a Context object. When React renders a component that subscribes to this Context\n    /// object it will read the current context value from the closest matching Provider above it\n    /// in the tree. More info at https://reactjs.org/docs/context.html#reactcreatecontext\n    let inline createContext (defaultValue: 'T): IContext<'T> =\n#if FABLE_COMPILER\n        ReactBindings.React.createContext(defaultValue)\n#else\n        upcast { new ISSRContext<_> with member __.DefaultValue = defaultValue }\n#endif\n\n    /// To be used in constructors of class components\n    /// (for function components use `useRef` hook)\n    let inline createRef (initialValue: 'T): IRefValue<'T> =\n#if FABLE_COMPILER\n        ReactBindings.React.createRef(initialValue)\n#else\n        { new IRefValue<_> with\n            member __.current with get() = initialValue and set _ = () }\n#endif\n\n    // Class list helpers\n    let classBaseList baseClass classes =\n        classes\n        |> Seq.choose (fun (name, condition) ->\n            if condition && not(System.String.IsNullOrEmpty(name)) then Some name\n            else None)\n        |> Seq.fold (fun state name -> state + \" \" + name) baseClass\n        |> ClassName\n\n    let classList classes = classBaseList \"\" classes\n\n    /// Finds a DOM element by its ID and mounts the React element there\n    /// Important: Not available in SSR\n    let inline mountById (domElId: string) (reactEl: ReactElement): unit =\n#if FABLE_COMPILER\n        ReactDom.render(reactEl, document.getElementById(domElId))\n#else\n        failwith \"mountById is not available for SSR\"\n#endif\n    /// Finds the first DOM element matching a CSS selector and mounts the React element there\n    /// Important: Not available in SSR\n    let inline mountBySelector (domElSelector: string) (reactEl: ReactElement): unit =\n#if FABLE_COMPILER\n        ReactDom.render(reactEl, document.querySelector(domElSelector))\n#else\n        failwith \"mountBySelector is not available for SSR\"\n#endif\n","namespace Elmish.React\n\nopen Fable.React\nopen Elmish\n\ntype LazyProps<'model> = {\n    model:'model\n    render:unit->ReactElement\n    equal:'model->'model->bool\n}\n\nmodule Components =\n    type LazyView<'model>(props) =\n        inherit Component<LazyProps<'model>,obj>(props)\n\n        override this.shouldComponentUpdate(nextProps, _nextState) =\n            not <| this.props.equal this.props.model nextProps.model\n\n        override this.render () =\n            this.props.render ()\n\n[<AutoOpen>]\nmodule Common =\n    /// Avoid rendering the view unless the model has changed.\n    /// equal: function to compare the previous and the new states\n    /// view: function to render the model\n    /// state: new state to render\n    let lazyViewWith (equal:'model->'model->bool)\n                     (view:'model->ReactElement)\n                     (state:'model) =\n        ofType<Components.LazyView<_>,_,_>\n            { render = fun () -> view state\n              equal = equal\n              model = state }\n            []\n\n    /// Avoid rendering the view unless the model has changed.\n    /// equal: function to compare the previous and the new states\n    /// view: function to render the model using the dispatch\n    /// state: new state to render\n    /// dispatch: dispatch function\n    let lazyView2With (equal:'model->'model->bool)\n                      (view:'model->'msg Dispatch->ReactElement)\n                      (state:'model)\n                      (dispatch:'msg Dispatch) =\n        ofType<Components.LazyView<_>,_,_>\n            { render = fun () -> view state dispatch\n              equal = equal\n              model = state }\n            []\n\n    /// Avoid rendering the view unless the model has changed.\n    /// equal: function to compare the previous and the new model (a tuple of two states)\n    /// view: function to render the model using the dispatch\n    /// state1: new state to render\n    /// state2: new state to render\n    /// dispatch: dispatch function\n    let lazyView3With (equal:_->_->bool) (view:_->_->_->ReactElement) state1 state2 (dispatch:'msg Dispatch) =\n        ofType<Components.LazyView<_>,_,_>\n            { render = fun () -> view state1 state2 dispatch\n              equal = equal\n              model = (state1,state2) }\n            []\n\n    /// Avoid rendering the view unless the model has changed.\n    /// view: function of model to render the view\n    let lazyView (view:'model->ReactElement) =\n        lazyViewWith (=) view\n\n    /// Avoid rendering the view unless the model has changed.\n    /// view: function of two arguments to render the model using the dispatch\n    let lazyView2 (view:'model->'msg Dispatch->ReactElement) =\n        lazyView2With (=) view\n\n    /// Avoid rendering the view unless the model has changed.\n    /// view: function of three arguments to render the model using the dispatch\n    let lazyView3 (view:_->_->_->ReactElement) =\n        lazyView3With (=) view\n\n\n","namespace Feliz.Router\r\n\r\nopen System\r\nopen Browser.Dom\r\nopen Fable.React\r\nopen Elmish\r\nopen Fable.Core\r\n\r\ntype IUrlSearchParamters =\r\n    abstract entries : unit -> seq<string array>\r\n\r\n/// Determines whether the router will push a new entry to the history of modify the current one.\r\n[<RequireQualifiedAccess>]\r\ntype HistoryMode =\r\n    /// A new history will be added to the entries such that if the user clicks the back button,\r\n    /// the previous page will be shown, this is the default bahavior of the router.\r\n    | PushState = 1\r\n    /// Only modifies the current history entry and does not add a new one to the history stack. Clicking the back button will *not* have the effect of retuning to the previous page.\r\n    | ReplaceState = 2\r\n\r\n/// Determines whether the router will use path or hash based routes\r\n[<RequireQualifiedAccess>]\r\ntype RouteMode =\r\n    | Hash = 1\r\n    | Path = 2\r\n\r\n[<RequireQualifiedAccess>]\r\nmodule internal Router =\r\n    let mutable routeMode = RouteMode.Hash\r\n\r\n    let customNavigationEvent = \"CUSTOM_NAVIGATION_EVENT\"\r\n    let hashPrefix = sprintf \"#/%s\"\r\n    let combine xs = String.concat \"/\" xs\r\n\r\n    [<Emit(\"encodeURIComponent($0)\")>]\r\n    let encodeURIComponent (value: string) : string = jsNative\r\n    [<Emit(\"decodeURIComponent($0)\")>]\r\n    let decodeURIComponent (value: string) : string = jsNative\r\n\r\n    let encodeQueryString queryStringPairs =\r\n        queryStringPairs\r\n        |> List.map (fun (key, value) -> encodeURIComponent key, encodeURIComponent value)\r\n        |> List.map (fun (key, value) -> String.concat \"=\" [ key; value ])\r\n        |> String.concat \"&\"\r\n        |> function\r\n            | \"\" -> \"\"\r\n            | pairs -> sprintf \"?%s\" pairs\r\n\r\n    let encodeQueryStringInts queryStringIntPairs =\r\n        queryStringIntPairs\r\n        |> List.map (fun (key, value: int) -> encodeURIComponent key, (string value))\r\n        |> List.map (fun (key, value) -> String.concat \"=\" [ key; value ])\r\n        |> String.concat \"&\"\r\n        |> function\r\n            | \"\" -> \"\"\r\n            | pairs -> sprintf \"?%s\" pairs\r\n\r\n    let encodeParts xs =\r\n        let normalizeRoute : (string -> string) =\r\n            if routeMode = RouteMode.Hash then\r\n                function\r\n                | path when path.StartsWith \"/\" -> sprintf \"#%s\" path\r\n                | path when path.StartsWith \"#/\" -> path\r\n                | path when path.StartsWith \"#\" -> \"#/\" + path.Substring(1, path.Length - 1)\r\n                | path -> sprintf \"#/%s\" path\r\n            else\r\n                (fun path -> if path.StartsWith \"/\" then path else sprintf \"/%s\" path)\r\n\r\n        xs\r\n        |> List.map (fun (part: string) ->\r\n            if part.Contains \"?\" || part.StartsWith \"#\" || part.StartsWith \"/\"\r\n            then part\r\n            else encodeURIComponent part)\r\n        |> combine\r\n        |> normalizeRoute\r\n\r\n    let nav xs (mode: HistoryMode) : Elmish.Cmd<_> =\r\n        Cmd.ofSub (fun _ ->\r\n            if mode = HistoryMode.PushState\r\n            then history.pushState ((), \"\", encodeParts xs)\r\n            else history.replaceState((), \"\", encodeParts xs)\r\n            let ev = document.createEvent(\"CustomEvent\")\r\n            ev.initEvent (customNavigationEvent, true, true)\r\n            window.dispatchEvent ev |> ignore\r\n        )\r\n\r\n    /// Parses the URL into multiple path segments\r\n    let urlSegmentsWithRouteMode (path: string) (mode: RouteMode) =\r\n        if path.StartsWith \"#\"\r\n        // remove the hash sign\r\n        then path.Substring(1, path.Length - 1)\r\n        elif mode = RouteMode.Hash && (path.EndsWith \"#\" || path.EndsWith \"#/\")\r\n        then \"\"\r\n        // return as is\r\n        else path\r\n        |> fun p -> p.Split '/' // split the url segments\r\n        |> List.ofArray\r\n        |> List.filter (String.IsNullOrWhiteSpace >> not)\r\n        |> List.map (fun segment -> segment.TrimEnd '#')\r\n        |> List.collect (fun segment ->\r\n            if segment = \"?\"\r\n            then [ ]\r\n            elif segment.StartsWith \"?\"\r\n            then [ segment ]\r\n            else\r\n            match segment.Split [| '?' |] with\r\n            | [| value |] -> [decodeURIComponent value]\r\n            | [| value; \"\" |] -> [decodeURIComponent value]\r\n            | [| value; query |] -> [ decodeURIComponent value; \"?\" + query ]\r\n            | _ -> [])\r\n\r\n    /// Parses the URL into multiple path segments\r\n    let urlSegments (path: string) = urlSegmentsWithRouteMode path routeMode\r\n\r\n    [<Emit(\"new URLSearchParams($0)\")>]\r\n    let createUrlSearchParams (queryString: string) : IUrlSearchParamters = jsNative\r\n\r\n    [<Emit(\"window.navigator.userAgent\")>]\r\n    let navigatorUserAgent : string = jsNative\r\n\r\ntype RouterProperties = {\r\n    urlChanged: string list -> unit\r\n    application: ReactElement\r\n    routeMode: RouteMode\r\n}\r\n\r\ntype RouterComponent(props: RouterProperties)  =\r\n    inherit Fable.React.PureStatelessComponent<RouterProperties>(props)\r\n\r\n    override this.render() =\r\n        this.props.application\r\n\r\n    override this.componentDidUpdate(nextProps, nextState) =\r\n        // register global route mode\r\n        Router.routeMode <- props.routeMode\r\n\r\n    override this.componentDidMount() =\r\n        let onChange (ev: _) =\r\n            match window.location.hash with\r\n            | \"\" when Router.routeMode = RouteMode.Path -> window.location.pathname + window.location.search\r\n            | _ -> window.location.hash\r\n            |> Router.urlSegments\r\n            |> this.props.urlChanged\r\n\r\n        // register global route mode\r\n        Router.routeMode <- props.routeMode\r\n\r\n        // listen to path changes\r\n        if Router.navigatorUserAgent.Contains \"Trident\" ||\r\n           Router.navigatorUserAgent.Contains \"MSIE\" then\r\n            window.addEventListener(\"hashchange\", unbox onChange)\r\n        else\r\n            window.addEventListener(\"popstate\", unbox onChange)\r\n\r\n\r\n        // listen to custom navigation events published by `Router.navigate()`\r\n        window.addEventListener(Router.customNavigationEvent, unbox onChange)\r\n\r\n    override this.componentWillUnmount() =\r\n        // clean up when the router isn't in view anymore\r\n        window.removeEventListener(\"popstate\", unbox null)\r\n        window.removeEventListener(\"hashchange\", unbox null)\r\n        window.removeEventListener(Router.customNavigationEvent, unbox null)\r\n\r\n/// Defines a property for the `router` element\r\ntype IRouterProperty = interface end\r\n\r\ntype Router =\r\n    /// An event that is triggered when the URL in the address bar changes, whether by hand or programmatically using `Router.navigate(...)`.\r\n    /// The event arguments are the parts of the URL, segmented into strings:\r\n    ///\r\n    /// `segment \"#/\" => [ ]`\r\n    ///\r\n    /// `segment \"#/home\" => [ \"home\" ]`\r\n    ///\r\n    /// `segment \"#/home/settings\" => [ \"home\"; \"settings\" ]`\r\n    ///\r\n    /// `segment \"#/users/1\" => [ \"users\"; \"1\" ]`\r\n    ///\r\n    /// `segment \"#/users/1/details\" => [ \"users\"; \"1\"; \"details\" ]`\r\n    ///\r\n    /// with query string parameters\r\n    ///\r\n    /// `segment \"#/users?id=1\" => [ \"users\"; \"?id=1\" ]`\r\n    ///\r\n    /// `segment \"#/home/users?id=1\" => [ \"home\"; \"users\"; \"?id=1\" ]`\r\n    ///\r\n    /// `segment \"#/users?id=1&format=json\" => [ \"users\"; \"?id=1&format=json\" ]`\r\n    static member onUrlChanged (eventHandler: string list -> unit) : IRouterProperty = unbox (\"onUrlChanged\", eventHandler)\r\n\r\n    /// The element that is rendered inside where the `router` is placed. Usually this contains the root application but it could also be part of another root element.\r\n    ///\r\n    /// It will keep listening for URL changes as long as the `router` is rendered on screen somewhere.\r\n    static member application (app: ReactElement) : IRouterProperty = unbox (\"application\", app)\r\n\r\n    /// The content that is rendered inside where the `router` is placed. Usually this contains the root application but it could also be part of another root element.\r\n    ///\r\n    /// It will keep listening for URL changes as long as the `router` is rendered on screen somewhere.\r\n    static member application (app: ReactElement list) : IRouterProperty = unbox (\"application\", Fable.React.Helpers.fragment [ ] app)\r\n\r\n    /// Use # based routes (default)\r\n    static member hashMode : IRouterProperty = unbox (\"routeMode\", RouteMode.Hash)\r\n\r\n    /// Use full (HTML 5) based routes instead of # based.\r\n    /// You have to be careful about which requests you want forwarded to the server and which ones should be handled locally.\r\n    /// To keep the request local, you have to use the 'Router.navigate' function for all the URL transitions.\r\n    static member pathMode : IRouterProperty = unbox (\"routeMode\", RouteMode.Path)\r\n\r\n    /// Parses the current URL of the page and returns the cleaned URL segments.\r\n    static member currentUrl() =\r\n        match window.location.hash with\r\n        | \"\" when Router.routeMode = RouteMode.Path -> window.location.pathname + window.location.search\r\n        | _ -> window.location.hash\r\n        |> Router.urlSegments\r\n\r\n    /// Initializes the router as an element of the page to starts listening to URL changes.\r\n    static member router (properties: IRouterProperty list) : ReactElement =\r\n        let defaultProperties : RouterProperties =\r\n            { urlChanged = fun _ -> ignore()\r\n              application = nothing\r\n              routeMode = RouteMode.Hash }\r\n\r\n        let modifiedProperties =\r\n            (defaultProperties, properties)\r\n            ||> List.fold (fun state prop ->\r\n                let (key, value) = unbox<string * obj> prop\r\n                match key with\r\n                | \"onUrlChanged\" -> { state with urlChanged  = unbox value  }\r\n                | \"application\"  -> { state with application = unbox value  }\r\n                | \"routeMode\"    -> { state with routeMode   = unbox value  }\r\n                | _ -> state)\r\n\r\n        ofType<RouterComponent, _, _>(modifiedProperties) [| |]\r\n\r\n    static member navigate([<ParamArray>] xs: string array) =\r\n        Router.nav (List.ofArray xs) HistoryMode.PushState\r\n    static member navigate(segment: string, queryString) : Cmd<_> =\r\n        Router.nav [ segment + Router.encodeQueryString queryString ] HistoryMode.PushState\r\n    static member navigate(segment: string, queryString, mode) : Cmd<_> =\r\n        Router.nav [ segment + Router.encodeQueryString queryString ] mode\r\n    static member navigate(segment: string, queryString) : Cmd<_> =\r\n        Router.nav [ segment + Router.encodeQueryStringInts queryString ] HistoryMode.PushState\r\n    static member navigate(segment: string, queryString, mode) : Cmd<_> =\r\n        Router.nav [ segment + Router.encodeQueryStringInts queryString ] mode\r\n    static member navigate(segment1: string, segment2: string, queryString) : Cmd<_> =\r\n        Router.nav [ segment1; segment2 + Router.encodeQueryString queryString ] HistoryMode.PushState\r\n    static member navigate(segment1: string, segment2: string, queryString, mode) : Cmd<_> =\r\n        Router.nav [ segment1; segment2 + Router.encodeQueryString queryString ] mode\r\n    static member navigate(segment1: string, segment2: string, queryString) : Cmd<_> =\r\n        Router.nav [ segment1; segment2 + Router.encodeQueryStringInts queryString ] HistoryMode.PushState\r\n    static member navigate(segment1: string, segment2: string, queryString, mode) : Cmd<_> =\r\n        Router.nav [ segment1; segment2 + Router.encodeQueryStringInts queryString ] mode\r\n    static member navigate(segment1: string, segment2: string, segment3:int, queryString) : Cmd<_> =\r\n        Router.nav [ segment1; segment2; string segment3 + Router.encodeQueryString queryString ] HistoryMode.PushState\r\n    static member navigate(segment1: string, segment2: string, segment3:int, queryString, mode) : Cmd<_> =\r\n        Router.nav [ segment1; segment2;string  segment3 + Router.encodeQueryString queryString ] mode\r\n    static member navigate(segment1: string, segment2: string, segment3:int, queryString) : Cmd<_> =\r\n        Router.nav [ segment1; segment2; string segment3 + Router.encodeQueryStringInts queryString ] HistoryMode.PushState\r\n    static member navigate(segment1: string, segment2: string, segment3:int, queryString, mode) : Cmd<_> =\r\n        Router.nav [ segment1; segment2; string segment3 + Router.encodeQueryStringInts queryString ] mode\r\n    static member navigate(segment1: string, segment2: string, segment3:string, queryString) : Cmd<_> =\r\n        Router.nav [ segment1; segment2; segment3 + Router.encodeQueryString queryString ] HistoryMode.PushState\r\n    static member navigate(segment1: string, segment2: string, segment3:string, queryString, mode) : Cmd<_> =\r\n        Router.nav [ segment1; segment2; segment3 + Router.encodeQueryString queryString ] mode\r\n    static member navigate(segment1: string, segment2: string, segment3:string, queryString) : Cmd<_> =\r\n        Router.nav [ segment1; segment2; segment3 + Router.encodeQueryStringInts queryString ] HistoryMode.PushState\r\n    static member navigate(segment1: string, segment2: string, segment3:string, queryString, mode) : Cmd<_> =\r\n        Router.nav [ segment1; segment2; segment3 + Router.encodeQueryStringInts queryString ] mode\r\n    static member navigate(segment1: string, segment2: int, segment3:string, queryString) : Cmd<_> =\r\n        Router.nav [ segment1; string segment2; segment3 + Router.encodeQueryString queryString ] HistoryMode.PushState\r\n    static member navigate(segment1: string, segment2: int, segment3:string, queryString, mode) : Cmd<_> =\r\n        Router.nav [ segment1; string segment2; segment3 + Router.encodeQueryString queryString ] mode\r\n    static member navigate(segment1: string, segment2: int, segment3:string, queryString) : Cmd<_> =\r\n        Router.nav [ segment1; string segment2; segment3 + Router.encodeQueryStringInts queryString ] HistoryMode.PushState\r\n    static member navigate(segment1: string, segment2: int, segment3:string, queryString, mode) : Cmd<_> =\r\n        Router.nav [ segment1; string segment2; segment3 + Router.encodeQueryStringInts queryString ] mode\r\n    static member navigate(segment1: string, segment2: string, segment3:string, segment4: string, queryString) : Cmd<_> =\r\n        Router.nav [ segment1; segment2; segment3; segment4 + Router.encodeQueryString queryString ] HistoryMode.PushState\r\n    static member navigate(segment1: string, segment2: string, segment3:string, segment4: string, queryString, mode) : Cmd<_> =\r\n        Router.nav [ segment1; segment2; segment3; segment4 + Router.encodeQueryString queryString ] mode\r\n    static member navigate(segment1: string, segment2: string, segment3:string, segment4: string, queryString) : Cmd<_> =\r\n        Router.nav [ segment1; segment2; segment3; segment4 + Router.encodeQueryStringInts queryString ] HistoryMode.PushState\r\n    static member navigate(segment1: string, segment2: string, segment3:string, segment4: string, queryString, mode) : Cmd<_> =\r\n        Router.nav [ segment1; segment2; segment3; segment4 + Router.encodeQueryStringInts queryString ] mode\r\n    static member navigate(segment1: string, segment2: string, segment3:string, segment4: string, segment5, queryString) : Cmd<_> =\r\n        Router.nav [ segment1; segment2; segment3; segment4; segment5 + Router.encodeQueryString queryString ] HistoryMode.PushState\r\n    static member navigate(segment1: string, segment2: string, segment3:string, segment4: string, segment5, queryString, mode) : Cmd<_> =\r\n        Router.nav [ segment1; segment2; segment3; segment4; segment5 + Router.encodeQueryString queryString ] mode\r\n    static member navigate(segment1: string, segment2: string, segment3:string, segment4: string, segment5, queryString) : Cmd<_> =\r\n        Router.nav [ segment1; segment2; segment3; segment4; segment5 + Router.encodeQueryStringInts queryString ] HistoryMode.PushState\r\n    static member navigate(segment1: string, segment2: string, segment3:string, segment4: string, segment5, queryString, mode) : Cmd<_> =\r\n        Router.nav [ segment1; segment2; segment3; segment4; segment5 + Router.encodeQueryStringInts queryString ] mode\r\n    static member navigate(segment1: string, segment2: int, segment3:string, segment4: string, queryString) : Cmd<_> =\r\n        Router.nav [ segment1; string segment2; segment3; segment4 + Router.encodeQueryString queryString ] HistoryMode.PushState\r\n    static member navigate(segment1: string, segment2: int, segment3:string, segment4: string, queryString, mode) : Cmd<_> =\r\n        Router.nav [ segment1; string segment2; segment3; segment4 + Router.encodeQueryString queryString ] mode\r\n    static member navigate(segment1: string, segment2: int, segment3:string, segment4: string, queryString) : Cmd<_> =\r\n        Router.nav [ segment1; string segment2; segment3; segment4 + Router.encodeQueryStringInts queryString ] HistoryMode.PushState\r\n    static member navigate(segment1: string, segment2: int, segment3:string, segment4: string, queryString, mode) : Cmd<_> =\r\n        Router.nav [ segment1; string segment2; segment3; segment4 + Router.encodeQueryStringInts queryString ] mode\r\n    static member navigate(segment1: string, segment2: int, segment3:int, segment4: string, queryString) : Cmd<_> =\r\n        Router.nav [ segment1; string segment2; string segment3; segment4 + Router.encodeQueryString queryString ] HistoryMode.PushState\r\n    static member navigate(segment1: string, segment2: int, segment3:int, segment4: string, queryString, mode) : Cmd<_> =\r\n        Router.nav [ segment1; string segment2; string segment3; segment4 + Router.encodeQueryString queryString ] mode\r\n    static member navigate(segment1: string, segment2: int, segment3:int, segment4: string, queryString) : Cmd<_> =\r\n        Router.nav [ segment1; string segment2; string segment3; segment4 + Router.encodeQueryStringInts queryString ] HistoryMode.PushState\r\n    static member navigate(segment1: string, segment2: int, segment3:int, segment4: string, queryString, mode) : Cmd<_> =\r\n        Router.nav [ segment1; string segment2; string segment3; segment4 + Router.encodeQueryStringInts queryString ] mode\r\n    static member navigate(segment1: string, segment2: int, segment3:int, segment4: string, segment5: string, segment6, queryString) : Cmd<_> =\r\n        Router.nav [ segment1; string segment2; string segment3; segment4; segment5; segment6 + Router.encodeQueryString queryString ] HistoryMode.PushState\r\n    static member navigate(segment1: string, segment2: int, segment3:int, segment4: string, segment5: string, segment6, queryString, mode) : Cmd<_> =\r\n        Router.nav [ segment1; string segment2; string segment3; segment4; segment5; segment6 + Router.encodeQueryString queryString ] mode\r\n    static member navigate(segment1: string, segment2: int, segment3:int, segment4: string, segment5: string, segment6, queryString) : Cmd<_> =\r\n        Router.nav [ segment1; string segment2; string segment3; segment4; segment5; segment6 + Router.encodeQueryStringInts queryString ] HistoryMode.PushState\r\n    static member navigate(segment1: string, segment2: int, segment3:int, segment4: string, segment5: string, segment6, queryString, mode) : Cmd<_> =\r\n        Router.nav [ segment1; string segment2; string segment3; segment4; segment5; segment6 + Router.encodeQueryStringInts queryString ] mode\r\n    static member navigate(segment1: string, segment2: int, segment3:int, segment4: int, segment5: string, queryString) : Cmd<_> =\r\n        Router.nav [ segment1; string segment2; string segment3; string segment4; segment5 + Router.encodeQueryString queryString ] HistoryMode.PushState\r\n    static member navigate(segment1: string, segment2: int, segment3:int, segment4: int, segment5: string, queryString, mode) : Cmd<_> =\r\n        Router.nav [ segment1; string segment2; string segment3; string segment4; segment5 + Router.encodeQueryString queryString ] mode\r\n    static member navigate(segment1: string, segment2: int, segment3:int, segment4: int, segment5: string, queryString) : Cmd<_> =\r\n        Router.nav [ segment1; string segment2; string segment3; string segment4; segment5 + Router.encodeQueryStringInts queryString ] HistoryMode.PushState\r\n    static member navigate(segment1: string, segment2: int, segment3:int, segment4: int, segment5: string, queryString, mode) : Cmd<_> =\r\n        Router.nav [ segment1; string segment2; string segment3; string segment4; segment5 + Router.encodeQueryStringInts queryString ] mode\r\n    static member navigate(segment1: string, segment2: int, segment3:string, segment4: int, segment5: string, queryString) : Cmd<_> =\r\n        Router.nav [ segment1; string segment2; segment3; string segment4; segment5 + Router.encodeQueryString queryString ] HistoryMode.PushState\r\n    static member navigate(segment1: string, segment2: int, segment3:string, segment4: int, segment5: string, queryString, mode) : Cmd<_> =\r\n        Router.nav [ segment1; string segment2; segment3; string segment4; segment5 + Router.encodeQueryString queryString ] mode\r\n    static member navigate(segment1: string, segment2: int, segment3:string, segment4: int, segment5: string, queryString) : Cmd<_> =\r\n        Router.nav [ segment1; string segment2; segment3; string segment4; segment5 + Router.encodeQueryStringInts queryString ] HistoryMode.PushState\r\n    static member navigate(segment1: string, segment2: int, segment3:string, segment4: int, segment5: string, queryString, mode) : Cmd<_> =\r\n        Router.nav [ segment1; string segment2; segment3; string segment4; segment5 + Router.encodeQueryStringInts queryString ] mode\r\n    static member navigate(segment1: string, segment2: int, segment3:string, segment4: string, segment5, queryString) : Cmd<_> =\r\n        Router.nav [ segment1; string segment2; segment3; segment4; segment5 + Router.encodeQueryString queryString ] HistoryMode.PushState\r\n    static member navigate(segment1: string, segment2: int, segment3:string, segment4: string, segment5, queryString, mode) : Cmd<_> =\r\n        Router.nav [ segment1; string segment2; segment3; segment4; segment5 + Router.encodeQueryString queryString ] mode\r\n    static member navigate(segment1: string, segment2: int, segment3:string, segment4: string, segment5, queryString) : Cmd<_> =\r\n        Router.nav [ segment1; string segment2; segment3; segment4; segment5 + Router.encodeQueryStringInts queryString ] HistoryMode.PushState\r\n    static member navigate(segment1: string, segment2: int, segment3:string, segment4: string, segment5, queryString, mode) : Cmd<_> =\r\n        Router.nav [ segment1; string segment2; segment3; segment4; segment5 + Router.encodeQueryStringInts queryString ] mode\r\n    static member navigate(fullPath: string) : Cmd<_> =\r\n        Router.nav [ fullPath ] HistoryMode.PushState\r\n    static member navigate(fullPath: string, mode) : Cmd<_> =\r\n        Router.nav [ fullPath ] mode\r\n    static member navigate(segment: string, value: int) : Cmd<_> =\r\n        Router.nav [segment; string value ] HistoryMode.PushState\r\n    static member navigate(segment: string, value: int, mode) : Cmd<_> =\r\n        Router.nav [segment; string value ] mode\r\n    static member navigate(segment1: string, value1: int, value2: int) : Cmd<_> =\r\n        Router.nav [segment1; string value1; string value2 ] HistoryMode.PushState\r\n    static member navigate(segment1: string, value1: int, value2: int, mode) : Cmd<_> =\r\n        Router.nav [segment1; string value1; string value2 ] mode\r\n    static member navigate(segment1: string, segment2: string, value1: int) : Cmd<_> =\r\n        Router.nav [segment1; segment2; string value1 ] HistoryMode.PushState\r\n    static member navigate(segment1: string, segment2: string, value1: int, mode) : Cmd<_> =\r\n        Router.nav [segment1; segment2; string value1 ] mode\r\n    static member navigate(segment1: string, value1: int, segment2: string) : Cmd<_> =\r\n        Router.nav [segment1; string value1; segment2 ] HistoryMode.PushState\r\n    static member navigate(segment1: string, value1: int, segment2: string, mode) : Cmd<_> =\r\n        Router.nav [segment1; string value1; segment2 ] mode\r\n    static member navigate(segment1: string, value1: int, segment2: string, value2: int) : Cmd<_> =\r\n        Router.nav [segment1; string value1; segment2; string value2 ] HistoryMode.PushState\r\n    static member navigate(segment1: string, value1: int, segment2: string, value2: int, mode) : Cmd<_> =\r\n        Router.nav [segment1; string value1; segment2; string value2 ] mode\r\n    static member navigate(segment1: string, value1: int, segment2: string, value2: int, segment3: string) : Cmd<_> =\r\n        Router.nav [segment1; string value1; segment2; string value2; segment3 ] HistoryMode.PushState\r\n    static member navigate(segment1: string, value1: int, segment2: string, value2: int, segment3: string, mode) : Cmd<_> =\r\n        Router.nav [segment1; string value1; segment2; string value2; segment3 ] mode\r\n    static member navigate(segment1: string, value1: int, segment2: string, value2: int, segment3: string, segment4: string) : Cmd<_> =\r\n        Router.nav [segment1; string value1; segment2; string value2; segment3; segment4 ] HistoryMode.PushState\r\n    static member navigate(segment1: string, value1: int, segment2: string, value2: int, segment3: string, segment4: string, mode) : Cmd<_> =\r\n        Router.nav [segment1; string value1; segment2; string value2; segment3; segment4 ] mode\r\n    static member navigate(segment1: string, value1: int, segment2: string, value2: int, segment3: string, value3: int) : Cmd<_> =\r\n        Router.nav [segment1; string value1; segment2; string value2; segment3; string value3 ] HistoryMode.PushState\r\n    static member navigate(segment1: string, value1: int, segment2: string, value2: int, segment3: string, value3: int, mode) : Cmd<_> =\r\n        Router.nav [segment1; string value1; segment2; string value2; segment3; string value3 ] mode\r\n    static member navigate(segment1: string, value1: int, value2: int, value3: int) : Cmd<_> =\r\n        Router.nav [segment1; string value1; string value2; string value3 ] HistoryMode.PushState\r\n    static member navigate(segment1: string, value1: int, value2: int, value3: int, mode) : Cmd<_> =\r\n        Router.nav [segment1; string value1; string value2; string value3 ] mode\r\n    static member navigate(segment1: string, value1: int, value2: int, segment2: string) : Cmd<_> =\r\n        Router.nav [segment1; string value1; string value2; segment2 ] HistoryMode.PushState\r\n    static member navigate(segment1: string, value1: int, value2: int, segment2: string, mode) : Cmd<_> =\r\n        Router.nav [segment1; string value1; string value2; segment2 ] mode\r\n\r\n    static member format([<ParamArray>] xs: string array) =\r\n        Router.encodeParts (List.ofArray xs)\r\n    static member format(segment: string, queryString) : string =\r\n        Router.encodeParts [ segment + Router.encodeQueryString queryString ]\r\n    static member format(segment: string, queryString) : string =\r\n        Router.encodeParts [ segment + Router.encodeQueryStringInts queryString ]\r\n    static member format(segment1: string, segment2: string, queryString) : string =\r\n        Router.encodeParts [ segment1; segment2 + Router.encodeQueryString queryString ]\r\n    static member format(segment1: string, segment2: string, queryString) : string =\r\n        Router.encodeParts [ segment1; segment2 + Router.encodeQueryStringInts queryString ]\r\n    static member format(segment1: string, segment2: string, segment3:int, queryString) : string =\r\n        Router.encodeParts [ segment1; segment2; string segment3 + Router.encodeQueryString queryString ]\r\n    static member format(segment1: string, segment2: string, segment3:int, queryString) : string =\r\n        Router.encodeParts [ segment1; segment2; string segment3 + Router.encodeQueryStringInts queryString ]\r\n    static member format(segment1: string, segment2: string, segment3:string, queryString) : string =\r\n        Router.encodeParts [ segment1; segment2; segment3 + Router.encodeQueryString queryString ]\r\n    static member format(segment1: string, segment2: string, segment3:string, queryString) : string =\r\n        Router.encodeParts [ segment1; segment2; segment3 + Router.encodeQueryStringInts queryString ]\r\n    static member format(segment1: string, segment2: int, segment3:string, queryString) : string =\r\n        Router.encodeParts [ segment1; string segment2; segment3 + Router.encodeQueryString queryString ]\r\n    static member format(segment1: string, segment2: int, segment3:string, queryString) : string =\r\n        Router.encodeParts [ segment1; string segment2; segment3 + Router.encodeQueryStringInts queryString ]\r\n    static member format(segment1: string, segment2: string, segment3:string, segment4: string, queryString) : string =\r\n        Router.encodeParts [ segment1; segment2; segment3; segment4 + Router.encodeQueryString queryString ]\r\n    static member format(segment1: string, segment2: string, segment3:string, segment4: string, queryString) : string =\r\n        Router.encodeParts [ segment1; segment2; segment3; segment4 + Router.encodeQueryStringInts queryString ]\r\n    static member format(segment1: string, segment2: string, segment3:string, segment4: string, segment5, queryString) : string =\r\n        Router.encodeParts [ segment1; segment2; segment3; segment4; segment5 + Router.encodeQueryString queryString ]\r\n    static member format(segment1: string, segment2: string, segment3:string, segment4: string, segment5, queryString) : string =\r\n        Router.encodeParts [ segment1; segment2; segment3; segment4; segment5 + Router.encodeQueryStringInts queryString ]\r\n    static member format(segment1: string, segment2: int, segment3:string, segment4: string, queryString) : string =\r\n        Router.encodeParts [ segment1; string segment2; segment3; segment4 + Router.encodeQueryString queryString ]\r\n    static member format(segment1: string, segment2: int, segment3:string, segment4: string, queryString) : string =\r\n        Router.encodeParts [ segment1; string segment2; segment3; segment4 + Router.encodeQueryStringInts queryString ]\r\n    static member format(segment1: string, segment2: int, segment3:int, segment4: string, queryString) : string =\r\n        Router.encodeParts [ segment1; string segment2; string segment3; segment4 + Router.encodeQueryString queryString ]\r\n    static member format(segment1: string, segment2: int, segment3:int, segment4: string, queryString) : string =\r\n        Router.encodeParts [ segment1; string segment2; string segment3; segment4 + Router.encodeQueryStringInts queryString ]\r\n    static member format(segment1: string, segment2: int, segment3:int, segment4: string, segment5: string, segment6, queryString) : string =\r\n        Router.encodeParts [ segment1; string segment2; string segment3; segment4; segment5; segment6 + Router.encodeQueryString queryString ]\r\n    static member format(segment1: string, segment2: int, segment3:int, segment4: string, segment5: string, segment6, queryString) : string =\r\n        Router.encodeParts [ segment1; string segment2; string segment3; segment4; segment5; segment6 + Router.encodeQueryStringInts queryString ]\r\n    static member format(segment1: string, segment2: int, segment3:int, segment4: int, segment5: string, queryString) : string =\r\n        Router.encodeParts [ segment1; string segment2; string segment3; string segment4; segment5 + Router.encodeQueryString queryString ]\r\n    static member format(segment1: string, segment2: int, segment3:int, segment4: int, segment5: string, queryString) : string =\r\n        Router.encodeParts [ segment1; string segment2; string segment3; string segment4; segment5 + Router.encodeQueryStringInts queryString ]\r\n    static member format(segment1: string, segment2: int, segment3:string, segment4: int, segment5: string, queryString) : string =\r\n        Router.encodeParts [ segment1; string segment2; segment3; string segment4; segment5 + Router.encodeQueryString queryString ]\r\n    static member format(segment1: string, segment2: int, segment3:string, segment4: int, segment5: string, queryString) : string =\r\n        Router.encodeParts [ segment1; string segment2; segment3; string segment4; segment5 + Router.encodeQueryStringInts queryString ]\r\n    static member format(segment1: string, segment2: int, segment3:string, segment4: string, segment5, queryString) : string =\r\n        Router.encodeParts [ segment1; string segment2; segment3; segment4; segment5 + Router.encodeQueryString queryString ]\r\n    static member format(segment1: string, segment2: int, segment3:string, segment4: string, segment5, queryString) : string =\r\n        Router.encodeParts [ segment1; string segment2; segment3; segment4; segment5 + Router.encodeQueryStringInts queryString ]\r\n    static member format(fullPath: string) : string =\r\n        Router.encodeParts [ fullPath ]\r\n    static member format(segment: string, value: int) : string =\r\n        Router.encodeParts [segment; string value ]\r\n    static member format(segment1: string, value1: int, value2: int) : string =\r\n        Router.encodeParts [segment1; string value1; string value2 ]\r\n    static member format(segment1: string, segment2: string, value1: int) : string =\r\n        Router.encodeParts [segment1; segment2; string value1 ]\r\n    static member format(segment1: string, value1: int, segment2: string) : string =\r\n        Router.encodeParts [segment1; string value1; segment2 ]\r\n    static member format(segment1: string, value1: int, segment2: string, value2: int) : string =\r\n        Router.encodeParts [segment1; string value1; segment2; string value2 ]\r\n    static member format(segment1: string, value1: int, segment2: string, value2: int, segment3: string) : string =\r\n        Router.encodeParts [segment1; string value1; segment2; string value2; segment3 ]\r\n    static member format(segment1: string, value1: int, segment2: string, value2: int, segment3: string, segment4: string) : string =\r\n        Router.encodeParts [segment1; string value1; segment2; string value2; segment3; segment4 ]\r\n    static member format(segment1: string, value1: int, segment2: string, value2: int, segment3: string, value3: int) : string =\r\n        Router.encodeParts [segment1; string value1; segment2; string value2; segment3; string value3 ]\r\n    static member format(segment1: string, value1: int, value2: int, value3: int) : string =\r\n        Router.encodeParts [segment1; string value1; string value2; string value3 ]\r\n    static member format(segment1: string, value1: int, value2: int, segment2: string) : string =\r\n        Router.encodeParts [segment1; string value1; string value2; segment2 ]\r\n\r\nmodule Route =\r\n    let (|Int|_|) (input: string) =\r\n        match Int32.TryParse input with\r\n        | true, value -> Some value\r\n        | _ -> None\r\n\r\n    let (|Int64|_|) (input: string) =\r\n        match Int64.TryParse input with\r\n        | true, value -> Some value\r\n        | _ -> None\r\n\r\n    let (|Guid|_|) (input: string) =\r\n        match Guid.TryParse input with\r\n        | true, value -> Some value\r\n        | _ -> None\r\n\r\n    let (|Number|_|) (input: string) =\r\n        match Double.TryParse input with\r\n        | true, value -> Some value\r\n        | _ -> None\r\n\r\n    let (|Decimal|_|) (input: string) =\r\n        match Decimal.TryParse input with\r\n        | true, value -> Some value\r\n        | _ -> None\r\n\r\n    let (|Bool|_|) (input: string) =\r\n        match input.ToLower() with\r\n        | (\"1\"|\"true\")  -> Some true\r\n        | (\"0\"|\"false\") -> Some false\r\n        | \"\" -> Some true\r\n        | _ -> None\r\n\r\n    /// Used to parse the query string parameter of the route.\r\n    ///\r\n    /// For example to match against\r\n    ///\r\n    /// `/users?id={value}`\r\n    ///\r\n    /// You can pattern match:\r\n    ///\r\n    /// `[ \"users\"; Route.Query [ \"id\", value ] ] -> value`\r\n    ///\r\n    /// When `{value}` is an integer then you can pattern match:\r\n    ///\r\n    /// `[ \"users\"; Route.Query [ \"id\", Route.Int userId ] ] -> userId`\r\n    let (|Query|_|) (input: string) =\r\n        try\r\n            let urlParams = Router.createUrlSearchParams input\r\n            Some [ for entry in urlParams.entries() -> entry.[0], entry.[1] ]\r\n        with | _ -> None\r\n","namespace Elmish\nopen System\n\n[<Struct>]\ntype internal RingState<'item> =\n    | Writable of wx:'item array * ix:int\n    | ReadWritable of rw:'item array * wix:int * rix:int\n\ntype internal RingBuffer<'item>(size) =\n    let doubleSize ix (items: 'item array) =\n        seq { yield! items |> Seq.skip ix\n              yield! items |> Seq.take ix\n              for _ in 0..items.Length do\n                yield Unchecked.defaultof<'item> }\n        |> Array.ofSeq\n\n    let mutable state : 'item RingState =\n        Writable (Array.zeroCreate (max size 10), 0)\n\n    member __.Pop() =\n        match state with\n        | ReadWritable (items, wix, rix) ->\n            let rix' = (rix + 1) % items.Length\n            match rix' = wix with\n            | true -> \n                state <- Writable(items, wix)\n            | _ ->\n                state <- ReadWritable(items, wix, rix')\n            Some items.[rix]\n        | _ ->\n            None\n\n    member __.Push (item:'item) =\n        match state with\n        | Writable (items, ix) ->\n            items.[ix] <- item\n            let wix = (ix + 1) % items.Length\n            state <- ReadWritable(items, wix, ix)\n        | ReadWritable (items, wix, rix) ->\n            items.[wix] <- item\n            let wix' = (wix + 1) % items.Length\n            match wix' = rix with\n            | true -> \n                state <- ReadWritable(items |> doubleSize rix, items.Length, 0)\n            | _ -> \n                state <- ReadWritable(items, wix', rix)","(**\nProgram\n---------\nCore abstractions for creating and running the dispatch loop.\n\n*)\n\nnamespace Elmish\n\n\n/// Program type captures various aspects of program behavior\ntype Program<'arg, 'model, 'msg, 'view> = private {\n    init : 'arg -> 'model * Cmd<'msg>\n    update : 'msg -> 'model -> 'model * Cmd<'msg>\n    subscribe : 'model -> Cmd<'msg>\n    view : 'model -> Dispatch<'msg> -> 'view\n    setState : 'model -> Dispatch<'msg> -> unit\n    onError : (string*exn) -> unit\n    syncDispatch: Dispatch<'msg> -> Dispatch<'msg>\n}\n\n/// Program module - functions to manipulate program instances\n[<RequireQualifiedAccess>]\n[<CompilationRepresentation(CompilationRepresentationFlags.ModuleSuffix)>]\nmodule Program =\n    /// Typical program, new commands are produced by `init` and `update` along with the new state.\n    let mkProgram \n        (init : 'arg -> 'model * Cmd<'msg>) \n        (update : 'msg -> 'model -> 'model * Cmd<'msg>)\n        (view : 'model -> Dispatch<'msg> -> 'view) =\n        { init = init\n          update = update\n          view = view\n          setState = fun model -> view model >> ignore\n          subscribe = fun _ -> Cmd.none\n          onError = Log.onError\n          syncDispatch = id }\n\n    /// Simple program that produces only new state with `init` and `update`.\n    let mkSimple \n        (init : 'arg -> 'model) \n        (update : 'msg -> 'model -> 'model)\n        (view : 'model -> Dispatch<'msg> -> 'view) =\n        { init = init >> fun state -> state,Cmd.none\n          update = fun msg -> update msg >> fun state -> state,Cmd.none\n          view = view\n          setState = fun model -> view model >> ignore\n          subscribe = fun _ -> Cmd.none\n          onError = Log.onError\n          syncDispatch = id }\n\n    /// Subscribe to external source of events.\n    /// The subscription is called once - with the initial model, but can dispatch new messages at any time.\n    let withSubscription (subscribe : 'model -> Cmd<'msg>) (program: Program<'arg, 'model, 'msg, 'view>) =\n        let sub model =\n            Cmd.batch [ program.subscribe model\n                        subscribe model ]\n        { program with subscribe = sub }\n\n    /// Trace all the updates to the console\n    let withConsoleTrace (program: Program<'arg, 'model, 'msg, 'view>) =\n        let traceInit (arg:'arg) =\n            let initModel,cmd = program.init arg\n            Log.toConsole (\"Initial state:\", initModel)\n            initModel,cmd\n\n        let traceUpdate msg model =\n            Log.toConsole (\"New message:\", msg)\n            let newModel,cmd = program.update msg model\n            Log.toConsole (\"Updated state:\", newModel)\n            newModel,cmd\n\n        { program with\n            init = traceInit \n            update = traceUpdate }\n\n    /// Trace all the messages as they update the model\n    let withTrace trace (program: Program<'arg, 'model, 'msg, 'view>) =\n        let update msg model =\n            let state,cmd = program.update msg model\n            trace msg state\n            state,cmd\n        { program\n            with update = update }\n\n    /// Handle dispatch loop exceptions\n    let withErrorHandler onError (program: Program<'arg, 'model, 'msg, 'view>) =\n        { program\n            with onError = onError }\n\n    /// For library authors only: map existing error handler and return new `Program` \n    let mapErrorHandler map (program: Program<'arg, 'model, 'msg, 'view>) =\n        { program\n            with onError = map program.onError }\n\n    /// For library authors only: get the current error handler \n    let onError (program: Program<'arg, 'model, 'msg, 'view>) =\n        program.onError\n\n    /// For library authors only: function to render the view with the latest state \n    let withSetState (setState:'model -> Dispatch<'msg> -> unit)\n                     (program: Program<'arg, 'model, 'msg, 'view>) =        \n        { program\n            with setState = setState }\n\n    /// For library authors only: return the function to render the state \n    let setState (program: Program<'arg, 'model, 'msg, 'view>) =        \n        program.setState\n\n    /// For library authors only: return the view function \n    let view (program: Program<'arg, 'model, 'msg, 'view>) =        \n        program.view\n\n    /// For library authors only: function to synchronize the dispatch function\n    let withSyncDispatch (syncDispatch:Dispatch<'msg> -> Dispatch<'msg>)\n                         (program: Program<'arg, 'model, 'msg, 'view>) =        \n        { program\n            with syncDispatch = syncDispatch }\n\n    /// For library authors only: map the program type\n    let map mapInit mapUpdate mapView mapSetState mapSubscribe\n            (program: Program<'arg, 'model, 'msg, 'view>) =\n        { init = mapInit program.init\n          update = mapUpdate program.update\n          view = mapView program.view\n          setState = mapSetState program.setState\n          subscribe = mapSubscribe program.subscribe\n          onError = program.onError\n          syncDispatch = id }\n\n    /// Start the program loop.\n    /// arg: argument to pass to the init() function.\n    /// program: program created with 'mkSimple' or 'mkProgram'.\n    let runWith (arg: 'arg) (program: Program<'arg, 'model, 'msg, 'view>) =\n        let (model,cmd) = program.init arg\n        let rb = RingBuffer 10\n        let mutable reentered = false\n        let mutable state = model        \n        let rec dispatch msg = \n            if reentered then\n                rb.Push msg\n            else\n                reentered <- true\n                let mutable nextMsg = Some msg\n                while Option.isSome nextMsg do\n                    let msg = nextMsg.Value\n                    try\n                        let (model',cmd') = program.update msg state\n                        program.setState model' syncDispatch\n                        cmd' |> Cmd.exec syncDispatch\n                        state <- model'\n                    with ex ->\n                        program.onError (sprintf \"Unable to process the message: %A\" msg, ex)\n                    nextMsg <- rb.Pop()\n                reentered <- false\n        and syncDispatch = program.syncDispatch dispatch            \n\n        program.setState model syncDispatch\n        let sub = \n            try \n                program.subscribe model \n            with ex ->\n                program.onError (\"Unable to subscribe:\", ex)\n                Cmd.none\n        sub @ cmd |> Cmd.exec syncDispatch\n\n    /// Start the dispatch loop with `unit` for the init() function.\n    let run (program: Program<unit, 'model, 'msg, 'view>) = runWith () program\n","namespace Elmish.React\n\n[<AutoOpen>]\nmodule Helpers =\n    open Fable.React.Props\n    open Fable.Core.JsInterop\n\n    /// `Ref` callback that sets the value of an input textbox after DOM element is created.\n    /// Can be used instead of `DefaultValue` and `Value` props to override input box value.\n    let inline valueOrDefault value =\n        Ref <| (fun e -> if e |> isNull |> not && !!e?value <> !!value then e?value <- !!value)\n\n[<RequireQualifiedAccess>]\nmodule Program =\n\n    module Internal =\n\n        open Fable.React\n        open Browser\n        open Elmish\n\n        let withReactBatchedUsing lazyView2With placeholderId (program:Program<_,_,_,_>) =\n            let mutable lastRequest = None\n            let setState model dispatch =\n                match lastRequest with\n                | Some r -> window.cancelAnimationFrame r\n                | _ -> ()\n\n                lastRequest <- Some (window.requestAnimationFrame (fun _ ->\n                    ReactDom.render(\n                        lazyView2With (fun x y -> obj.ReferenceEquals(x,y)) (Program.view program) model dispatch,\n                        document.getElementById placeholderId\n                    )))\n\n            program\n            |> Program.withSetState setState\n\n        let withReactSynchronousUsing lazyView2With placeholderId (program:Elmish.Program<_,_,_,_>) =\n            let setState model dispatch =\n                ReactDom.render(\n                    lazyView2With (fun x y -> obj.ReferenceEquals(x,y)) (Program.view program) model dispatch,\n                    document.getElementById placeholderId\n                )\n\n            program\n            |> Program.withSetState setState\n\n        let withReactHydrateUsing lazyView2With placeholderId (program:Elmish.Program<_,_,_,_>) =\n            let setState model dispatch =\n                ReactDom.hydrate(\n                    lazyView2With (fun x y -> obj.ReferenceEquals(x,y)) (Program.view program) model dispatch,\n                    document.getElementById placeholderId\n                )\n\n            program\n            |> Program.withSetState setState\n\n\n    /// Renders React root component inside html element identified by placeholderId.\n    /// Uses `requestAnimationFrame` to batch updates to prevent drops in frame rate.\n    /// NOTE: This may have unexpected effects in React controlled inputs, see https://github.com/elmish/react/issues/12\n    let withReactBatched placeholderId (program:Elmish.Program<_,_,_,_>) =\n        Internal.withReactBatchedUsing lazyView2With placeholderId program\n\n    /// Renders React root component inside html element identified by placeholderId.\n    /// New renders are triggered immediately after an update.\n    let withReactSynchronous placeholderId (program:Elmish.Program<_,_,_,_>) =\n        Internal.withReactSynchronousUsing lazyView2With placeholderId program\n\n    [<System.Obsolete(\"Use withReactBatched\")>]\n    let withReact placeholderId (program:Elmish.Program<_,_,_,_>) =\n        Internal.withReactBatchedUsing lazyView2With placeholderId program\n\n    [<System.Obsolete(\"Use withReactSynchronous\")>]\n    let withReactUnoptimized placeholderId (program:Elmish.Program<_,_,_,_>) =\n        Internal.withReactSynchronousUsing lazyView2With placeholderId program\n\n    /// Renders React root component inside html element identified by placeholderId using `React.hydrate`.\n    let withReactHydrate placeholderId (program:Elmish.Program<_,_,_,_>) =\n        Internal.withReactHydrateUsing lazyView2With placeholderId program\n","module App\n\nopen Elmish\nopen Elmish.React\nopen Fable.React\nopen Feliz\nopen Feliz.Markdown\nopen Fable.SimpleHttp\nopen Feliz.Router\nopen Fable.Core\nopen Fable.Core.JsInterop\nopen Zanaptak.TypedCssClasses\n\ntype Bulma = CssClasses<\"https://cdnjs.cloudflare.com/ajax/libs/bulma/0.7.5/css/bulma.min.css\", Naming.PascalCase>\ntype FA = CssClasses<\"https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css\", Naming.PascalCase>\n\ntype Highlight =\n    static member inline highlight (properties: IReactProperty list) =\n        Interop.reactApi.createElement(importDefault \"react-highlight\", createObj !!properties)\n\ntype State = \n    { CurrentPath : string list\n      CurrentTab: string list }\n\nlet init () = \n    { CurrentPath = [ ]\n      CurrentTab = [ ] }, Cmd.none\n\ntype Msg =\n    | TabToggled of string list\n    | UrlChanged of string list\n\nlet update msg state =\n    match msg with\n    | UrlChanged segments -> \n        { state with CurrentPath = segments }, \n        match state.CurrentTab with\n        | [ ] when segments.Length > 2 -> \n            segments\n            |> TabToggled\n            |> Cmd.ofMsg\n        | _ -> Cmd.none\n    | TabToggled tabs ->\n        match tabs with\n        | [ ] -> { state with CurrentTab = [ ] }, Cmd.none\n        | _ -> { state with CurrentTab = tabs }, Cmd.none\n\nlet centeredSpinner =\n    Html.div [\n        prop.style [\n            style.textAlign.center\n            style.marginLeft length.auto\n            style.marginRight length.auto\n            style.marginTop 50\n        ]\n        prop.children [\n            Html.li [\n                prop.className [\n                    FA.Fa\n                    FA.FaRefresh\n                    FA.FaSpin\n                    FA.Fa3X\n                ]\n            ]\n        ]\n    ]\n\nlet samples = \n    [ \"useworker-basic\", Samples.Basic.render()\n      \"useworker-elmish\", Samples.Elmish.render() ]\n\nlet githubPath (rawPath: string) =\n    let parts = rawPath.Split('/')\n    if parts.Length > 5\n    then sprintf \"http://www.github.com/%s/%s\" parts.[3] parts.[4]\n    else rawPath\n\n/// Renders a code block from markdown using react-highlight.\n/// Injects sample React components when the code block has language of the format <language>:<sample-name>\nlet codeBlockRenderer (codeProps: Markdown.ICodeProperties) =\n    if codeProps.language <> null && codeProps.language.Contains \":\" then\n        let languageParts = codeProps.language.Split(':')\n        let sampleName = languageParts.[1]\n        let sampleApp =\n            samples\n            |> List.tryFind (fun (name, _) -> name = sampleName)\n            |> Option.map snd\n            |> Option.defaultValue (Html.h1 [\n                prop.style [ style.color.crimson ];\n                prop.text (sprintf \"Could not find sample app '%s'\" sampleName)\n            ])\n        Html.div [\n            sampleApp\n            Highlight.highlight [\n                prop.className \"fsharp\"\n                prop.text(codeProps.value)\n            ]\n        ]\n    else\n        Highlight.highlight [\n            prop.className \"fsharp\"\n            prop.text(codeProps.value)\n        ]\n\nlet renderMarkdown (path: string) (content: string) =\n    Html.div [\n        prop.className [ Bulma.Content; \"scrollbar\" ]\n        prop.style [ \n            style.width (length.percent 100)\n            style.padding (0,20)\n        ]\n        prop.children [\n            if path.StartsWith \"https://raw.githubusercontent.com\" then\n                Html.h2 [\n                    Html.i [ prop.className [ FA.Fa; FA.FaGithub ] ]\n                    Html.anchor [\n                        prop.style [ style.marginLeft 10; style.color.lightGreen ]\n                        prop.href (githubPath path)\n                        prop.text \"View on Github\"\n                    ]\n                ]\n\n            Markdown.markdown [\n                markdown.source content\n                markdown.escapeHtml false\n                markdown.renderers [\n                    markdown.renderers.code codeBlockRenderer\n                ]\n            ]\n        ]\n    ]\n\nmodule MarkdownLoader =\n\n    open Feliz.ElmishComponents\n\n    type State =\n        | Initial\n        | Loading\n        | Errored of string\n        | LoadedMarkdown of content: string\n\n    type Msg =\n        | StartLoading of path: string list\n        | Loaded of Result<string, int * string>\n\n    let init (path: string list) = Initial, Cmd.ofMsg (StartLoading path)\n\n    let resolvePath = function\n    | [ one: string ] when one.StartsWith \"http\" -> one\n    | segments -> String.concat \"/\" segments\n\n    let update (msg: Msg) (state: State) =\n        match msg with\n        | StartLoading path ->\n            let loadMarkdownAsync() = async {\n                let! (statusCode, responseText) = Http.get (resolvePath path)\n                if statusCode = 200\n                then return Loaded (Ok responseText)\n                else return Loaded (Error (statusCode, responseText))\n            }\n\n            Loading, Cmd.OfAsync.perform loadMarkdownAsync () id\n\n        | Loaded (Ok content) ->\n            State.LoadedMarkdown content, Cmd.none\n\n        | Loaded (Error (status, _)) ->\n            State.LoadedMarkdown (sprintf \"Status %d: could not load markdown\" status), Cmd.none\n\n    let render path (state: State) dispatch =\n        match state with\n        | Initial -> Html.none\n        | Loading -> centeredSpinner\n        | LoadedMarkdown content -> renderMarkdown (resolvePath path) content\n        | Errored error ->\n            Html.h1 [\n                prop.style [ style.color.crimson ]\n                prop.text error\n            ]\n\n    let loadMarkdown' (path: string list) =\n        React.elmishComponent(\"LoadMarkdown\", init path, update, render path, key = resolvePath path)\n\nlet loadMarkdown (path: string list) = MarkdownLoader.loadMarkdown' path\n\n// A collapsable nested menu for the sidebar\n// keeps internal state on whether the items should be visible or not based on the collapsed state\nlet nestedMenuList' = FunctionComponent.Of((fun (state: State, name: string, basePath: string list, elems: (string list -> Fable.React.ReactElement) list, dispatch) ->\n    let collapsed = \n        match state.CurrentTab with\n        | [ ] -> false\n        | _ -> \n            basePath \n            |> List.indexed \n            |> List.forall (fun (i, segment) -> \n                List.tryItem i state.CurrentTab \n                |> Option.map ((=) segment) \n                |> Option.defaultValue false) \n\n    Html.li [\n        Html.anchor [\n            prop.className Bulma.IsUnselectable\n            prop.onClick <| fun _ -> \n                match collapsed with\n                | true -> dispatch <| TabToggled (basePath |> List.rev |> List.tail |> List.rev)\n                | false -> dispatch <| TabToggled basePath\n            prop.children [\n                Html.i [\n                    prop.style [ style.marginRight 10 ]\n                    prop.className [\n                        FA.Fa\n                        if not collapsed then FA.FaAngleDown else FA.FaAngleUp\n                    ]\n                ]\n                Html.span name\n            ]\n        ]\n\n        Html.ul [\n            prop.className Bulma.MenuList\n            prop.style [ \n                if not collapsed then yield! [ style.display.none ] \n            ]\n            prop.children (elems |> List.map (fun f -> f basePath))\n        ]\n    ]), memoizeWith = memoEqualsButFunctions)\n\nlet sidebar (state: State) dispatch =\n    let nestedMenuList (name: string) (basePath: string list) (items: (string list -> Fable.React.ReactElement) list) =\n        nestedMenuList'(state, name, basePath, items, dispatch)\n\n    let subNestedMenuList (name: string) (basePath: string list) (items: (string list -> Fable.React.ReactElement) list) (addedBasePath: string list) =\n        nestedMenuList'(state, name, (addedBasePath @ basePath), items, dispatch)\n\n    // top level label\n    let menuLabel (content: string) =\n        Html.p [\n            prop.className [ Bulma.MenuLabel; Bulma.IsUnselectable ]\n            prop.text content\n        ]\n\n    // top level menu\n    let menuList (items: Fable.React.ReactElement list) =\n        Html.ul [\n            prop.className Bulma.MenuList\n            prop.style [ style.width (length.percent 95) ]\n            prop.children items\n        ]\n\n    let menuItem (name: string) (path: string list) =\n        Html.li [\n            Html.anchor [\n                prop.className [\n                    state.CurrentPath = path, Bulma.IsActive\n                    state.CurrentPath = path, Bulma.HasBackgroundPrimary\n                ]\n                prop.text name\n                prop.href (sprintf \"#/%s\" (String.concat \"/\" path))\n            ]\n        ]\n\n    let nestedMenuItem (name: string) (extendedPath: string list) (basePath: string list) =\n        let path = basePath @ extendedPath\n        Html.li [\n            Html.anchor [\n                prop.className [\n                    state.CurrentPath = path, Bulma.IsActive\n                    state.CurrentPath = path, Bulma.HasBackgroundPrimary\n                ]\n                prop.text name\n                prop.href (sprintf \"#/%s\" (String.concat \"/\" path))\n            ]\n        ]\n\n    let allItems =\n        Html.div [\n            prop.className \"scrollbar\"\n            prop.children [\n                menuList [\n                    menuItem \"Overview\" [ ]\n                    menuItem \"Installation\" [ Urls.UseWorker; Urls.Installation ]\n                    menuItem \"Release Notes\" [ Urls.UseWorker; Urls.ReleaseNotes ]\n                    menuItem \"Contributing\" [ Urls.UseWorker; Urls.Contributing ]\n                    menuLabel \"Examples\"\n                    menuItem \"Basic\" [ Urls.UseWorker; Urls.Examples; Urls.Basic ]\n                    menuItem \"Elmish\" [ Urls.UseWorker; Urls.Examples; Urls.Elmish ]\n                ]\n            ]\n        ]\n\n    // the actual nav bar\n    Html.aside [\n        prop.className Bulma.Menu\n        prop.style [\n            style.width (length.perc 100)\n        ]\n        prop.children [ menuLabel \"Feliz.UseWorker\"; allItems ]\n    ]\n\nlet readme = sprintf \"https://raw.githubusercontent.com/%s/%s/master/README.md\"\nlet contributing = sprintf \"https://raw.githubusercontent.com/Zaid-Ajaj/Feliz/master/public/Feliz/Contributing.md\"\n\nlet content state dispatch =\n    let tryTakePath (basePath: string list) (path: string list) =\n        let num = path.Length\n        if basePath.Length >= num then\n            basePath |> List.take num = path\n        else false\n\n    match state.CurrentPath with\n    | [ Urls.UseWorker; Urls.Overview; ] -> lazyView loadMarkdown [ \"UseWorker\"; \"README.md\" ]\n    | [ Urls.UseWorker; Urls.Installation ] -> lazyView loadMarkdown [ \"UseWorker\"; \"Installation.md\" ]\n    | [ Urls.UseWorker; Urls.ReleaseNotes ] -> lazyView loadMarkdown [ \"UseWorker\"; \"RELEASE_NOTES.md\" ]\n    | [ Urls.UseWorker; Urls.Contributing ] -> lazyView loadMarkdown [ contributing ]\n    | [ Urls.UseWorker; Urls.Examples; Urls.Basic ] -> lazyView loadMarkdown [ \"UseWorker\"; \"Examples\"; \"Basic.md\" ]\n    | [ Urls.UseWorker; Urls.Examples; Urls.Elmish ] -> lazyView loadMarkdown [ \"UseWorker\"; \"Examples\"; \"Elmish.md\" ]\n    | _ -> lazyView loadMarkdown [ \"UseWorker\"; \"README.md\" ]\n\nlet main state dispatch =\n    Html.div [\n        prop.className [ Bulma.Tile; Bulma.IsAncestor ]\n        prop.children [\n            Html.div [\n                prop.className [ Bulma.Tile; Bulma.Is2 ]\n                prop.children [ sidebar state dispatch ]\n            ]\n\n            Html.div [\n                prop.className Bulma.Tile\n                prop.style [ style.paddingTop 30 ]\n                prop.children [ content state dispatch ]\n            ]\n        ]\n    ]\n\nlet render (state: State) dispatch =\n    let application =\n        Html.div [\n            prop.style [ \n                style.padding 30\n            ]\n            prop.children [ main state dispatch ]\n        ]\n\n    Router.router [\n        Router.onUrlChanged (UrlChanged >> dispatch)\n        Router.application application\n    ]\n\nProgram.mkProgram init update render\n|> Program.withReactSynchronous \"root\"\n|> Program.withConsoleTrace\n|> Program.run\n","namespace Fable.React\n\nopen Fable.Core\nopen Fable.Core.JsInterop\n\ntype FunctionComponent<'Props> = 'Props -> ReactElement\ntype LazyFunctionComponent<'Props> = 'Props -> ReactElement\n\ntype FunctionComponent =\n#if !FABLE_REPL_LIB\n    /// Creates a lazy React component from a function in another file\n    /// ATTENTION: Requires fable-compiler 2.3, pass the external reference\n    /// directly to the argument position (avoid pipes)\n    static member inline Lazy(f: 'Props -> ReactElement,\n                                fallback: ReactElement)\n                            : LazyFunctionComponent<'Props> =\n#if FABLE_COMPILER\n        let elemType = ReactBindings.React.``lazy``(fun () ->\n            // React.lazy requires a default export\n            (importValueDynamic f).``then``(fun x -> createObj [\"default\" ==> x]))\n        fun props ->\n            ReactElementType.create\n                ReactBindings.React.Suspense\n                (createObj [\"fallback\" ==> fallback])\n                [ReactElementType.create elemType props []]\n#else\n        fun _ ->\n            div [] [] // React.lazy is not compatible with SSR, so just use an empty div\n#endif\n#endif\n\n    /// Creates a function React component that can use hooks to manage the component's life cycle,\n    /// and is displayed in React dev tools (use `displayName` to customize the name).\n    /// Uses React.memo if `memoizeWith` is specified (check `equalsButFunctions` and `memoEqualsButFunctions` helpers).\n    /// When you need a key to optimize collections in React you can use `withKey` argument or define a `key` field in the props object.\n    static member Of(render: 'Props->ReactElement,\n                       ?displayName: string,\n                       ?memoizeWith: 'Props -> 'Props -> bool,\n                       ?withKey: 'Props -> string)\n                    : FunctionComponent<'Props> =\n#if FABLE_COMPILER\n        match displayName with\n        | Some name -> render?displayName <- name\n        | None -> ()\n#endif\n        let elemType =\n            match memoizeWith with\n            | Some areEqual ->\n                let memoElement = ReactElementType.memoWith areEqual render\n#if FABLE_COMPILER\n                match displayName with\n                | Some name -> memoElement?displayName <- \"Memo(\" + name + \")\"\n                | None -> ()\n#endif\n                memoElement\n            | None -> ReactElementType.ofFunction render\n        fun props ->\n#if FABLE_COMPILER\n            let props =\n                match withKey with\n                | Some f -> props?key <- f props; props\n                | None -> props\n#endif\n            ReactElementType.create elemType props []\n"],"sourceRoot":""}